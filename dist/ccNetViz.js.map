{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/layout/utils.js","webpack:///./src/utils.js","webpack:///./src/gl.js","webpack:///./src/primitiveTools.js","webpack:///./src/geomutils.js","webpack:///./src/color.js","webpack:///./src/layout/layout.js","webpack:///./src/spatialSearch/spatialSearch.js","webpack:///./src/spatialSearch/rbush.js","webpack:///./src/ccNetVizMultiLevel.js","webpack:///./src/ccNetViz.js","webpack:///./src/layer.js","webpack:///./src/primitive.js","webpack:///./src/shader.js","webpack:///./src/layout/force.js","webpack:///./src/quadTree.js","webpack:///./src/layout/random.js","webpack:///./src/layout/circular.js","webpack:///./src/layout/tree.js","webpack:///./src/layout/treeT.js","webpack:///./src/layout/hierarchical.js","webpack:///./src/layout/hierarchical2.js","webpack:///./src/layout/spectral.js","webpack:///./src/layout/spectral2.js","webpack:///./src/layout/hive.js","webpack:///./src/layout/grid.js","webpack:///./src/layout/versinus.js","webpack:///./src/spatialSearch/geomtools.js","webpack:///./src/dataSources/textures.js","webpack:///./src/dataSources/files.js","webpack:///./src/texts/texts.js","webpack:///./src/texts/default.js","webpack:///./src/texts/sdf/sdf.js","webpack:///./src/texts/sdf/atlas.js","webpack:///./node_modules/shelf-pack/index.umd.js","webpack:///./src/texts/sdf/spriteGenerator.js","webpack:///./src/texts/sdf/glyphTrimmer.js","webpack:///./src/lazyEvents.js","webpack:///./src/interactivityBatch.js","webpack:///./node_modules/ml-array-max/src/index.js","webpack:///./node_modules/ml-array-rescale/src/index.js","webpack:///./node_modules/ml-array-min/src/index.js","webpack:///./node_modules/ml-matrix/src/dc/lu.js","webpack:///./node_modules/ml-matrix/src/dc/util.js","webpack:///./node_modules/ml-matrix/src/dc/svd.js","webpack:///./node_modules/ml-matrix/src/util.js","webpack:///./node_modules/ml-matrix/src/views/base.js","webpack:///./node_modules/ml-matrix/src/views/transpose.js","webpack:///./node_modules/ml-matrix/src/views/row.js","webpack:///./node_modules/ml-matrix/src/views/sub.js","webpack:///./node_modules/ml-matrix/src/views/selection.js","webpack:///./node_modules/ml-matrix/src/views/rowSelection.js","webpack:///./node_modules/ml-matrix/src/views/columnSelection.js","webpack:///./node_modules/ml-matrix/src/views/column.js","webpack:///./node_modules/ml-matrix/src/views/flipRow.js","webpack:///./node_modules/ml-matrix/src/views/flipColumn.js","webpack:///./node_modules/ml-matrix/src/abstractMatrix.js","webpack:///./node_modules/ml-matrix/src/matrix.js","webpack:///./node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","webpack:///./node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","webpack:///./node_modules/ml-matrix/src/wrap/wrap.js","webpack:///./node_modules/ml-matrix/src/dc/qr.js","webpack:///./node_modules/ml-matrix/src/decompositions.js","webpack:///./node_modules/ml-matrix/src/linearDependencies.js","webpack:///./node_modules/ml-matrix/src/dc/evd.js","webpack:///./node_modules/ml-matrix/src/dc/cholesky.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","create2dArray","rows","columns","concat","_toConsumableArray","Array","keys","map","fill","degrees","nodes","edges","length","forEach","e","source","index","target","ordered_nodes","el","sort","a","b","ordered_degrees","getDepth","obj","depth","children","depth_visited","Error","tmpDepth","getRanges","Math","abs","start","step","Utils","from","arguments","k","isObject","url","callback","type","xmlhttp","XMLHttpRequest","onreadystatechange","cbk","readyState","status","response","responseText","responseType","open","send","gl","extensions","getSupportedExtensions","result","indexOf","getExtension","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","img","onLoad","options","createTexture","image","Image","load","onload","bindTexture","TEXTURE_2D","sdf","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","LUMINANCE","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","RGBA","src","naturalWidth","naturalHeight","location","color","uniform4f","g","left","right","bottom","top","near","far","lr","bt","nf","Float32Array","partitionByStyle","data","parts","pN","part","style","undefined","idx","push","sI","getPartitionStyle","baseStyle","styleProperty","copy","ccNetViz_color","this","edgeSource","edgeTarget","x","y","uniqid","is_edge","cx","cy","se","te","Color","_classCallCheck","test","exec","v","parseInt","substring","dim","minX","minY","maxX","Infinity","maxY","max","min","scX","scY","layoutForce","layoutRandom","layoutCircular","layoutTree","layoutTreeT","layoutHierarchical","layoutHierarchical2","layoutSpectral","layoutSpectral2","layoutHive","layoutGrid","layoutVersinus","_primitiveTools","_geomtools","ct","getEdgeShift","context","screensize","ccNetViz_geomutils","getCurveShift","citx","city","ctx","cty","aspect2","len2","width","height","eq","len","sqrt","curveExc","sizex","nodeSize","sizey","Node","EPS","x1","y1","x2","y2","pointInRect","distance2","Label","textpos","fontSize","isSDF","getLabelSize","pos","size","wantedSize","label","fontScale","offset","bbox","offsety","edge","dx","dy","bb","getTextPos","rectIntersectsRect","pDistance2","Line","getPoints","lineIntersectsRect","Circle","xsize","ysize","getBezierPoints","getBBFromPoints","normalize","bezierIntersectsRect","d1","distance2ToBezier","d2","Curve","n2","n3","sortByDistances","e1","e2","dist2","tConst","lines","circles","curves","labels","spatialIndex","texts","nodesParts","linesParts","curvesParts","circlesParts","nodeStyle","getLabelHideScreen","oldsize","types","addEntity","getBBox","sd","sdi","_loop","styles","textEngine","getEngine","font","setFont","sd_n","sdi_n","rbushtree_s","_rbush2","default","rbushtree","ret","isNode","node","dist","isEdge","isLabel","search","intersectsRect","_tryAddEl","radius","xradius","yradius","radius2","remove","arr","insert","rbush","maxEntries","format","_maxEntries","_minEntries","ceil","_initFormat","clear","calcBBox","toBBox","distBBox","child","empty","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","enlargedArea","intersectionArea","contains","intersects","multiSelect","compare","mid","stack","pop","select","z","j","exp","floor","swap","tmp","all","_all","childBBox","nodesToSearch","collides","_build","slice","_splitRoot","tmpNode","_insert","item","parent","goingUp","path","indexes","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","items","N","M","pow","right2","right3","N2","N1","_chooseSubtree","level","targetNode","area","enlargement","minArea","minEnlargement","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","_allDistMargin","leftBBox","rightBBox","margin","siblings","compareArr","Function","join","ccNetVizMultiLevel","canvas","vizLayout","onContextMenu","onClick","vizScreen","ccNetViz","history","curlevel","addEventListener","histel","set","draw","preventDefault","getBoundingClientRect","clientX","clientY","lCoords","getLayerCoords","find","layout","__computedLayout","insidenodes","insideedges","removeEventListener","self","method","window","sCanvas","document","createElement","getContext","attributes","antialias","lastUniqId","checkUniqId","__uniqid","mergeArrays","cmp","_this","backgroundStyle","background","backgroundColor","removed","setted","minSize","maxSize","edgeStyle","arrow","aspect","events","ccNetViz_lazyEvents","layers","view","drawFunc","textures","files","cntShownNodes","getNodesCnt","cntShownEdges","getEdgesCnt","onRedraw","debounce","checkRemoved","error","insertTempLayer","temp","ccNetViz_layer","getSize","getNodeSize","getLabelHideSize","batch","getBatch","ccNetViz_interactivityBatch","layout_options","main","reflow","applyChanges","getVisibleNodes","getVisibleEdges","removeNode","removeEdge","addEdge","addNode","updateNode","updateEdge","addEdges","addNodes","removeEdges","removeNodes","updateNodes","updateEdges","sc","hideSize","vs","silent","ox","oy","transform","ccNetViz_gl","ortho","offsetX","offsetY","count","viewport","COLOR_BUFFER_BIT","scene","elements","getScreenCoords","conf","rect","disth","distw","findMerge","funcname","args","f1","f2","findArea","getTextPosition","chars","zoomevts","addEvts","evts","passive","passiveEvts","removeEvts","onDownThis","downe","_this2","which","parseTouchEvts","touches","sx","sy","od","onDrag","dragged","custom","panning","zooming","origdist","mx","my","drag","checkChangeViewport","up","stop","Date","getTime","lastUpTime","onDblClick","zoom","deltaY","onWheelThis","mouseup","touchend","touchcancel","mousemove","touchmove","mousedown","touchstart","wheel","onWheel","oldx","oldy","mouseX","mouseY","continuosZoom","startView","searchNodes","focus","focusX","focusY","oldX","oldY","oldSize","clearTimeout","setTimeout","deltaMode","delta","onZoom","contextmenu","gl_lose","loseContext","disable","last_view","is_change","ccNetViz_utils","onChangeViewport","toDataURL","resize","offsetWidth","offsetHeight","getViewport","setViewport","resetView","clearColor","blendEquation","FUNC_ADD","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","enable","BLEND","ccNetViz_textures","ccNetViz_files","ccNetViz_texts","warn","isWebGLSupported","spatialSearch","ccNetViz_spatialSearch","ccNetViz_layout","redraw","nodesFiller","iV","iI","ccNetViz_primitive","vertices","position","textureCoord","colors","quad","indices","labelsFiller","boxMinusX","boxMinusY","relative","steps","labelsBackgroundFiller","cos","sin","ct1","ct2","setVerticeCurveShift","csx","csy","cisx","cisy","curveShift","circleShift","edgesFiller","lengthSoFar","normal","numVertices","numIndices","curve","ydiff2","ydiff3","ydiff4","tx","ty","offsetMul","singles","direction","arrowFiller","lineArrows","curveArrows","circleArrows","getCurrentSpatialSearch","edgeTypes","edgePoses","removedNodes","removedEdges","getIndex","nidx","Uint32Array","dummysd","kArrow","circlesd","linesd","curvesd","OES_standard_derivatives","si","ti","init","tryInitPrimitives","isDirty","defaultAdder","section","addSection","texture","labelAdder","slf","getTexture","is","nodesColored","labelsOutline","labelColor","labels_background","enableLazyRedraw","reset","set_end","update","element","attribute","updateEl","freenode","title","removeNodeAtPos","freeedge","removeEdgeAtPos","getEdgeStyleSize","stylesTransl","line","dashed","chain-dotted","dotted","getEdgeType","initExtensions","add","loadCalled","fsColorTexture","fsLabelTexture","lineTypes","fsCurve","getShiftFuncs","uniforms","shader","exc","uniform1f","uniform2f","screen","lineSize","uniformColor","lineStepSize","shaderparams","arrowsize","cexc","f","sdfSize","scale","vsLabelsShader","bindLabels","is_outline","getLabelType","buffer","boldness","height_font","outlineColor","primitive","fs","shaderParams","ccNetViz_shader","buffers","sections","sectionsByStyle","iS","iB","partLength","filler","maxBufferSize","nV","nI","Uint16Array","zerofiller","indicesarr","verticesarr","adder","_iIs","_iVs","_iBs","Uint8Array","_sizes","store","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","styleName","pL","niV","niI","fb","DYNAMIC_DRAW","olds","bufferSubData","BYTES_PER_ELEMENT","storeToPos","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","unbind","defaultAttr","Shader","_gl","_vs","_fs","program","_program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","attrParams","ACTIVE_ATTRIBUTES","getActiveAttrib","useProgram","enableVertexAttribArray","disableVertexAttribArray","friction","charge","gravity","theta2","chargeDistance2","alpha","distances","strengths","charges","repulse","_","point","dw","dn","px","py","pointCharge","q","weight","accumulate","random","_quadTree2","fixed","visit","rnd","fixed2","points","xs","ys","x1_","y1_","x2_","y2_","nx","ny","insertChild","nPoint","xm","ym","below","root","x0","y0","x3","y3","minDistance2","closestPoint","distance","findNode","_class","_nodes","_utils","_edges","_angle_step","PI","starting_angle","_starting_angle","nd","visited_leafs_parent","layer","centered","visited_leafs","drawTreeCentered","stepy","alphay","stepx","alphax","parents","leafs","visited","drawTreeTop","next_layer","neighbors","includes","makeLayers","roots","isroot","max_outdegree","isOrphan","orphan","components","current_component","unvisited","orphans","max_layer","maybe_more","lowest_layer","child_found","sep","parent_found","parent_","component","max_nodes_layer","index_offset","vertical_nodes","current_layer","initializeComponent","candidates","layerNodes","initHierarchy","separateOrphans","unvisitedNodes","findRoots","maybe_mode","placeAdditional","layer_val","placeOrphans","_mlMatrix","A","ii","reduce","foo","EigenvalueDecomposition","iii","second_min","second_mini","third_min","twoSmallest","realEigenvalues","foo_","eigenvectorMatrix","transpose","xy","maxx","maxy","minx","miny","_epsilon","_MAX_ITTERATIONS","_num_elements","_dims","D","graph","zeros","node_degree","deg","dims","u","ones","uhk","rand","itt_count","uk","ul","top_","vmi","ratio","vsi","dot","normalize2","coordinates","euclideanDistance","narr","_margin","_radius","_nlines","nodes_segment","angle","sq","nnodes","nlines","nlines2","_hubs","_intermediary","nhubs_intermediary","nhubs","stepx1","steprad","nintermediary","steprad2","stepx2","p0","p1","nperipheral","stepxx","Number","EPSILON","cuberoot","eqresult","acos","solveCubic","mindist","lineIntersectsLine","l1p1x","l1p1y","l1p2x","l1p2y","l2p1x","l2p1y","l2p2x","l2p2y","neq","checkBezierTkoef","bezierIntersectsLine","tden","sq1","t1","val","r1x","r1y","r2x","r2y","diffx","diffy","diff2xy","p1x","p1y","p2x","p2y","C","len_sq","param","xx","yy","xmin","xmax","ymin","ymax","_load","_textures","_pending","_n","action","allLoaded","emptyObject","_files","dataType","JSON","parse","ajax","_transformFile","_modules","ccNetViz_defaultTexts","ccNetViz_sdfTexts","_size","_canvas","display","_el","body","appendChild","_context","fillStyle","textAlign","textBaseline","_rendered","_texts","_x","_y","_height","clearRect","fontstr","NaN","text","measureText","fillText","_getText","NEAREST","parentNode","removeChild","DEFAULT_SIZE","atlas","GlyphAtlas","_cachedGlyphs","_glyphs","_rects","fontStyle","curFont","stringify","_getChar","String","fromCharCode","charArray","char","markDirty","w","h","advance","alignment","widthArray","wordWidth","textArray","split","_getCharArray","character","spriteGenerator","SpriteGenerator","glyphID","charCodeAt","cache","glyph","getElementById","testCanvas","addGlyph","SimpleGlyph","replace","alignText","updateTexture","resetCache","_resetCache","bin","ShelfPack","ids","dirty","ALPHA","glyphs","id","rects","bufferedWidth","bufferedHeight","padding","packWidth","packHeight","packOne","bitmap","prevWidth","prevHeight","_texture","deleteTexture","buf","ArrayBuffer","_createTexture","texSubImage2D","autoResize","shelves","freebins","stats","bins","maxId","Shelf","free","pack","allocation","results","inPlace","w2","h2","shelf","waste","h1","w1","best","freebin","getBin","ref","maxh","maxw","allocFreebin","allocShelf","refcount","alloc","unref","factory","textSize","round","cutoff","strokeText","fontFamily","family","fontWeight","middle","navigator","userAgent","gridOuter","Float64Array","gridInner","trimmer","Trimmer","alphaChannel","imageData","createImageData","imgData","getImageData","Uint8ClampedArray","_edt","process","glyphData","numCols","_edt1d","grid","stride","lb","rb","currentRow","lbs","rbs","res","_findRowBounds","bounds","_findGlyphBounds","newData","newWidth","bufferCol","valueOf","_enable","func","wait","immediate","_arguments","timeout","timestamp","later","last","now","callNow","pushUnique","_layers","_insertTempLayer","_draw","_checkUniqId","_toAddEdges","_toAddNodes","_toRemoveEdges","_toRemoveNodes","_nPos","_ePos","_eDirs","geomutils","_actualTempNodes","_actualTempEdges","_this3","_this4","_doRemoveEdges","_this5","_doRemoveNodes","tid","sid","_doAddNodes","_doAddEdges","src_max","input","isArray","rescale","TypeError","output","currentMin","src_min","currentMax","RangeError","minValue","autoMinMax","maxValue","factor","lu_LuDecomposition","[object Object]","matrix","LUcolj","kmax","lu","WrapperMatrix2D_WrapperMatrix2D","checkMatrix","clone","pivotVector","pivotSign","LU","col","matrix_Matrix","isSingular","X","subMatrixRow","determinant","isSquare","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","getFilled2DArray","array","svd_SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","nct","nrt","mrc","pp","eps","kase","MIN_VALUE","isNaN","ks","cs","sn","sp","spm1","epm1","sk","ek","shift","Y","threshold","scols","Ls","rightSingularVectors","VL","mmul","vrows","urows","VLU","sum","solve","diag","vcols","ucols","condition","norm2","rank","tol","diagonal","leftSingularVectors","isMatrix","diagonalMatrix","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","base_BaseView","AbstractMatrix","super","static","species","transpose_MatrixTransposeView","rowIndex","columnIndex","row_MatrixRowView","sub_MatrixSubView","selection_MatrixSelectionView","rowSelection_MatrixRowSelectionView","columnSelection_MatrixColumnSelectionView","column_MatrixColumnView","flipRow_MatrixFlipRowView","flipColumn_MatrixFlipColumnView","superCtor","Matrix","newRows","newColumns","newMatrix","rng","matrix1","matrix2","klass","jj","rowRep","colRep","constructor","setSubMatrix","mulS","rowVector","getRow","row1","row2","columnVector","getColumn","column1","column2","by","sumByRow","sumByColumn","sumAll","prod","vector2","vector1","other","Bcolj","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","r1","c1","r2","c2","embed","mat","cols","resultat","blockMult","halfRows","halfCols","subMatrix","sub","scaled","setRow","setColumn","compareFunction","compareNumbers","trace","subMatrix0","subMatrix1","subMatrix2","selectionView","det","svdSolution","transposeView","identity","eye","negate","neg","tensorProduct","kroneckerProduct","staticMethodWithArgs","eval2","eval","operator","inplaceOp","fillTemplateFunction","op","inplaceOpS","inplaceOpM","staticOp","methods","mathMethod","inplaceMeth","staticMeth","methodWithArg","inplaceMethWithArgs","staticMethWithArgs","tmplVar","inplaceMethod2","inplaceMethodS","inplaceMethodM","staticMethod2","template","values","RegExp","nRows","nColumns","isInteger","WrapperMatrix1D_WrapperMatrix1D","_calculateIndex","wrap","qr_QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","inverse","useSVD","leftHandSide","rightHandSide","xrange","exception","range","dependenciesOneRow","thresholdValue","thresholdError","returnArray","addRow","linearDependencies","Abis","evd_EigenvalueDecomposition","assumeSymmetric","isSymmetric","hh","tred2","dl1","c3","el1","s2","tst1","tql2","H","ort","high","low","orthes","nn","ra","sa","vr","vi","notlast","cdivres","exshift","norm","iter","cdiv","hqr2","imaginaryEigenvalues","xr","xi","yr","yi","cholesky_CholeskyDecomposition","dimension","positiveDefinite","Lrowj","Lrowk","L","B"],"mappings":"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nH,SACLmH,KAAKlH,SAEL,IAAI6C,EAAaD,EAAKka,UAAYmN,eAAernB,EAAI,+BACjDya,EAAQnW,KAAKmW,MAwdjB,WACI,OACIC,YACA4M,IAAK,SAACtsB,EAAMuC,GACRkd,EAAMzf,GAAQuC,EACdkd,EAAMC,SAAS3W,KAAKxG,MA7dK3C,KAAK0J,MAEtCijB,GAAa,EACjB,IAAIvnB,EAAgF,OAA1EgB,EAAQD,SAAWwmB,IAAeA,GAAa,IAASvmB,EAAQD,SAAiBuD,KAE3F,IAMMkjB,IACF,2BACA,sBACA,6BACA,mBACA,oBACA,kEACA,KAGEC,IACF,2BACA,kCACA,8BACA,qCACA,sBACA,wBACA,0BACA,uDACA,2BACA,gBACA,oBACA,yCACA,+DACA,+CACA,WACA,mEACA,MACA,KAaEC,IACF,sBACA,gCACA,gCACA,4BACA,iCACA,gDACA,4BACA,gCACA,QAEEC,IACF,kDACA,eACA,yBACA,SACA,uBACA,sBACA,sBACA,8BACA,0BACA,kBACA,8BACA,oBACA,4EACE/qB,OAAO8qB,IAAW9qB,QACpB,wBACA,wBACA,yCACA,yCACA,6DACA,0CACA,+BACA,sEACA,MAIEgrB,IACF,6BACA,6BACA,+DACA,6CACA,oFACA,IACA,8BACA,8BACA,wCACA,KAsIJ,GAnIAnN,EAAM6M,IAAI,QAAS,IAAI7F,UAAmBzhB,EAAI8W,EAAW,MACjD,2BACA,2BACA,yBACA,8BACA,qBACA,qBACA,uBACA,yBACA,wBACA,sBACA,0BACA,kBACA,+BACEla,OAAOgrB,IAAehrB,QACxB,oBACA,uHAEA,+CACA,4CAEA,iBACA,OAEA,2BACA,sBACA,sBACA,kBACA,8BACA,0BACA,oBACA,mEACLA,OAAO8qB,IAAW9qB,QACb,0EACA,MACA,SAAA9B,GACA,IAAI+sB,EAAW/sB,EAAEgtB,OAAOD,SACxBA,EAASE,KAAO/nB,EAAGgoB,UAAUH,EAASE,IAAKjtB,EAAEmN,UAC7CjI,EAAGioB,UAAUJ,EAASK,OAAQptB,EAAE8M,MAAO9M,EAAE+M,QACzC,IAAIsB,EAAO,IAAMrO,EAAE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","file":"ccNetViz.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nexport function create2dArray (rows, columns) {\r\n    return [...Array(rows).keys()].map(i => Array(columns).fill(0));\r\n}\r\n\r\nexport function degrees(nodes, edges) {\r\n  // should return ordered nodes and their degrees - high to low\r\n  let degrees = Array(nodes.length).fill(0);\r\n  edges.forEach(function(e) {\r\n      degrees[e.source.index] += 1;\r\n      degrees[e.target.index] += 1;\r\n  }); // check to see if not getting double of the degree in undirected graphs\r\n  //getting the order of nodes from highest to lowest degrees\r\n  let ordered_nodes = degrees.map(function(el, i) {\r\n      return { index: i, value: el };\r\n  });\r\n  ordered_nodes.sort(function(a, b) {\r\n      return +(a.value < b.value) || +(a.value === b.value) - 1;\r\n  });\r\n  let ordered_degrees = ordered_nodes.map(function(el){\r\n      return degrees[el.index];\r\n  });\r\n  return { nodes: ordered_nodes,\r\n           degrees: ordered_degrees } ;\r\n}\r\n\r\nexport function getDepth(obj) {\r\n    let depth = 0;\r\n    if (obj.children) {\r\n        obj.children.forEach(function (d) {\r\n\t    if (d.depth_visited == true){\r\n\t\t    throw new Error(\"This layout is only for trees acyclic graphs\");\r\n\t    }\r\n\t    d.depth_visited = true;\r\n            let tmpDepth = getDepth(d);\r\n            if (tmpDepth > depth) {\r\n                depth = tmpDepth;\r\n            }\r\n        })\r\n    }\r\n    return 1 + depth;\r\n}\r\n\r\nexport function getRanges(n) {\r\n  n = Math.abs(n);\r\n  if(n <= 1){\r\n      return {\r\n        start: 0.5,\r\n        step: 1\r\n      };\r\n  }\r\n  let start = .05;\r\n  return {\r\n      start,\r\n      step: (1-2*start)/(n-1)\r\n  }\r\n}\r\n\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class Utils {\r\n  static extend(from){\r\n    for(var i = 1; i < arguments.length; i++){\r\n      for(var k in arguments[i]){\r\n        from[k] = arguments[i][k];\r\n      }\r\n    }\r\n    return from;\r\n  }\r\n  \r\n  static isObject (obj) {\r\n    return obj === Object(obj);\r\n  }\r\n  \r\n  static emptyObject(obj) {\r\n    if(!Utils.isObject(obj))\r\n      return false;\r\n\r\n    for(var k in obj)\r\n      return false;\r\n    return true;\r\n  }\r\n  \r\n  static ajax(url, callback, type){\r\n    var xmlhttp;\r\n    // compatible with IE7+, Firefox, Chrome, Opera, Safari\r\n    xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.onreadystatechange = (function(cbk){\r\n      return function(){\r\n        if (xmlhttp.readyState == 4 && xmlhttp.status == 200){\r\n          cbk(type == 'arraybuffer' ? xmlhttp.response : xmlhttp.responseText);\r\n        }\r\n      }\r\n    })(callback);\r\n    if(type) xmlhttp.responseType=type;\r\n    xmlhttp.open(\"GET\", url, true);\r\n    xmlhttp.send();\r\n  }\r\n\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\n // initialises webGL\r\n\r\nexport default class {\r\n  static initExtensions(gl) {\r\n      let extensions = gl.getSupportedExtensions();\r\n      let result = {};\r\n      for (let i = 1; i < arguments.length; i++) {\r\n          let e = arguments[i];\r\n          (result[e] = extensions.indexOf(e) >= 0) && gl.getExtension(e);\r\n      }\r\n      return result;\r\n  }\r\n  // compiles shader \r\n  \r\n  static createShader(gl, type, source) {\r\n      let result = gl.createShader(type);\r\n      gl.shaderSource(result, source);\r\n      gl.compileShader(result);\r\n\r\n      if (!gl.getShaderParameter(result, gl.COMPILE_STATUS)) {\r\n          console.log(gl.getShaderInfoLog(result));\r\n          return null;\r\n      }\r\n      return result;\r\n  }\r\n\r\n// texture binding\r\n\r\n  static createTexture(gl, img, onLoad, options) {\r\n      let result = gl.createTexture();\r\n\r\n      let image = new Image();\r\n      \r\n      let load = () => {\r\n            image.onload = null;\r\n            gl.bindTexture(gl.TEXTURE_2D, result);\r\n\r\n            //refer article https://open.gl/textures\r\n\r\n            if((options || {}).sdf){\r\n              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, gl.LUMINANCE, gl.UNSIGNED_BYTE, image);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            }else{\r\n              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            }\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            onLoad && onLoad();\r\n      }\r\n\r\n      image.onload = load;\r\n      image.src = img;\r\n      image.naturalWidth && image.naturalHeight && load();\r\n      \r\n      result.image = image;\r\n      return result;\r\n  }\r\n\r\n  static uniformColor(gl, location, color) {\r\n      gl.uniform4f(location, color.r, color.g, color.b, color.a);\r\n  }\r\n\r\n  static ortho(left, right, bottom, top, near, far) {\r\n      let lr = 1 / (left - right),\r\n          bt = 1 / (bottom - top),\r\n          nf = 1 / (near - far);\r\n\r\n      let result = new Float32Array(16);\r\n      result[0] = -2 * lr;\r\n      result[1] = 0;\r\n      result[2] = 0;\r\n      result[3] = 0;\r\n      result[4] = 0;\r\n      result[5] = -2 * bt;\r\n      result[6] = 0;\r\n      result[7] = 0;\r\n      result[8] = 0;\r\n      result[9] = 0;\r\n      result[10] = 2 * nf;\r\n      result[11] = 0;\r\n      result[12] = (left + right) * lr;\r\n      result[13] = (top + bottom) * bt;\r\n      result[14] = (far + near) * nf;\r\n      result[15] = 1;\r\n      return result;\r\n  }\r\n};\r\n","import ccNetViz_color  from './color' ;\r\n\r\nfunction partitionByStyle(data){\r\n    let parts = {};\r\n    \r\n    let pN = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n        let el = data[i];\r\n        let part = parts[el.style] = parts[el.style] || [];\r\n        if(part.idx === undefined)\r\n          part.idx = [];\r\n        part.idx.push(i); \r\n\r\n        el.sI = pN[el.style] = pN[el.style] === undefined ? 0 : pN[el.style]+1;\r\n        \r\n        part.push(el);\r\n    }\r\n    \r\n    return parts;\r\n}\r\n\r\nfunction getPartitionStyle(style, baseStyle, styleProperty){\r\n    let result = {};\r\n\r\n    let copy = s => {\r\n        if (s) for (let p in s) result[p] = s[p];\r\n    };\r\n\r\n    copy(baseStyle);\r\n    copy(style);\r\n\r\n    if (styleProperty) {\r\n        copy(baseStyle[styleProperty]);\r\n        style && copy(style[styleProperty]);\r\n    }\r\n    result.color = result.color && new ccNetViz_color(result.color);\r\n    return result;\r\n};\r\n\r\n\r\nexport {partitionByStyle, getPartitionStyle};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n// refer edge to edge example\r\n//  each edge if\r\n//  i) from node to node, has source and edge both node\r\n//  ii) from node to edge, has source -> node and target -> edge -> source and target of edge\r\n//  iii) from edge to edge, has source -> source and target of edge , target -> source and target of edge\r\n\r\n export default class {\r\n  static edgeSource(e) {\r\n    if(e.source.source){ //e.source.source would give the edges which start from edge (source is edge)\r\n      let s = this.edgeSource(e.source);\r\n      let t = this.edgeTarget(e.source);\r\n      return {\r\n              x: (s.x+t.x)/2, // middle of x-coordinate of edge\r\n              y: (s.y+t.y)/2, //middle of y-coordinate\r\n              uniqid: e.uniqid, \r\n              index: e.index, \r\n              is_edge: true, \r\n              e: e.source\r\n      };\r\n    }\r\n    \r\n    return e.source;\r\n  }\r\n\r\n  static edgeTarget (e) {\r\n    if(e.target.source){\r\n      //target is edge\r\n      let s = this.edgeSource(e.target);\r\n      let t = this.edgeTarget(e.target);\r\n      \r\n      return {\r\n              x: (s.x+t.x)/2,\r\n              y: (s.y+t.y)/2,\r\n              uniqid: e.uniqid,\r\n              index: e.index,\r\n              is_edge: true,\r\n              e: e.target\r\n      };\r\n    }\r\n\r\n    return e.target;\r\n  }\r\n\r\n  static getCurveShift (e, r){\r\n      r = r || {};\r\n      r.x = r.y = r.cx = r.cy = 0;\r\n      if(!e)\r\n        return r;\r\n      if(e.t && e.t >= 1){\t//curve or circle\r\n        if(e.t >= 2){ //circle\r\n          let s = this.edgeSource(e);\r\n          let d = s.y < 0.5 ? 1 : -1;\r\n\r\n          r.cx = d * 1.25;\r\n          r.cy = 0;\r\n        }else{\r\n          let se = this.edgeSource(e);\r\n          let te = this.edgeTarget(e);\r\n\r\n          r.x = se.x - te.x;\r\n          r.y = se.y - te.y;\r\n        }\r\n      }\r\n      return r;\r\n  }\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Describes color properties that could be given to the shader.\r\n * @member {number} r\r\n * @member {number} g\r\n * @member {number} b\r\n * @member {number} a\r\n */\r\n\r\n\r\nexport default class Color {\r\n    constructor(color) {\r\n\r\n        // Default value for red, blue and green.\r\n        // Black color is rendered.\r\n        this.r = this.g = this.b = 0;\r\n        this.a = 1;\r\n\r\n        if (color instanceof Color) {\r\n            this.r = color.r;\r\n            this.g = color.g;\r\n            this.b = color.b;\r\n            this.a = color.a;\r\n        } else if (arguments.length >= 3) {\r\n\r\n            // color of the form [0.75, 0.75, 0.65, 0.6] is matched  here.\r\n            // Aplha value is optional.\r\n            this.r = arguments[0];\r\n            this.g = arguments[1];\r\n            this.b = arguments[2];\r\n            arguments.length > 3 && (this.a = arguments[3]);\r\n        } else if (/^rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+)\\)$/i.test(color)) {\r\n\r\n            // color of the form \"rgba(205, 201, 021, 0.5)\" is matched here.\r\n            // Aplha value is optional.\r\n            color = /^rgba\\((\\d+), ?(\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec(color);\r\n            let get = v => parseInt(v, 10) / 255;\r\n\r\n            this.r = get(color[1]);\r\n            this.g = get(color[2]);\r\n            this.b = get(color[3]);\r\n            this.a = get(color[4]);\r\n        } else if (/^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.test(color)) {\r\n\r\n            // color of the form \"rgb(205, 201, 021)\" is matched here.\r\n            color = /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec(color);\r\n            let get = v => parseInt(v, 10) / 255;\r\n\r\n            this.r = get(color[1]);\r\n            this.g = get(color[2]);\r\n            this.b = get(color[3]);\r\n        } else if (/^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.test(color)) {\r\n\r\n            // color of the form \"rgb(90%, 10%, 20%)\" is matched here.\r\n            color = /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.exec(color);\r\n            let get = v => parseInt(v, 10) / 100;\r\n\r\n            this.r = get(color[1]);\r\n            this.g = get(color[2]);\r\n            this.b = get(color[3]);\r\n        } else if (/^\\#([0-9a-f]{6})$/i.test(color)) {\r\n\r\n            // color is of the form '#23ff74'.\r\n            color = parseInt(color.substring(1), 16);\r\n\r\n            // Converts to range [0,1] by using bitwise operator.\r\n            this.r = (color >> 16 & 255) / 255;\r\n            this.g = (color >> 8 & 255) / 255;\r\n            this.b = (color & 255) / 255;\r\n        }\r\n    }\r\n};","import layoutForce from './force' ;\r\nimport layoutRandom from './random' ;\r\nimport layoutCircular from './circular' ;\r\nimport layoutTree from './tree' ;\r\nimport layoutTreeT from './treeT' ;\r\nimport layoutHierarchical from './hierarchical' ;\r\nimport layoutHierarchical2 from './hierarchical2' ;\r\nimport layoutSpectral from './spectral' ;\r\nimport layoutSpectral2 from './spectral2' ;\r\nimport layoutHive from './hive' ;\r\nimport layoutGrid from './grid' ;\r\nimport layoutVersinus from './versinus' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default class {\r\n  static get force(){\r\n    return layoutForce;\r\n  }\r\n  static get random(){\r\n    return layoutRandom;\r\n  }\r\n  static get circular(){\r\n    return layoutCircular;\r\n  }\r\n  static get tree(){\r\n    return layoutTree;\r\n  }\r\n  static get tree2(){\r\n    return layoutTreeT;\r\n  }\r\n  static get hierarchical(){\r\n    return layoutHierarchical;\r\n  }\r\n  static get hierarchical2(){\r\n    return layoutHierarchical2;\r\n  }\r\n  static get spectral(){\r\n    return layoutSpectral;\r\n  }\r\n  static get spectral2(){\r\n    return layoutSpectral2;\r\n  }\r\n  static get hive(){\r\n    return layoutHive;\r\n  }\r\n  static get grid(){\r\n    return layoutGrid;\r\n  }static get versinus(){\r\n    return layoutVersinus;\r\n  }\r\n  \r\n  static normalize (nodes, dim) {\r\n    let minX, minY, n = nodes.length;\r\n    \r\n    if (dim) {\r\n        minX = dim.minX;\r\n        minY = dim.minY;\r\n    }\r\n    else {\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n        minX = minY = Infinity;\r\n        \r\n        for (let i = 0; i < n; i++) {\r\n            let o = nodes[i];\r\n            maxX = Math.max(maxX, o.x);\r\n            maxY = Math.max(maxY, o.y);\r\n            minX = Math.min(minX, o.x);\r\n            minY = Math.min(minY, o.y);\r\n        };\r\n        \r\n        dim = {\r\n            maxX: maxX,\r\n            maxY: maxY,\r\n            minX: minX,\r\n            minY: minY\r\n        }\r\n    }\r\n\r\n    let scX = minX !== dim.maxX ? 1 / (dim.maxX - minX) : ((minX -= 0.5), 1);\r\n    let scY = minY !== dim.maxY ? 1 / (dim.maxY - minY) : ((minY -= 0.5), 1);\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        let o = nodes[i];\r\n        o.x = scX * (o.x - minX);\r\n        o.y = scY * (o.y - minY);\r\n    }\r\n    \r\n    return dim;\r\n  }\r\n  \r\n}\r\n","import rbush from './rbush' ;\r\nimport ccNetViz_geomutils from '../geomutils' ;\r\nimport ccNetViz_utils from '../utils' ;\r\nimport {partitionByStyle, getPartitionStyle} from '../primitiveTools' ;\r\nimport {\r\n        EPS,\r\n        bezierIntersectsRect, \r\n        bezierIntersectsLine, \r\n        lineIntersectsRect, \r\n        rectIntersectsRect, \r\n        pointInRect, \r\n        distance2ToBezier, \r\n        distance2, \r\n        pDistance2, \r\n        getBBFromPoints,\r\n        eq,\r\n        neq\r\n      } from './geomtools';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n\r\n\r\nlet ct = {};\r\nfunction getEdgeShift(context, screensize, e, ct){\r\n  ccNetViz_geomutils.getCurveShift(e,ct);\t//get shift because of edge-to-edge functionality\r\n  \r\n  \r\n  //compute all transformations made in the vertex shader\r\n  let ctx,cty,citx,city;\r\n  \r\n  ctx = -ct.y;\r\n  cty = ct.x * context.aspect2;\r\n  \r\n  let len2 = ctx*context.width*ctx*context.width + cty*context.height*cty*context.height;\r\n  \r\n  if(eq(len2, 0)){\r\n    ctx = 0;\r\n    cty = 0;\r\n  }else{\r\n    let len = Math.sqrt(len2);\r\n    ctx *= context.curveExc * 0.25 * screensize / len;\r\n    cty *= context.curveExc * 0.25 * screensize / len;\r\n  }\r\n\r\n  let sizex = 2.5 * context.nodeSize * screensize / context.width;\r\n  let sizey = 2.5 * context.nodeSize * screensize / context.height;\r\n  citx = -ct.cy * 0.5 * sizex;\r\n  city = ct.cx * 0.5 * sizey;\r\n  \r\n  ct.x = ctx + citx;\r\n  ct.y = cty + city;\r\n}\r\n\r\nclass Node{\r\n  constructor(n){\r\n    this.e = n;\r\n  };\r\n  get isNode(){\r\n    return true;\r\n  };\r\n  getBBox(){\r\n    return [this.e.x-EPS, this.e.y - EPS, this.e.x + EPS, this.e.y + EPS];\r\n  };\r\n  intersectsRect(x1,y1,x2,y2){\r\n    return pointInRect(this.e.x, this.e.y, x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y, context){\r\n    return distance2(x,y,this.e.x,this.e.y);\r\n  };\r\n}\r\n\r\nclass Label{\r\n  constructor(n, textpos, style, fontSize, isSDF, getLabelSize){\r\n    this.e = n;\r\n    this.pos = textpos;\r\n    this.style = style;\r\n    this.fontSize = fontSize;\r\n    this.isSDF = isSDF;\r\n    this.getLabelSize = getLabelSize;\r\n  };\r\n  get isLabel(){\r\n    return true;\r\n  };\r\n  getTextPos(context,size){\r\n    let x = this.e.x;\r\n    let y = this.e.y;\r\n    \r\n    let x1,y1,x2,y2;\r\n    x1 = x2 = x;\r\n    y1 = y2 = y;\r\n    \r\n    let wantedSize = ( this.isSDF ? this.getLabelSize(context, this.style.label || {}) : this.fontSize );\r\n\r\n    let fontScale = wantedSize / this.fontSize;\r\n    if(wantedSize === 0){ fontScale = 0; };\r\n\r\n    let step = (edge, x) => (x < edge ? 0 : 1);\r\n\r\n\r\n    const offset = 0.5 * context.nodeSize;    \r\n    const MAX =  10.;\r\n    const MIN = -10.;\r\n    let bbox = [MAX, MAX, MIN, MIN];\r\n    \r\n    \r\n    this.pos.forEach((c) => {\r\n      const offsety = (2.0 * step(y, 0.5) - 1.0) * offset;\r\n      x1 = x + size * ( c.dx * fontScale ) / context.width / 2;\r\n      y1 = y + size * ( ( c.dy * fontScale ) + offsety ) / context.height / 2;\r\n      x2 = x + size * ( ( ( c.dx + c.width ) * fontScale ) ) / context.width / 2;\r\n      y2 = y + size * ( ( ( c.dy + c.height ) * fontScale ) + offsety ) / context.height / 2;\r\n      \r\n      bbox[0] = Math.min(x1,bbox[0]);\r\n      bbox[1] = Math.min(y1,bbox[1]);\r\n      bbox[2] = Math.max(x2,bbox[2]);\r\n      bbox[3] = Math.max(y2,bbox[3]);\r\n    });\r\n    \r\n    return bbox;\r\n  };\r\n  getBBox(context){\r\n    let bb = this.getTextPos(context,1);\r\n    bb[0] = Math.min(bb[0],this.e.x);\r\n    bb[1] = Math.min(bb[1],this.e.y);\r\n    bb[2] = Math.max(bb[2],this.e.x);\r\n    bb[3] = Math.max(bb[3],this.e.y);\r\n    return bb;\r\n  };\r\n  intersectsRect(x1,y1,x2,y2,context,size){\r\n    let t = this.getTextPos(context,size);\r\n    return rectIntersectsRect(x1,y1,x2,y2,t[0],t[1],t[2],t[3]);\r\n  };\r\n  dist2(x,y, context, size){\r\n    let t = this.getTextPos(context, size);\r\n\r\n    if(pointInRect(x,y,t[0],t[1],t[2],t[3]))\r\n      return 0;\r\n    \r\n    //minimum from distance from corners or distance from borders\r\n    return Math.min(\r\n      distance2(t[0],t[1]),\r\n      distance2(t[2],t[3]),\r\n      distance2(t[0],t[3]),\r\n      distance2(t[2],t[1]),\r\n      pDistance2(x,y,t[0],t[1],t[2],t[1]),\r\n      pDistance2(x,y,t[0],t[3],t[2],t[3]),\r\n      pDistance2(x,y,t[0],t[1],t[0],t[3]),\r\n      pDistance2(x,y,t[2],t[1],t[2],t[3])              \r\n    );\r\n  };\r\n}\r\n\r\nclass Line{\r\n  constructor(l){\r\n    this.e = l;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getPoints(context, size){\r\n    let x1,y1,x2,y2;\r\n    \r\n    let s = ccNetViz_geomutils.edgeSource(this.e);\r\n    let t = ccNetViz_geomutils.edgeTarget(this.e);\r\n    \r\n    x1 = s.x;\r\n    y1 = s.y;\r\n    x2 = t.x;\r\n    y2 = t.y;\r\n    \r\n    getEdgeShift(context, size, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    getEdgeShift(context, size, t.e, ct);\r\n    x2 += ct.x;\r\n    y2 += ct.y;\r\n\r\n    return [x1,y1,x2,y2];\r\n  };\r\n  getBBox(context, size){\r\n    let p = this.getPoints(context, size);\r\n    \r\n    return [Math.min(p[0],p[2]), Math.min(p[1],p[3]), Math.max(p[0],p[2]), Math.max(p[1],p[3])];\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size){\r\n    let p = this.getPoints(context, size);\r\n\r\n    return lineIntersectsRect(p[0], p[1], p[2], p[3], x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y, context, size){\r\n    let p = this.getPoints(context, size);\r\n\r\n    return pDistance2(x,y,p[0],p[1],p[2],p[3]);\r\n  };\r\n}\r\n\r\nclass Circle{\r\n  constructor(c){\r\n    this.e = c;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getBezierPoints(context, screensize){\r\n    let x1,y1,s;\r\n    s = ccNetViz_geomutils.edgeSource(this.e);\r\n    x1 = s.x;\r\n    y1 = s.y;\r\n\r\n    let size = 2.5 * context.nodeSize * screensize;\r\n    let xsize = size / context.width / 2;\r\n    let ysize = size / context.height / 2;\r\n\r\n    let d = s.y < 0.5 ? 1 : -1;\r\n\r\n    getEdgeShift(context, screensize, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    \r\n    return [\r\n      x1,\r\n      y1,\r\n      x1 + xsize*1,\r\n      y1 + ysize*d,\r\n      x1,\r\n      y1 + ysize*1.25*d,\r\n      x1 - xsize*1,\r\n      y1 + ysize*d\r\n    ];\r\n  };\r\n  getBBox(context, size){\r\n    let v = this.getBezierPoints(context, size);\r\n    \r\n    return getBBFromPoints(v);\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size, normalize){\r\n    let v = this.getBezierPoints(context,size);\r\n    return bezierIntersectsRect(v[0],v[1],v[2],v[3],v[4],v[5],x1,y1,x2,y2) || bezierIntersectsRect(v[2],v[3],v[4],v[5],v[6],v[7],x1,y1,x2,y2);\r\n  };\r\n  dist2(x,y,context,size){\r\n    let v = this.getBezierPoints(context,size);\r\n\r\n    //circle is just 2 bezier curves :)\r\n    let d1 = distance2ToBezier(x,y,v[0],v[1],v[2],v[3],v[4],v[5]);\r\n    let d2 = distance2ToBezier(x,y,v[2],v[3],v[4],v[5],v[6],v[7]);\r\n\r\n    return Math.min(d1,d2);\r\n  };\r\n}\r\n\r\nclass Curve{\r\n  constructor(c){\r\n    this.e = c;\r\n  };\r\n  get isEdge(){\r\n    return true;\r\n  };\r\n  getBezierPoints(context, size, normalize){\r\n    let x1,x2,y1,y2;\r\n    let s = ccNetViz_geomutils.edgeSource(this.e);\r\n    let t = ccNetViz_geomutils.edgeTarget(this.e);\r\n\r\n    x1 = s.x;\r\n    y1 = s.y;\r\n    x2 = t.x;\r\n    y2 = t.y; \r\n    \r\n    let d = normalize(s, t);\r\n    \r\n    let n2 = d.y;\r\n    let n3 = context.aspect2*-d.x;\r\n\r\n    let x = context.width * n2;\r\n    let y = context.height* n3;\r\n    let l = Math.sqrt(x*x+y*y)*2;\r\n\r\n    n2 *= context.curveExc*size/l;\r\n    n3 *= context.curveExc*size/l;\r\n\r\n    getEdgeShift(context, size, s.e, ct);\r\n    x1 += ct.x;\r\n    y1 += ct.y;\r\n    getEdgeShift(context, size, t.e, ct);\r\n    x2 += ct.x;\r\n    y2 += ct.y;\r\n\r\n    let ret = [\r\n      x1,\r\n      y1,\r\n      (x1+x2)/2 + n2,\r\n      (y1+y2)/2 + n3,\r\n      x2,\r\n      y2\r\n    ];\r\n    return ret;\r\n  };\r\n  intersectsRect(x1,y1,x2,y2, context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return bezierIntersectsRect(v[0],v[1],v[2],v[3],v[4],v[5],x1,y1,x2,y2);\r\n  };\r\n  getBBox(context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return getBBFromPoints(v);\r\n  };\r\n  dist2(x,y, context, size, normalize){\r\n    let v = this.getBezierPoints(context, size, normalize);\r\n    return distance2ToBezier(x,y,v[0],v[1],v[2],v[3],v[4],v[5]);\r\n  };\r\n}\r\n\r\n\r\nfunction sortByDistances(e1, e2){\r\n  return e1.dist2 - e2.dist2;\r\n}\r\n\r\n\r\nlet tConst = {nodes: Node, lines: Line, circles: Circle, curves: Curve, labels: Label};\r\n\r\nexport default class spatialIndex{\r\n  constructor(c, texts, options, nodes, nodesParts, lines, linesParts, curves, curvesParts, circles, circlesParts, normalize, nodeStyle, getLabelSize, getLabelHideScreen){\r\n    //init all elements into rbush tree with size 1 (outer bound - the worst case)\r\n    const size = 1; const oldsize = c.size || 1; c.size = 1.;\r\n    \r\n    this.texts = texts;\r\n    this.normalize = normalize;\r\n    let t = this.types = {nodes: [], lines: [], circles: [], curves: [], labels: []};\r\n    let i = 0, d = [];\r\n\r\n    let addEntity = (e, d, i) => {\r\n      d[i] = e.getBBox(c, size, normalize);\r\n      d[i].push(e);\r\n      return e;\r\n    };\r\n    \r\n    nodes.forEach((n) => {\r\n      t.nodes.push(addEntity(new Node(n), d, i++));\r\n    });\r\n\r\n    lines.forEach((l) => {\r\n      t.lines.push(addEntity(new Line(l), d, i++));\r\n    });\r\n\r\n    circles.forEach((c) => {\r\n      t.circles.push(addEntity(new Circle(c), d, i++));\r\n    });\r\n    \r\n    curves.forEach((c) => {\r\n      t.curves.push(addEntity(new Curve(c), d, i++));\r\n    });\r\n\r\n\r\n    let sd = {};\r\n    let sdi = {};\r\n\r\n\r\n    //labels position could differ by style >> must partition by it\r\n    for(let style in nodesParts){\r\n      let nodes = nodesParts[style];\r\n\r\n\r\n      let ns = getPartitionStyle(options.styles[style],nodeStyle,\"label\");\r\n      let textEngine = texts.getEngine(ns.font);\r\n      textEngine.setFont(ns.font);\r\n      const fontSize = textEngine.fontSize;\r\n      const isSDF = textEngine.isSDF;\r\n\r\n      let sd_n = (sd[style] || (sd[style] = []));\r\n      let sdi_n = (sdi[style] || (sdi[style] = 0));\r\n\r\n      //biggest size in which the text is shown\r\n      c.size = getLabelHideScreen(c, ns.label || {});\r\n      nodes.forEach((n) => {\r\n        let textpos = textEngine.get(n.label, n.x, n.y);\r\n        t.labels.push(addEntity(new Label(n,textpos, ns, fontSize, isSDF, getLabelSize), sd_n, sdi_n++));\r\n      });\r\n\r\n      sdi[style] = sdi_n;\r\n    }\r\n\r\n    this.rbushtree_s = {};\r\n    for(let style in sd){\r\n        let rb = this.rbushtree_s[style] = rbush();\r\n        rb.load(sd[style]);\r\n    }\r\n\r\n    //tree initialization\r\n    this.rbushtree = rbush();\r\n    this.rbushtree.load(d);\r\n    \r\n    \r\n    //restore the size of scale (loosen outer the upper bound)\r\n    c.size = oldsize;\r\n  }\r\n  _tryAddEl(ret, e, dist2, nodes, edges, labels){\r\n    if(nodes && e.isNode){\r\n      ret.nodes.push({node:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n    if(edges && e.isEdge){\r\n      ret.edges.push({edge:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n    if(labels && e.isLabel){\r\n      ret.labels.push({label:e.e, dist: Math.sqrt(dist2), dist2: dist2});\r\n    }\r\n  }\r\n  findArea(context,x1,y1,x2,y2,size,nodes,edges,labels){\r\n    if(x1 > x2){\r\n      let p = x1;\r\n      x1 = x2;\r\n      x2 = p;\r\n    }\r\n    if(y1 > y2){\r\n      let p = y1;\r\n      y1 = y2;\r\n      y2 = p;\r\n    }\r\n\r\n    \r\n    let ret = {};\r\n    if(edges) ret.edges = [];\r\n    if(nodes) ret.nodes = [];\r\n    if(labels) ret.labels = [];\r\n\r\n    let x = (x1+x2)/2;\r\n    let y = (y1+y2)/2;\r\n\r\n    let data = this.rbushtree.search([x1-EPS, y1-EPS, x2+EPS,  y2+EPS]);\r\n    if(labels){\r\n        for(let s in this.rbushtree_s){\r\n            data = data.concat(this.rbushtree_s[s].search([x1-EPS, y1-EPS, x2+EPS,  y2+EPS]));\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      let e = data[i][4];\r\n      let dist2 = e.dist2(x,y, context, size, this.normalize, this.texts);\r\n      if(!e.intersectsRect(x1,y1,x2,y2,context, size, this.normalize, this.texts))\r\n        continue;\r\n\r\n      this._tryAddEl(ret, e, dist2, nodes, edges, labels);\r\n    }\r\n    \r\n    for(let k in ret){\r\n      ret[k].sort(sortByDistances);\r\n    }\r\n\r\n    return ret;    \r\n  }\r\n  find(context, x,y, radius, size, nodes, edges, labels){\r\n    let ret = {};\r\n    if(edges) ret.edges = [];\r\n    if(nodes) ret.nodes = [];\r\n    if(labels) ret.labels = [];\r\n\r\n    let xradius = radius;\r\n    let yradius = radius;\r\n\r\n    let radius2 = radius*radius;\r\n\r\n    let data = this.rbushtree.search([x - xradius, y - yradius, x + xradius,  y + yradius]);\r\n    if(labels){\r\n        for(let s in this.rbushtree_s){\r\n            data = data.concat(this.rbushtree_s[s].search([x - xradius, y - yradius, x + xradius,  y + yradius]));\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      let e = data[i][4];\r\n      let dist2 = e.dist2(x,y, context, size, this.normalize, this.texts);\r\n      if(dist2 > radius2)\r\n        continue;\r\n\r\n      this._tryAddEl(ret, e, dist2, nodes, edges, labels);\r\n    }\r\n\r\n    for(let k in ret){\r\n      ret[k].sort(sortByDistances);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n  update(context, t, i, v){\r\n    //init all elements into rbush tree with size 1 (the biggest possible - the worst case)\r\n    let size = 1;\r\n\r\n    this.rbushtree.remove(this.types[t][i]);\r\n\r\n    let e = new tConst[t](v);\r\n    let arr = e.getBBox(context, size, this.normalize, this.texts);\r\n    arr.push(e);\r\n\r\n    this.rbushtree.insert(this.types[t][i] = arr);\r\n  }\r\n}","/*\r\n (c) 2015, Vladimir Agafonkin\r\n RBush, a JavaScript library for high-performance 2D spatial indexing of points and rectangles.\r\n https://github.com/mourner/rbush\r\n*/\r\n\r\n\r\nfunction rbush(maxEntries, format) {\r\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries || 9);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n\r\n    if (format) {\r\n        this._initFormat(format);\r\n    }\r\n\r\n    this.clear();\r\n}\r\n\r\nrbush.prototype = {\r\n\r\n    all: function () {\r\n        return this._all(this.data, []);\r\n    },\r\n\r\n    search: function (bbox) {\r\n\r\n        var node = this.data,\r\n            result = [],\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node.bbox)) return result;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    collides: function (bbox) {\r\n\r\n        var node = this.data,\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node.bbox)) return false;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    load: function (data) {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from stratch using OMT algorithm\r\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                var tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    insert: function (item) {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    },\r\n\r\n    clear: function () {\r\n        this.data = {\r\n            children: [],\r\n            height: 1,\r\n            bbox: empty(),\r\n            leaf: true\r\n        };\r\n        return this;\r\n    },\r\n\r\n    remove: function (item) {\r\n        if (!item) return this;\r\n\r\n        var node = this.data,\r\n            bbox = this.toBBox(item),\r\n            path = [],\r\n            indexes = [],\r\n            i, parent, index, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                index = node.children.indexOf(item);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node.bbox, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    toBBox: function (item) { return item; },\r\n\r\n    compareMinX: function (a, b) { return a[0] - b[0]; },\r\n    compareMinY: function (a, b) { return a[1] - b[1]; },\r\n\r\n    toJSON: function () { return this.data; },\r\n\r\n    fromJSON: function (data) {\r\n        this.data = data;\r\n        return this;\r\n    },\r\n\r\n    _all: function (node, result) {\r\n        var nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push.apply(result, node.children);\r\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    },\r\n\r\n    _build: function (items, left, right, height) {\r\n\r\n        var N = right - left + 1,\r\n            M = this._maxEntries,\r\n            node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = {\r\n                children: items.slice(left, right + 1),\r\n                height: 1,\r\n                bbox: null,\r\n                leaf: true\r\n            };\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = {\r\n            children: [],\r\n            height: height,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        var N2 = Math.ceil(N / M),\r\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\r\n            i, j, right2, right3;\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (i = left; i <= right; i += N1) {\r\n\r\n            right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (j = i; j <= right2; j += N2) {\r\n\r\n                right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    },\r\n\r\n    _chooseSubtree: function (bbox, node, level, path) {\r\n\r\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\r\n\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            minArea = minEnlargement = Infinity;\r\n\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n                child = node.children[i];\r\n                area = bboxArea(child.bbox);\r\n                enlargement = enlargedArea(bbox, child.bbox) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    },\r\n\r\n    _insert: function (item, level, isNode) {\r\n\r\n        var toBBox = this.toBBox,\r\n            bbox = isNode ? item.bbox : toBBox(item),\r\n            insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node.bbox, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    },\r\n\r\n    // split overflowed node into two\r\n    _split: function (insertPath, level) {\r\n\r\n        var node = insertPath[level],\r\n            M = node.children.length,\r\n            m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        var newNode = {\r\n            children: node.children.splice(splitIndex, node.children.length - splitIndex),\r\n            height: node.height,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n\r\n        if (node.leaf) newNode.leaf = true;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    },\r\n\r\n    _splitRoot: function (node, newNode) {\r\n        // split root node\r\n        this.data = {\r\n            children: [node, newNode],\r\n            height: node.height + 1,\r\n            bbox: null,\r\n            leaf: false\r\n        };\r\n        calcBBox(this.data, this.toBBox);\r\n    },\r\n\r\n    _chooseSplitIndex: function (node, m, M) {\r\n\r\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\r\n\r\n        minOverlap = minArea = Infinity;\r\n\r\n        for (i = m; i <= M - m; i++) {\r\n            bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            overlap = intersectionArea(bbox1, bbox2);\r\n            area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis: function (node, m, M) {\r\n\r\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\r\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\r\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\r\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    },\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin: function (node, m, M, compare) {\r\n\r\n        node.children.sort(compare);\r\n\r\n        var toBBox = this.toBBox,\r\n            leftBBox = distBBox(node, 0, m, toBBox),\r\n            rightBBox = distBBox(node, M - m, M, toBBox),\r\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\r\n            i, child;\r\n\r\n        for (i = m; i < M - m; i++) {\r\n            child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child.bbox);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (i = M - m - 1; i >= m; i--) {\r\n            child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child.bbox);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    },\r\n\r\n    _adjustParentBBoxes: function (bbox, path, level) {\r\n        // adjust bboxes along the given tree path\r\n        for (var i = level; i >= 0; i--) {\r\n            extend(path[i].bbox, bbox);\r\n        }\r\n    },\r\n\r\n    _condense: function (path) {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    },\r\n\r\n    _initFormat: function (format) {\r\n        // data format (minX, minY, maxX, maxY accessors)\r\n\r\n        // uses eval-type function compilation instead of just accepting a toBBox function\r\n        // because the algorithms are very sensitive to sorting functions performance,\r\n        // so they should be dead simple and without inner calls\r\n\r\n        var compareArr = ['return a', ' - b', ';'];\r\n\r\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\r\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\r\n\r\n        this.toBBox = new Function('a', 'return [a' + format.join(', a') + '];');\r\n    }\r\n};\r\n\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox(node, toBBox) {\r\n    node.bbox = distBBox(node, 0, node.children.length, toBBox);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox(node, k, p, toBBox) {\r\n    var bbox = empty();\r\n\r\n    for (var i = k, child; i < p; i++) {\r\n        child = node.children[i];\r\n        extend(bbox, node.leaf ? toBBox(child) : child.bbox);\r\n    }\r\n\r\n    return bbox;\r\n}\r\n\r\nfunction empty() { return [Infinity, Infinity, -Infinity, -Infinity]; }\r\n\r\nfunction extend(a, b) {\r\n    a[0] = Math.min(a[0], b[0]);\r\n    a[1] = Math.min(a[1], b[1]);\r\n    a[2] = Math.max(a[2], b[2]);\r\n    a[3] = Math.max(a[3], b[3]);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX(a, b) { return a.bbox[0] - b.bbox[0]; }\r\nfunction compareNodeMinY(a, b) { return a.bbox[1] - b.bbox[1]; }\r\n\r\nfunction bboxArea(a)   { return (a[2] - a[0]) * (a[3] - a[1]); }\r\nfunction bboxMargin(a) { return (a[2] - a[0]) + (a[3] - a[1]); }\r\n\r\nfunction enlargedArea(a, b) {\r\n    return (Math.max(b[2], a[2]) - Math.min(b[0], a[0])) *\r\n           (Math.max(b[3], a[3]) - Math.min(b[1], a[1]));\r\n}\r\n\r\nfunction intersectionArea(a, b) {\r\n    var minX = Math.max(a[0], b[0]),\r\n        minY = Math.max(a[1], b[1]),\r\n        maxX = Math.min(a[2], b[2]),\r\n        maxY = Math.min(a[3], b[3]);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains(a, b) {\r\n    return a[0] <= b[0] &&\r\n           a[1] <= b[1] &&\r\n           b[2] <= a[2] &&\r\n           b[3] <= a[3];\r\n}\r\n\r\nfunction intersects(a, b) {\r\n    return b[0] <= a[2] &&\r\n           b[1] <= a[3] &&\r\n           b[2] >= a[0] &&\r\n           b[3] >= a[1];\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect(arr, left, right, n, compare) {\r\n    var stack = [left, right],\r\n        mid;\r\n\r\n    while (stack.length) {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        select(arr, left, right, mid, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\n// Floyd-Rivest selection algorithm:\r\n// sort an array between left and right (inclusive) so that the smallest k elements come first (unordered)\r\nfunction select(arr, left, right, k, compare) {\r\n    var n, i, z, s, sd, newLeft, newRight, t, j;\r\n\r\n    while (right > left) {\r\n        if (right - left > 600) {\r\n            n = right - left + 1;\r\n            i = k - left + 1;\r\n            z = Math.log(n);\r\n            s = 0.5 * Math.exp(2 * z / 3);\r\n            sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (i - n / 2 < 0 ? -1 : 1);\r\n            newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\r\n            newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\r\n            select(arr, newLeft, newRight, k, compare);\r\n        }\r\n\r\n        t = arr[k];\r\n        i = left;\r\n        j = right;\r\n\r\n        swap(arr, left, k);\r\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\r\n\r\n        while (i < j) {\r\n            swap(arr, i, j);\r\n            i++;\r\n            j--;\r\n            while (compare(arr[i], t) < 0) i++;\r\n            while (compare(arr[j], t) > 0) j--;\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\r\n        else {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k) left = j + 1;\r\n        if (k <= j) right = j - 1;\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nexport default rbush;","import ccNetViz from './ccNetViz';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n// this file is used when we have more than 1 layer , goto example multi level\r\n\r\nvar ccNetVizMultiLevel = function(canvas, options){\r\n  var vizScreen = new ccNetViz(canvas, options);\r\n  var vizLayout;\r\n\r\n  var history = [];\r\n  var curlevel = {};\r\n\r\n\r\n  var onContextMenu, onClick;\r\n  \r\n  //right click >> go back\r\n  canvas.addEventListener('contextmenu', onContextMenu = function(e){\r\n    if(history.length > 0){\r\n\tvar histel = history.pop();\r\n\t//currently shown level\r\n\tcurlevel = histel;\r\n\r\n\tvizScreen.set(curlevel.nodes, curlevel.edges);\r\n\tvizScreen.draw();\r\n    }\r\n\r\n    e.preventDefault();\r\n  });\r\n\r\n  canvas.addEventListener('click', onClick = function(e){\r\n    var bb = canvas.getBoundingClientRect();\r\n    var x = e.clientX - bb.left;\r\n    var y = e.clientY - bb.top;\r\n    var radius = 5;\r\n\r\n    var lCoords = vizScreen.getLayerCoords({radius: radius, x:x, y:y});\r\n    var result = vizScreen.find(lCoords.x,lCoords.y,lCoords.radius,true,false);\r\n    if(result.nodes.length > 0){\r\n      var node = result.nodes[0].node;\r\n\r\n      var layout = node.layout || vizLayout;\r\n      if(node.__computedLayout){\r\n\t//it is not nessesary to recompute layout if it was yet computed on this subgraph\r\n\tlayout = undefined;\r\n      }else{\r\n\t//we store that layout was once computed for this subgraph\r\n        node.__computedLayout = true;\r\n      }\r\n\r\n      if(node.nodes && node.edges){\r\n\tvar insidenodes = node.nodes;\r\n\tvar insideedges = node.edges;\r\n\r\n\thistory.push(curlevel);\r\n\tcurlevel = {nodes: insidenodes, edges: insideedges};\r\n\r\n\tvizScreen.set(curlevel.nodes, curlevel.edges, layout);\r\n\tvizScreen.draw();\r\n      }\r\n    }\r\n  });\r\n  \r\n  ////TODO: Add interactivity functions into this class\r\n  \r\n  this.remove = function(){\r\n    canvas.removeEventListener('contextmenu', onContextMenu);\r\n    canvas.removeEventListener('click', onClick);\r\n    vizScreen.remove();\r\n  };\r\n\r\n\r\n  this.set = function(nodes, edges, layout){\r\n    curlevel = {nodes: nodes, edges: edges};\r\n    history = [];\r\n\r\n    vizLayout = layout;\r\n    vizScreen.set.apply(vizScreen, arguments);\r\n  }\r\n  // apply the functions to the layer\r\n  var exposeMethods = ['find', 'findArea', 'getLayerCoords', 'draw', 'resetView', 'setViewport', 'update', 'resetView'];\r\n  var self = this;\r\n  exposeMethods.forEach(function(method){\r\n    (function(method, self){\r\n      self[method] = function(){\r\n\treturn vizScreen[method].apply(vizScreen, arguments);\r\n      };\r\n    })(method, self);\r\n  });\r\n};\r\n\r\n\r\nwindow.ccNetVizMultiLevel = ccNetVizMultiLevel;\r\n\r\nexport default ccNetVizMultiLevel;","import ccNetViz_layer         from './layer';\r\nimport ccNetViz_layout        from './layout/layout';\r\nimport ccNetViz_gl            from'./gl';\r\nimport ccNetViz_color         from './color';\r\nimport ccNetViz_utils         from './utils';\r\nimport ccNetViz_textures      from './dataSources/textures';\r\nimport ccNetViz_files         from './dataSources/files';\r\nimport ccNetViz_texts         from './texts/texts' ;\r\nimport ccNetViz_lazyEvents    from './lazyEvents';\r\nimport ccNetViz_interactivityBatch from './interactivityBatch';\r\nimport ccNetViz_spatialSearch from './spatialSearch/spatialSearch';\r\nimport {getPartitionStyle}    from './primitiveTools' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors:\r\n *  David Tichy\r\n *    Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\nlet sCanvas = document.createElement(\"canvas\");\r\nfunction getContext(canvas){\r\n    let attributes = { depth: false, antialias: false };\r\n    let gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\r\n\r\n    return gl;\r\n}\r\n\r\n\r\nvar lastUniqId = 0;\r\n\r\nfunction checkUniqId(el){\r\n  if(el.__uniqid !== undefined){\r\n    el.uniqid = el.__uniqid;\r\n    delete el.__uniqid;\r\n  }else if(el.uniqid === undefined){\r\n    el.uniqid = ++lastUniqId;\r\n  }\r\n}\r\n\r\n\r\nfunction mergeArrays(a, b, cmp){\r\n  let r = [];\r\n  r.length = a.length + b.length;\r\n\r\n  let i = 0,j=0,k=0;\r\n\r\n  while (i < a.length && j < b.length)\r\n  {\r\n    if (cmp(a[i],b[j]) < 0)\r\n      r[k++] = a[i++];\r\n    else\r\n      r[k++] = b[j++];\r\n  }\r\n\r\n  while (i < a.length)\r\n    r[k++] = a[i++];\r\n\r\n\r\n  while (j < b.length)\r\n    r[k++] = b[j++];\r\n\r\n  return r;\r\n}\r\n\r\nvar ccNetViz = function(canvas, options){\r\n  let self = this;\r\n  canvas = canvas || sCanvas;\r\n\r\n  let backgroundStyle = options.styles.background = options.styles.background || {};\r\n  let backgroundColor = new ccNetViz_color(backgroundStyle.color || \"rgb(255, 255, 255)\");\r\n\r\n  let removed = false;\r\n  let setted  = false;\r\n\r\n  let nodeStyle = options.styles.node = options.styles.node || {};\r\n  nodeStyle.minSize = nodeStyle.minSize != null ? nodeStyle.minSize : 6;\r\n  nodeStyle.maxSize = nodeStyle.maxSize || 16;\r\n  nodeStyle.color = nodeStyle.color || \"rgb(255, 255, 255)\";\r\n\r\n  if (nodeStyle.label) {\r\n      let s = nodeStyle.label;\r\n      s.color = s.color || \"rgb(120, 120, 120)\";\r\n      s.font = s.font || {type:\"Arial, Helvetica, sans-serif\", size: 11};\r\n  }\r\n\r\n  let edgeStyle = options.styles.edge = options.styles.edge || {};\r\n  edgeStyle.width = edgeStyle.width || 1;\r\n  edgeStyle.color = edgeStyle.color || \"rgb(204, 204, 204)\";\r\n\r\n  let onLoad = () => { if(!options.onLoad || options.onLoad()){this.draw(true);} };\r\n\r\n  if (edgeStyle.arrow) {\r\n      let s = edgeStyle.arrow;\r\n      s.minSize = s.minSize != null ? s.minSize : 6;\r\n      s.maxSize = s.maxSize || 12;\r\n      s.aspect = 1;\r\n  }\r\n\r\n\r\n  let events = new ccNetViz_lazyEvents();\r\n  let layers = {};\r\n  let view,gl,drawFunc,textures,files,texts;\r\n  let context = {};\r\n\r\n  this.cntShownNodes = () => {\r\n    let n = 0;\r\n    for(var k in layers)\r\n      n += layers[k].cntShownNodes();\r\n    return n;\r\n  }\r\n  let getNodesCnt = options.getNodesCnt || this.cntShownNodes;\r\n\r\n  this.cntShownEdges = () => {\r\n    let e = 0;\r\n    for(var k in layers)\r\n      e += layers[k].cntShownEdges();\r\n    return e;\r\n  }\r\n  let getEdgesCnt = options.getEdgesCnt || this.cntShownEdges;\r\n\r\n  let onRedraw = events.debounce(() => {\r\n    self.draw.call(self);\r\n    return false;\r\n  }, 5);\r\n\r\n  function checkRemoved(){\r\n    if(removed){\r\n      console.error(\"Cannot call any function on graph after remove()\")\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  let nodes, edges;\r\n\r\n  function insertTempLayer(){\r\n    if(layers.temp)\r\n      return;\r\n    layers.temp = new ccNetViz_layer(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad);\r\n  }\r\n\r\n  let batch = undefined;\r\n  function getBatch(){\r\n    if(!batch)\r\n      batch = new ccNetViz_interactivityBatch(layers, insertTempLayer, drawFunc, nodes, edges, checkUniqId);\r\n    return batch;\r\n  };\r\n\r\n  this.set = (n, e, layout, layout_options={}) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes = n || [];\r\n    edges = e || [];\r\n\r\n    nodes.forEach(checkUniqId);\r\n    edges.forEach(checkUniqId);\r\n\r\n    layers.temp && layers.temp.set([], [], layout, layout_options);\r\n    layers.main.set(nodes, edges, layout, layout_options);\r\n\r\n    //reset batch\r\n    batch = undefined;\r\n    setted = true;\r\n    return this;\r\n  };\r\n\r\n  //make all dynamic changes static\r\n  this.reflow = () => {\r\n    if(checkRemoved()) return;\r\n\r\n    getBatch().applyChanges();\r\n\r\n    //nodes and edges in dynamic chart are actual\r\n    let n = layers.main.getVisibleNodes();\r\n    if(layers.temp)  n = n.concat(layers.temp.getVisibleNodes());\r\n\r\n    let e = layers.main.getVisibleEdges();\r\n    if(layers.temp) e = e.concat(layers.temp.getVisibleEdges());\r\n\r\n    this.set(n,e);\r\n    this.draw();\r\n  };\r\n\r\n  this.removeNode = (n) => { if(checkRemoved()){return this;} getBatch().removeNode(n); return this; };\r\n  this.removeEdge = (e) => { if(checkRemoved()){return this;} getBatch().removeEdge(e); return this; };\r\n  this.addEdge = (e) => { if(checkRemoved()){return this;} getBatch().addEdge(e); return this;};\r\n  this.addNode = (n) => { if(checkRemoved()){return this;} getBatch().addNode(n); return this;};\r\n  this.updateNode = (n) => { if(checkRemoved()){return this;} return this.removeNode(n).addNode(n); };\r\n  this.updateEdge = (e) => { if(checkRemoved()){return this;} return this.removeEdge(e).addEdge(e); };\r\n  this.applyChanges = () => { if(checkRemoved()){return this;} getBatch().applyChanges(); return this; };\r\n\r\n  this.addEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.addEdge(e);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.addNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.addNode(n);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.removeEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.removeEdge(e);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  this.removeNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.removeNode(n);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  this.updateNodes = (nodes) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    nodes.forEach((n) => {\r\n      this.updateNode(n);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  this.updateEdges = (edges) => {\r\n    if(checkRemoved()) return this;\r\n\r\n    edges.forEach((e) => {\r\n      this.updateEdge(e);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n\r\n  let getSize = (c, s, n, sc) => {\r\n    let result = sc * Math.sqrt(c.width * c.height / (n+1)) / view.size;\r\n    if (s) {\r\n      let min = s.size ? s.size : s.minSize;\r\n      let max = s.size ? s.size : s.maxSize;\r\n\r\n      result = max ? Math.min(max, result) : result;\r\n      if(result < s.hideSize)\r\n        return 0;\r\n      result = min ? Math.max(min, result) : result;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  let getNodeSize = c => getSize(c, c.style, getNodesCnt(), 0.4);\r\n  let getLabelSize = (c,s) => getSize(c, s, getNodesCnt(), 0.25);\r\n\r\n  let getLabelHideSize = (c,s) => {\r\n    if(s){\r\n        const sc = 0.25;\r\n        let n = layers.main.cntShownNodes();  //lower bound\r\n        let t = sc * Math.sqrt(c.width * c.height / ( n+1 ) );\r\n\r\n        let vs;\r\n        if(s.hideSize){\r\n            vs = t / s.hideSize;\r\n            if(s.maxSize)\r\n                vs = Math.min(vs, t / s.maxSize);\r\n            return vs;\r\n        }\r\n    }\r\n\r\n    return 1;\r\n  };\r\n\r\n  let offset = 0.5 * nodeStyle.maxSize;\r\n\r\n  this.draw = (silent) => {\r\n    if(silent && (removed || !setted) ) return;\r\n    if(checkRemoved()) return;\r\n\r\n    let width = canvas.width;\r\n    let height = canvas.height;\r\n    let aspect = width / height;\r\n    let o = view.size === 1 ? offset : 0;\r\n    let ox = o / width;\r\n    let oy = o / height;\r\n\r\n    context.transform = ccNetViz_gl.ortho(view.x - ox, view.x + view.size + ox, view.y - oy, view.y + view.size + oy, -1, 1);\r\n    context.offsetX   = ox;\r\n    context.offsetY   = oy;\r\n    context.width     = 0.5 * width;\r\n    context.height    = 0.5 * height;\r\n    context.aspect2   = aspect * aspect;\r\n    context.aspect    = aspect;\r\n    context.count     = getNodesCnt();\r\n\r\n    //bad hack because we use different size for curveExc and for nodeSize :(\r\n    if(context.style) delete context.style;\r\n    context.curveExc = getSize(context, undefined, getEdgesCnt(), 0.5);\r\n    context.style     = nodeStyle;\r\n    context.nodeSize = getNodeSize(context);\r\n\r\n    gl && gl.viewport(0, 0, width, height);\r\n\r\n    gl && gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    for(let i = 0; i < layers.main.scene.elements.length; i++){\r\n      layers.main.scene.elements[i].draw(context);\r\n      layers.temp && layers.temp.scene.elements[i].draw(context);\r\n    }\r\n  };\r\n  drawFunc = this.draw.bind(this);\r\n\r\n  this.getScreenCoords = function(conf){\r\n    if(checkRemoved()) return;\r\n    let ret = {};\r\n    let rect = canvas.getBoundingClientRect();\r\n    if(conf.x !== undefined) ret.x = (conf.x - view.x + context.offsetX) / (view.size + 2*context.offsetX) * canvas.width + rect.left;\r\n    if(conf.y !== undefined) ret.y = ( 1 - ( conf.y - view.y + context.offsetY) / (view.size + 2*context.offsetY) )  * canvas.height + rect.top;\r\n    return ret;\r\n  };\r\n\r\n  this.getLayerCoords = function(conf){\r\n    if(checkRemoved()) return;\r\n\r\n    let ret = {};\r\n\r\n    ['x','x1','x2'].forEach(k => {\r\n      if(conf[k] !== undefined){\r\n        let x = conf[k];\r\n        x = (x/canvas.width)*(view.size+2*context.offsetX)-context.offsetX+view.x;\r\n        ret[k] = x;\r\n      }\r\n    });\r\n\r\n\r\n    ['y','y1','y2'].forEach(k => {\r\n      if(conf[k] !== undefined){\r\n        let y = conf[k];\r\n        y = (1-y/canvas.height)*(view.size+2*context.offsetY)-context.offsetY+view.y;\r\n        ret[k] = y;\r\n      }\r\n    });\r\n\r\n    if(conf.radius !== undefined){\r\n      let dist = conf.radius;\r\n\r\n      let disth = dist / canvas.height;\r\n      let distw = dist / canvas.width;\r\n      dist = Math.max(disth, distw) * view.size;\r\n\r\n      ret.radius = dist;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  let findMerge = function(funcname, args){\r\n    if(checkRemoved() || !gl) return;\r\n\r\n    let f1 = layers.main[funcname].apply(layers.main, args);\r\n\r\n    if(!layers.temp)\r\n      return f1;\r\n\r\n    let f2 = layers.temp[funcname].apply(layers.temp, args);\r\n\r\n    let r = {};\r\n    for(let key in f1){\r\n      r[key] = mergeArrays(f1[key], f2[key], (e1, e2) => {\r\n        return e1.dist2 - e2.dist2;\r\n      });\r\n    }\r\n\r\n    return r;\r\n  };\r\n\r\n  this.find = function(){return findMerge('find', arguments); };\r\n  this.findArea = function(){return findMerge('findArea', arguments); };\r\n\r\n  this.getTextPosition = (n) => {\r\n    if(checkRemoved() || !gl) return;\r\n\r\n    const offset = 0.5 * context.nodeSize;\r\n    const offsety = (2.0 * (n.y <=  0.5 ? 0 : 1) - 1.0) * offset;\r\n\r\n    let ns = getPartitionStyle(options.styles[n.style],nodeStyle,\"label\");\r\n    let textEngine = texts.getEngine(ns.font);\r\n    textEngine.setFont(ns.font);\r\n\r\n    let wantedSize = ( textEngine.isSDF ? getLabelSize(context, ns.label || {}) : textEngine.fontSize );\r\n    let fontScale = wantedSize / textEngine.fontSize; if(wantedSize === 0){ fontScale = 0; };\r\n\r\n    return {offsetY: offsety, fontScale: fontScale, chars: textEngine.get(n.label, n.x, n.y)};\r\n  };\r\n\r\n\r\n\r\n  let addEvts = (el, evts) => {\r\n    for(var k in (evts || {})){\r\n      evts[k] && el.addEventListener(k, evts[k], {passive: options.passiveEvts});\r\n    }\r\n  }\r\n\r\n  let removeEvts = (el, evts) => {\r\n    for(var k in (evts || {})){\r\n      evts[k] && el.removeEventListener(k, evts[k]);\r\n    }\r\n  }\r\n\r\n  let onDownThis = onMouseDown.bind(this);\r\n\r\n  let zoomevts;\r\n  addEvts(canvas, zoomevts = {\r\n    'mousedown': onDownThis,\r\n    'touchstart': onDownThis,\r\n    'wheel': onWheel.bind(this),\r\n    'contextmenu': options.onContextMenu\r\n  })\r\n\r\n  this.remove = () => {\r\n    if(checkRemoved()) return;\r\n\r\n    for(var k in layers){layers[k].remove();}\r\n\r\n    if(gl){\r\n      gl.viewport(0, 0, context.width*2, context.height*2);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n      let gl_lose = gl.getExtension('WEBGL_lose_context');\r\n      gl_lose && gl_lose.loseContext();\r\n    }\r\n\r\n    removeEvts(canvas, zoomevts);\r\n\r\n    events.disable();\r\n    texts && texts.remove();\r\n\r\n    removed = true;\r\n  }\r\n\r\n  let last_view = {};\r\n  function checkChangeViewport(){\r\n    let is_change = false;\r\n    if(last_view){\r\n      for(let k in view){\r\n        if(last_view[k] !== view[k])\r\n          is_change = true;\r\n      }\r\n    }\r\n    ccNetViz_utils.extend(last_view, view);\r\n\r\n    if(is_change){\r\n      options.onChangeViewport && options.onChangeViewport(view);\r\n    }\r\n  }\r\n\r\n  function onContextMenu(e){\r\n  }\r\n\r\n  function onWheel(e) {\r\n      let rect = canvas.getBoundingClientRect();\r\n\r\n      if(!options.passiveEvts){ e.preventDefault(); }\r\n\r\n      let oldsize, oldx, oldy;\r\n\r\n      // Mouse coordinates\r\n      const mouseX = e.clientX - rect.left;\r\n      const mouseY = e.clientY - rect.top;\r\n      const radius = 10;\r\n\r\n      // if no timer found i.e. we are not in continuous phase\r\n      // we are calculating the focus variables again\r\n      if(!onWheel.continuosZoom) {\r\n          onWheel.startView = {size: view.size, x: view.x, y: view.y};\r\n\r\n          const lCoords = this.getLayerCoords({ x1: mouseX - radius, y1: mouseY - radius, x2: mouseX + radius, y2: mouseY - radius });\r\n          const searchNodes = this.findArea(lCoords.x1, lCoords.y1, lCoords.x2, lCoords.y2, true);\r\n          // if node found beneath mouse_ptr, zooming_focus is the center of that node\r\n          if (searchNodes.nodes.length) {\r\n              let node = searchNodes.nodes[0];\r\n              let focus = this.getScreenCoords({\r\n                  x: node.node.x,\r\n                  y: node.node.y\r\n              });\r\n              onWheel.focusX = focus.x;\r\n              onWheel.focusY = focus.y;\r\n          }\r\n          // else, it is the window co-ords of the mouse_ptr\r\n          else {\r\n              onWheel.focusX = mouseX;\r\n              onWheel.focusY = mouseY;\r\n          }\r\n          onWheel.oldX = view.x;\r\n          onWheel.oldY = view.y;\r\n          onWheel.oldSize = view.size;\r\n\r\n          if(onWheel.continuosZoom)\r\n              clearTimeout(onWheel.continuosZoom);\r\n\r\n          oldx = view.x;\r\n          oldy = view.y;\r\n      }\r\n      onWheel.continuosZoom = setTimeout(() => {\r\n        onWheel.continuosZoom = undefined;\r\n      }, 200);\r\n\r\n      let size = Math.min(1.0, view.size * (1 + 0.001 * (e.deltaMode ? 33 : 1) * e.deltaY));\r\n      let delta = size - onWheel.oldSize;\r\n\r\n      view.size = size;\r\n      view.x = Math.max(0, Math.min(1 - size, onWheel.oldX - delta * onWheel.focusX / canvas.width));\r\n      view.y = Math.max(0, Math.min(1 - size, onWheel.oldY - delta * (1 - onWheel.focusY / canvas.height)));\r\n\r\n      if(options.onZoom && options.onZoom(view) === false){\r\n        view.size = oldsize;\r\n        view.x = oldx;\r\n        view.y = oldy;\r\n        return;\r\n      }\r\n\r\n      checkChangeViewport();\r\n\r\n      this.draw();\r\n  }\r\n\r\n  let lastUpTime = 0;\r\n  function onMouseDown(downe) {\r\n    if(downe.which !== 1) return; //catch only 1 - left mouse button\r\n\r\n    let parseTouchEvts = (e) => {\r\n      if(!e.touches) return e;\r\n\r\n      let x = 0,y = 0;\r\n      for(let i = 0; i < e.touches.length; i++){ x += e.touches[i].clientX; y += e.touches[i].clientY; }\r\n      e.clientX = x / e.touches.length;\r\n      e.clientY = y / e.touches.length;\r\n\r\n      return e;\r\n    }\r\n\r\n\r\n    downe = parseTouchEvts(downe);\r\n\r\n\r\n    let width = canvas.width / view.size;\r\n    let height = canvas.height / view.size;\r\n    let sx = downe.clientX;\r\n    let sy = downe.clientY;\r\n    let dx = view.x + sx / width;\r\n    let dy = sy / height - view.y;\r\n    let od = options.onDrag;\r\n    let dragged, custom;\r\n    let panning = true;\r\n    let zooming = false;\r\n    let evts;\r\n\r\n    let origdist;\r\n    if((downe.touches || []).length === 2){\r\n      let mx = downe.touches[0].clientX - downe.touches[1].clientX, my = downe.touches[0].clientY - downe.touches[1].clientY;\r\n      origdist = Math.sqrt( mx * mx + my * my );\r\n      zooming = true;\r\n    }\r\n\r\n\r\n    let drag = e => {\r\n      e = parseTouchEvts(e);\r\n\r\n      if(e.touches && e.touches.length != 1)  panning = false;\r\n\r\n      if (dragged) {\r\n          if(panning){\r\n              if (custom) {\r\n                  od.drag && od.drag(e);\r\n              }\r\n              else {\r\n                  view.x = Math.max(0, Math.min(1 - view.size, dx - e.clientX / width));\r\n                  view.y = Math.max(0, Math.min(1 - view.size, e.clientY / height - dy));\r\n                  checkChangeViewport();\r\n                  this.draw();\r\n              }\r\n          }\r\n      }\r\n      else {\r\n          let x,y;\r\n          if(e.touches && e.touches.length > 0){ x = e.touches[0].clientX; y = e.touches[0].clientY; } else { x = e.clientX; y = e.clientY; }\r\n\r\n          let mx = x - sx;\r\n          let my = y - sy;\r\n\r\n          if (mx * mx + my * my > 8) {\r\n              dragged = true;\r\n              custom = od && od.start(downe);\r\n              custom && od.drag && od.drag(e);\r\n          }\r\n      }\r\n      if(!options.passiveEvts){ e.preventDefault(); }\r\n    };\r\n\r\n    let up = e => {\r\n        e = parseTouchEvts(e);\r\n\r\n        custom && od.stop && od.stop(e);\r\n\r\n        if(!dragged){\r\n          options.onClick && options.onClick(e);\r\n\r\n          if( new Date().getTime() - lastUpTime < 250 ) {\r\n            options.onDblClick && options.onDblClick(e);\r\n            lastUpTime = 0;\r\n          }else{\r\n            lastUpTime = new Date().getTime();\r\n          }\r\n        }\r\n\r\n        removeEvts(window, evts);\r\n    };\r\n\r\n    let zoom = e => {\r\n        e = parseTouchEvts(e);\r\n\r\n        if(e.touches && e.touches.length == 2){\r\n            let mx = e.touches[0].clientX - e.touches[1].clientX, my = e.touches[0].clientY - e.touches[1].clientY;\r\n            let dist = Math.sqrt(mx * mx + my * my);\r\n            e.deltaY = -(dist - origdist)*5;\r\n            onWheelThis(e);\r\n            origdist = dist;\r\n        }\r\n    };\r\n\r\n    addEvts(window, evts = {\r\n      'mouseup': up,\r\n      'touchend': up,\r\n      'touchcancel': up,\r\n      'mousemove': zooming ? zoom : drag,\r\n      'touchmove': zooming ? zoom : drag\r\n    });\r\n  }\r\n\r\n\r\n  this.image = function() {\r\n    if(checkRemoved()) return;\r\n\r\n    return canvas.toDataURL();\r\n  }\r\n\r\n  this.resize = function() {\r\n    if(checkRemoved()) return;\r\n\r\n    canvas.width = canvas.offsetWidth;\r\n    canvas.height = canvas.offsetHeight;\r\n  }\r\n\r\n  this.getViewport = function() {\r\n    return view;\r\n  }\r\n\r\n  this.setViewport = function(v) {\r\n    if(checkRemoved()) return;\r\n\r\n    ccNetViz_utils.extend(view, v);\r\n\r\n    checkChangeViewport();\r\n  }\r\n\r\n  this.resetView = () => this.setViewport({size:1,x:0,y:0});\r\n\r\n  //expose these methods from layer into this class\r\n  ['update'].forEach(function(method){\r\n    (function(method, self){\r\n      self[method] = function(){\r\n        let args = arguments;\r\n        for(let k in layers){\r\n          let l = layers[k];\r\n          l[method].apply(l,args);\r\n        };\r\n        return self;\r\n      };\r\n    })(method, self);\r\n  });\r\n\r\n  if(gl = getContext(canvas)){\r\n    gl.clearColor(backgroundColor.r, backgroundColor.g, backgroundColor.b, backgroundColor.a);\r\n    gl.blendEquation(gl.FUNC_ADD);\r\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);\r\n    gl.enable(gl.BLEND);\r\n  }\r\n\r\n  view = {size:1,x:0,y:0};\r\n\r\n  this.resize();\r\n\r\n  textures = new ccNetViz_textures(events, onLoad);\r\n  files = new ccNetViz_files(events, onLoad);\r\n  texts = gl && (new ccNetViz_texts(gl, files, textures));\r\n  layers.main = new ccNetViz_layer(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad);\r\n\r\n  if(!gl)\r\n    console.warn(\"Cannot initialize WebGL context\");\r\n};\r\n\r\nccNetViz.isWebGLSupported = () => !!getContext(sCanvas);\r\n\r\n\r\nccNetViz.color = ccNetViz_color;\r\nccNetViz.spatialSearch = ccNetViz_spatialSearch;\r\nccNetViz.layout = ccNetViz_layout;\r\nccNetViz.color = ccNetViz_color;\r\n\r\n\r\nwindow.ccNetViz = ccNetViz;\r\nexport default ccNetViz;\r\n","import ccNetViz_color     from './color' ;\r\nimport ccNetViz_gl        from './gl' ;\r\nimport ccNetViz_primitive from './primitive' ;\r\nimport ccNetViz_layout    from './layout/layout' ;\r\nimport ccNetViz_geomutils from './geomutils' ;\r\nimport ccNetViz_utils     from './utils' ;\r\nimport {partitionByStyle} from './primitiveTools';\r\nimport ccNetViz_spatialSearch from './spatialSearch/spatialSearch' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors:\r\n * \tDavid Tichy\r\n * \tAleš Saska - http://alessaska.cz/\r\n */\r\n\r\nexport default function(canvas, context, view, gl, textures, files, texts, events, options, backgroundColor, nodeStyle, edgeStyle, getSize, getNodeSize, getLabelSize, getLabelHideSize, getNodesCnt, getEdgesCnt, onRedraw, onLoad) {\r\n    getNodesCnt = getNodesCnt || (()=>{return this.nodes.length;});\r\n    getEdgesCnt = getEdgesCnt || (()=>{return this.edges.length;});\r\n\r\n    this.redraw = onRedraw || (() => {});\r\n\r\n    options = options || {};\r\n    options.styles = options.styles || {};\r\n\r\n    let nodesFiller = (\r\n      style => ({\r\n        set: (v, e, iV, iI) => {\r\n            let x = e.x;\r\n            let y = e.y;\r\n            // places vertex values of nodes in buffer , v.position is buffer\r\n            ccNetViz_primitive.vertices(v.position, iV, x, y, x, y, x, y, x, y);\r\n            ccNetViz_primitive.vertices(v.textureCoord, iV, 0, 0, 1, 0, 1, 1, 0, 1);\r\n            if(v.color){\r\n              let c = e.color;\r\n              ccNetViz_primitive.colors(v.color, iV, c, c, c, c);\r\n            }\r\n            ccNetViz_primitive.quad(v.indices, iV, iI);\r\n        }})\r\n    );\r\n    let labelsFiller = (style => {\r\n        return (function(style){\r\n          let textEngine = texts.getEngine(style.font);\r\n\r\n          textEngine.setFont(style.font);\r\n\r\n          return {\r\n              set: (v, e, iV, iI) => {\r\n                var x = e.x;\r\n                var y = e.y;\r\n\r\n                var ret = false;\r\n                var parts = textEngine.get(e.label || \"\", x, y, () => {ret = true;});\r\n                for(var i = 0; i < parts.length; i++, iV += 4, iI += 6){\r\n                  // parts is the array of characters, character description and position w.r.t node \r\n                  let c = parts[i];\r\n                  //position of the node\r\n                  ccNetViz_primitive.vertices(v.position, iV, x, y, x, y, x, y, x, y);\r\n                  //position of the vertices of box of label to be rendered\r\n                  if (i==0) {\r\n\r\n                    // bring the center of box of character to the center of node (incase if you are wondering\r\n                    // why not c.width/2 and c.height/2 , it's because for c.width/2, it will exactly coincide with\r\n                    // center of node, so some of the node labels could go out of canvas)\r\n\r\n                    var boxMinusX = c.width/3;\r\n                    var boxMinusY = c.height/3;\r\n                  }\r\n                  ccNetViz_primitive.vertices(v.relative, iV, c.dx-boxMinusX, c.dy-boxMinusY, c.width + c.dx-boxMinusX, c.dy-boxMinusY, c.width + c.dx-boxMinusX, c.height + c.dy-boxMinusY, c.dx-boxMinusX, c.height + c.dy-boxMinusY);\r\n                  // position of characters in atlas\r\n                  if (v.textureCoord) {\r\n                  ccNetViz_primitive.vertices(v.textureCoord, iV, c.left, c.bottom, c.right, c.bottom, c.right, c.top, c.left, c.top);\r\n                  }\r\n                  ccNetViz_primitive.quad(v.indices, iV, iI);\r\n                }\r\n                return ret;\r\n              },\r\n              size: (v,e) => {\r\n                return textEngine.steps(e.label || \"\");\r\n              }\r\n            };\r\n        })(style);\r\n    });\r\n    let labelsBackgroundFiller = (\r\n      style => ({\r\n        set: (v, e, iV, iI) => {\r\n            let textEngine = texts.getEngine(style.font);\r\n            textEngine.setFont(style.font);\r\n            var ret = false;\r\n            \r\n            var parts = textEngine.get(e.label || \"\", x, y, () => {ret = true;});\r\n            let width = 0;\r\n            for(var i=0;i<parts.length;i++) {\r\n              width = width > Math.abs(parts[i].dx) ? width : Math.abs(parts[i].dx);\r\n            }\r\n            let extraSpace = 0; \r\n            let x = e.x;\r\n            let y = e.y;\r\n            let height = y<=0.5 ? Math.abs((parts[parts.length-1].dy))+extraSpace : -Math.abs((parts[parts.length-1].dy))-extraSpace;\r\n            width = x<=0.5 ? width+extraSpace : -width-extraSpace;\r\n            ccNetViz_primitive.vertices(v.position, iV, x, y, x, y, x, y, x, y);\r\n            ccNetViz_primitive.vertices(v.relative, iV, dx, 0, width , dx, width , height , 0, height );\r\n            ccNetViz_primitive.quad(v.indices, iV, iI);\r\n        }})\r\n    );\r\n    let normalize = (a, b) => {\r\n        let x = b.x - a.x;\r\n        let y = b.y - a.y;\r\n        let sc = 1 / Math.sqrt(x*x + y*y);\r\n        return { x: sc * x, y: sc * y };\r\n    };\r\n\r\n    let dx = Math.cos(0.9);\r\n    let dy = Math.sin(0.9);\r\n\r\n    let ct1 = {}, ct2 = {}, ct = {};\r\n    let setVerticeCurveShift = (v,iV,s,t) => {\r\n        let csx,csy,ctx,cty,cisx,cisy,sisy,citx,city;\r\n        ccNetViz_geomutils.getCurveShift(t.e,ct1);\r\n        ctx = ct1.x;\r\n        cty = ct1.y;\r\n        citx = ct1.cx;\r\n        city = ct1.cy;\r\n\r\n        ccNetViz_geomutils.getCurveShift(s.e,ct2);\r\n        csx = ct2.x;\r\n        csy = ct2.y;\r\n        cisx = ct2.cx;\r\n        cisy = ct2.cy;\r\n\r\n        v.curveShift && ccNetViz_primitive.vertices(v.curveShift, iV, -csy, csx, -csy, csx, -cty, ctx, -cty, ctx);\r\n        v.circleShift && ccNetViz_primitive.vertices(v.circleShift, iV, -cisy, cisx, -cisy, cisx, -city, citx, -city, citx);\r\n    };\r\n\r\n    let edgesFiller = {\r\n      'lines': (style => ({\r\n            set: (v, e, iV, iI) => {\r\n                let s = ccNetViz_geomutils.edgeSource(e);\r\n                let t = ccNetViz_geomutils.edgeTarget(e);\r\n                let dx = s.x-t.x;\r\n                let dy = s.y-t.y;\r\n                let d = normalize(s, t);\r\n\r\n                setVerticeCurveShift(v,iV,s,t);\r\n\r\n                ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, s.x, s.y, t.x, t.y, t.x, t.y);\r\n                ccNetViz_primitive.vertices(v.lengthSoFar, iV, 0, 0,0,0,dx, dy, dx, dy);\r\n                ccNetViz_primitive.vertices(v.normal, iV, -d.y, d.x, d.y, -d.x, d.y, -d.x, -d.y, d.x);\r\n                ccNetViz_primitive.quad(v.indices, iV, iI);\r\n            }})),\r\n       'curves': (style => ({\r\n                    numVertices: 3,\r\n                    numIndices: 3,\r\n                    set: (v, e, iV, iI) => {\r\n                        let s = ccNetViz_geomutils.edgeSource(e);\r\n                        let t = ccNetViz_geomutils.edgeTarget(e);\r\n                        let dx = s.x-t.x;\r\n                        let dy = s.y-t.y;\r\n                        let d = normalize(s, t);\r\n\r\n                        setVerticeCurveShift(v,iV,s,t);\r\n\r\n                        ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, 0.5 * (t.x + s.x), 0.5 * (t.y + s.y), t.x, t.y);\r\n                        ccNetViz_primitive.vertices(v.lengthSoFar, iV, 0, 0,dx/2, dy/2, dx, dy);\r\n                        ccNetViz_primitive.vertices(v.normal, iV, 0, 0, d.y, -d.x, 0, 0);\r\n                        ccNetViz_primitive.vertices(v.curve, iV, 1, 1, 0.5, 0.0, 0, 0);\r\n                        ccNetViz_primitive.indices(v.indices, iV, iI, 0, 1, 2);\r\n                    }\r\n                })),\r\n       'circles': (style => ({\r\n                    set: (v, e, iV, iI) => {\r\n                        let s = ccNetViz_geomutils.edgeSource(e);\r\n                        let d = s.y < 0.5 ? 1 : -1;\r\n\r\n                        let xdiff1 = 0;\r\n                        let ydiff1 = 0;\r\n                        let xdiff2 = 1;\r\n                        let ydiff2 = d;\r\n                        let xdiff3 = 2;\r\n                        let ydiff3 = 1.25*d;\r\n                        let xdiff4 = 3;\r\n                        let ydiff4 = 1.5*d;\r\n\r\n                        setVerticeCurveShift(v,iV,s,s);\r\n\r\n                        ccNetViz_primitive.vertices(v.position, iV, s.x, s.y, s.x, s.y, s.x, s.y, s.x, s.y);\r\n                        ccNetViz_primitive.vertices(v.lengthSoFar, iV, xdiff1, ydiff1, xdiff2, ydiff2, xdiff3, ydiff3, xdiff4, ydiff4);\r\n                        ccNetViz_primitive.vertices(v.normal, iV, 0, 0, 1, d, 0, 1.25 * d, -1, d);\r\n                        ccNetViz_primitive.vertices(v.curve, iV, 1, 1, 0.5, 0, 0, 0, 0.5, 0);\r\n                        ccNetViz_primitive.quad(v.indices, iV, iI);\r\n                    }\r\n                }))\r\n    };\r\n\r\n    let set = (v, e, s, t, iV, iI, dx, dy) => {\r\n        let tx = t.x;\r\n        let ty = t.y;\r\n\r\n        let offsetMul;\r\n        let ctx,cty,citx,city;\r\n\r\n        ccNetViz_geomutils.getCurveShift(t.e,ct);\r\n        ctx = ct.x;\r\n        cty = ct.y;\r\n        citx = ct.cx;\r\n        city = ct.cy;\r\n\r\n        if(t.is_edge){\t//if target is edge, disable node offset for arrow\r\n          //normal of that edge\r\n          offsetMul = 0;\r\n        }else{\r\n          offsetMul = 1;\r\n        }\r\n        v.curveShift && ccNetViz_primitive.vertices(v.curveShift, iV, -cty, ctx, -cty, ctx, -cty, ctx, -cty, ctx);\r\n        v.circleShift && ccNetViz_primitive.vertices(v.circleShift, iV, -city, citx, -city, citx, -city, citx, -city, citx);\r\n\r\n        ccNetViz_primitive.singles(v.offsetMul, iV, offsetMul, offsetMul, offsetMul, offsetMul);\r\n        ccNetViz_primitive.vertices(v.position, iV, tx, ty, tx, ty, tx, ty, tx, ty);\r\n        ccNetViz_primitive.vertices(v.direction, iV, dx, dy, dx, dy, dx, dy, dx, dy);\r\n        ccNetViz_primitive.vertices(v.textureCoord, iV, 0, 0, 1, 0, 1, 1, 0, 1);\r\n        ccNetViz_primitive.quad(v.indices, iV, iI);\r\n    };\r\n\r\n    let arrowFiller = {\r\n      lineArrows: (style => ({\r\n                set: (v, e, iV, iI) => {\r\n                    let s = ccNetViz_geomutils.edgeSource(e);\r\n                    let t = ccNetViz_geomutils.edgeTarget(e);\r\n                    let d = normalize(s, t);\r\n                    set(v, e, s, t, iV, iI, d.x, d.y);\r\n                }})),\r\n       curveArrows: (style => ({\r\n                        set: (v, e, iV, iI) => {\r\n                          let s = ccNetViz_geomutils.edgeSource(e);\r\n                          let t = ccNetViz_geomutils.edgeTarget(e);\r\n                          return set(v, e, s, t, iV, iI, 0.5 * (t.x - s.x), 0.5 * (t.y - s.y));\r\n                        }\r\n                    })),\r\n       circleArrows: (style => ({\r\n                        set: (v, e, iV, iI) => {\r\n                          let t = ccNetViz_geomutils.edgeTarget(e);\r\n                          let s = t;\r\n                          return set(v, e, s, t, iV, iI, t.x < 0.5 ? dx : -dx, t.y < 0.5 ? -dy : dy);\r\n                        }\r\n                    }))\r\n    };\r\n\r\n    this.getCurrentSpatialSearch = (context) => {\r\n      if(spatialSearch === undefined){\r\n        spatialSearch = new ccNetViz_spatialSearch(context, texts, options, [], {}, [], {}, [], {}, [], {}, normalize, nodeStyle, getLabelSize, getLabelHideSize);\r\n      }\r\n      return spatialSearch;\r\n    }\r\n\r\n    this.remove = () => { }\r\n\r\n\r\n    let edgeTypes;\r\n    let edgePoses;\r\n\r\n    let spatialSearch = undefined;\r\n\r\n    let lvl = 0;\r\n    //make sure everything (files and textures) are load, if not, redraw the whole graph after they became\r\n    let set_end = () => {\r\n      let enableLazyRedraw = false;\r\n      let reset = (p) => {\r\n        if(enableLazyRedraw)\r\n          this.set(this.nodes, this.edges);\r\n      };\r\n      files.onLoad(reset)\r\n      textures.onLoad(reset)\r\n      enableLazyRedraw = true;\r\n    };\r\n\r\n    this.set = function(nodes, edges, layout, layout_options) {\r\n        removedNodes = 0;\r\n        removedEdges = 0;\r\n\r\n        this.nodes = nodes = nodes || [];\r\n        this.edges = edges = edges ? [].concat(edges) : [];\r\n\r\n        spatialSearch = undefined;\r\n\r\n        let lines = [], curves = [], circles = [];\r\n\r\n        //tanslate indexes into node objects\r\n        for (let i = 0; i < edges.length; i++) {\r\n          let e = edges[i];\r\n          if(typeof e.source == 'number')\r\n            e.source = nodes[e.source];\r\n\r\n          if(typeof e.target == 'number')\r\n            e.target = nodes[e.target];\r\n        }\r\n\r\n\r\n        let getIndex = (e) => {\r\n            return e.uniqid || -e.index || -e.nidx;\r\n        }\r\n\r\n        let init = () => {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                nodes[i].index = i;\r\n            }\r\n\r\n            for (let i = 0,j=nodes.length + 10; i < edges.length; i++, j++) {\r\n                edges[i].nidx = j;\r\n            }\r\n\r\n            edgeTypes = [];\r\n            edgePoses = new Uint32Array(edges.length);\r\n            const dummysd  = {k:  '_',      kArrow: '_', d: []};\r\n            const circlesd = {k: 'circles', kArrow: 'circleArrows', d: circles};\r\n            const linesd   = {k: 'lines',   kArrow: 'lineArrows',d: lines};\r\n            const curvesd  = {k: 'curves',  kArrow: 'curveArrows',d: curves};\r\n\r\n            if (extensions.OES_standard_derivatives) {\r\n                let map = {};\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    (map[si] || (map[si] = {}))[ti] = true;\r\n                }\r\n\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let target, e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    let t = dummysd;\r\n                    if (si === ti) {\r\n                        e.t = 2;\t//circle\r\n                        target = circles;\r\n                        t = circlesd;\r\n                    }else {\r\n                        let m = map[ti];\r\n                        if(m && m[si]){\r\n                          e.t = 1;\t//curve\r\n                          target = curves;\r\n                          t = curvesd;\r\n                        }else{\r\n                          e.t = 0;\t//line\r\n                          target = lines;\r\n                          t = linesd;\r\n                        }\r\n                    }\r\n                    edgeTypes.push(t);\r\n                    edgePoses[i] = t.d.length;\r\n                    target.push(e);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < edges.length; i++) {\r\n                    let e = edges[i];\r\n\r\n                    const si = getIndex(e.source);\r\n                    const ti = getIndex(e.target);\r\n\r\n                    let t = dummysd;\r\n                    if(si !== ti){\r\n                      t = linesd;\r\n                      e.t = 0;\r\n                      lines.push(e);\r\n                    }\r\n                    edgeTypes.push(t);\r\n                    edgePoses[i] = t.d.length;\r\n                }\r\n            }\r\n        };\r\n\r\n        init();\r\n\r\n        let nodesParts   = partitionByStyle(nodes);\r\n        let circlesParts = partitionByStyle(circles);\r\n        let linesParts   = partitionByStyle(lines);\r\n        let curvesParts  = partitionByStyle(curves);\r\n\r\n        this.getCurrentSpatialSearch = (context) => {\r\n          if(spatialSearch === undefined){\r\n            spatialSearch = new ccNetViz_spatialSearch(context, texts, options, nodes, nodesParts, lines, linesParts, curves, curvesParts, circles, circlesParts, normalize, nodeStyle, getLabelSize, getLabelHideSize);\r\n          }\r\n          return spatialSearch;\r\n        }\r\n\r\n        layout && new ccNetViz_layout[layout](nodes, edges, layout_options).apply() && ccNetViz_layout.normalize(nodes);\r\n\r\n        if(!gl) return;\r\n\r\n        let tryInitPrimitives = () => {\r\n            var isDirty = false;\r\n\r\n            let defaultAdder = (section, addSection) => {\r\n              if(typeof section.style.texture === 'string')\r\n                  section.style.texture = textures.get(gl, section.style.texture, addSection);\r\n                else\r\n                  addSection();\r\n            }\r\n            let labelAdder = (section, addSection) => {\r\n              var slf = (section.style.label || {}).font || {};\r\n              let textEngine = texts.getEngine(slf);\r\n              section.style.texture = textEngine.getTexture(slf, addSection);\r\n            }\r\n\r\n            let is;\r\n            is = nodes.length && !nodes[0].color;\r\n            isDirty = isDirty || scene.nodes.set(gl, options.styles, defaultAdder, is ? nodes : [], is ? nodesParts : {}, nodesFiller);\r\n            is = nodes.length && nodes[0].color;\r\n            isDirty = isDirty || scene.nodesColored.set(gl, options.styles, defaultAdder, is ? nodes : [], is ? nodesParts : {}, nodesFiller);\r\n\r\n            if (nodeStyle.label) {\r\n                texts.clear();\r\n                isDirty = isDirty || scene.labelsOutline.set(gl, options.styles, labelAdder, nodes, nodesParts, labelsFiller);\r\n                isDirty = isDirty || scene.labels.set(gl, options.styles, labelAdder, nodes, nodesParts, labelsFiller);\r\n                if (nodeStyle.label.labelColor){\r\n                isDirty = isDirty || scene.labels_background.set(gl, options.styles, labelAdder, nodes, nodesParts, labelsBackgroundFiller);\r\n                }\r\n                texts.bind();\r\n            }\r\n\r\n            isDirty = isDirty || scene.lines.set(gl, options.styles, defaultAdder, lines, linesParts, edgesFiller.lines);\r\n\r\n            if (extensions.OES_standard_derivatives) {\r\n                isDirty = isDirty || scene.curves.set(gl, options.styles, defaultAdder, curves, curvesParts, edgesFiller.curves);\r\n                isDirty = isDirty || scene.circles.set(gl, options.styles, defaultAdder, circles, circlesParts, edgesFiller.circles);\r\n            }\r\n\r\n            if (edgeStyle.arrow) {\r\n                isDirty = isDirty || scene.lineArrows.set(gl, options.styles, defaultAdder, lines, linesParts, arrowFiller.lineArrows);\r\n\r\n                if (extensions.OES_standard_derivatives) {\r\n                    isDirty = isDirty || scene.curveArrows.set(gl, options.styles, defaultAdder, curves, curvesParts, arrowFiller.curveArrows);\r\n\r\n                    isDirty = isDirty || scene.circleArrows.set(gl, options.styles, defaultAdder, circles, circlesParts, arrowFiller.circleArrows);\r\n                }\r\n            }\r\n\r\n            return isDirty;\r\n        };\r\n\r\n        while(tryInitPrimitives()); //loop until they are not dirty\r\n        set_end();\r\n    };\r\n\r\n\r\n\r\n    this.update = function(element, attribute, data) {\r\n        if(!gl) return;\r\n        scene[element].update(gl, attribute, data, function(style)  {return {\r\n            set: function(v, e, iV)  {return ccNetViz_primitive.colors(v, iV, e, e, e, e);}\r\n        };});\r\n    }\r\n\r\n    this.find = (x,y,dist,nodes,edges,labels) => {\r\n      return this.getCurrentSpatialSearch(context).find(context, x,y,dist, view.size, nodes,edges,labels);\r\n    }\r\n\r\n    this.findArea = (x1,y1,x2,y2,nodes,edges,labels) => {\r\n      return this.getCurrentSpatialSearch(context).findArea(context, x1,y1,x2,y2, view.size, nodes,edges,labels);\r\n    }\r\n\r\n    this.updateNode = (n, i) => {\r\n      this.nodes[i] = n;\r\n\r\n      if(spatialSearch)\r\n        spatialSearch.update(context, 'nodes', i, n);\r\n\r\n      if(!gl) return;\r\n\r\n      (this.nodes[0].color ? scene.nodesColored : scene.nodes).updateEl(gl, n, i, nodesFiller);\r\n      scene.labels && scene.labels.updateEl(gl, n, i, labelsFiller);\r\n      scene.labelsOutline && scene.labelsOutline.updateEl(gl, n, i, labelsFiller);\r\n\r\n    };\r\n\r\n    this.updateEdge = ((e, i) => {\r\n      let t = edgeTypes[i];\r\n      let pos = edgePoses[i];\r\n\r\n      t.d[pos] = this.edges[i] = e;\r\n\r\n      if(spatialSearch)\r\n        spatialSearch.update(context, t.k, pos, e);\r\n\r\n      if(!gl) return;\r\n\r\n      scene[t.k].updateEl(gl, e, pos, edgesFiller[t.k]);\r\n      if (edgeStyle.arrow)\r\n        scene[t.kArrow].updateEl(gl, e, pos, arrowFiller[t.kArrow]);\r\n    });\r\n\r\n    let removedNodes = 0;\r\n    let removedEdges = 0;\r\n\r\n    const freenode = {x:-1,y:-1,title:\"\"};\r\n    this.removeNodeAtPos = ((pos) => {\r\n      if(this.nodes[pos] === freenode){\r\n        return;\r\n      }\r\n\r\n      removedNodes++;\r\n      this.updateNode(freenode, pos);\r\n    });\r\n\r\n    const freeedge = {source:{x:-1,y:-1},target:{x:-1,y:-1}};\r\n    this.removeEdgeAtPos = ((pos) => {\r\n      if(this.edges[pos] === freeedge){\r\n        return;\r\n      }\r\n\r\n      removedEdges++;\r\n\r\n      this.updateEdge(freeedge, pos);\r\n    });\r\n\r\n    this.getVisibleNodes = () => {\r\n      if(removedNodes <= 0)\r\n        return this.nodes;\r\n\r\n      let r = [];\r\n      this.nodes.forEach(n => {\r\n        if(n !== freenode)\r\n          r.push(n);\r\n      });\r\n      return r;\r\n    }\r\n\r\n    this.getVisibleEdges = () => {\r\n      if(removedEdges <= 0)\r\n        return this.edges;\r\n\r\n      let r = [];\r\n      this.edges.forEach((n) => {\r\n        if(n !== freeedge)\r\n          r.push(n);\r\n      });\r\n      return r;\r\n    }\r\n\r\n    this.cntShownNodes = (() => {\r\n      return this.nodes.length - removedNodes;\r\n    });\r\n\r\n    this.cntShownEdges = (() => {\r\n      return this.edges.length - removedEdges;\r\n    });\r\n\r\n    let getEdgeStyleSize = ((c) => {\r\n      return c.width/(120);\r\n/*      let avsize = (c.width + c.height)/2;\r\n      let koef = (Math.min(Math.max((avsize - 150)/150, 0),1)+1)*1.3;\r\n      //koef 1 for 150 size and 1.4 for 300 size\r\n      return c.width/(130*koef);\r\n*/    });\r\n\r\n\r\n    let stylesTransl = {\r\n      'line': 0,\r\n      'dashed'  : 1,\r\n      'chain-dotted': 2,\r\n      'dotted': 3\r\n    }\r\n    let getEdgeType = (t) => {\r\n      if(t !== undefined){\r\n        t = stylesTransl[t];\r\n      }\r\n\r\n      if(t === undefined || typeof t !== 'number'){\r\n        t = 0;\r\n      }\r\n\r\n      return t;\r\n    };\r\n\r\n\r\n    this.nodes = [];\r\n    this.edges = [];\r\n\r\n    let extensions = gl ? ccNetViz_gl.initExtensions(gl, \"OES_standard_derivatives\") : {};\r\n    let scene = this.scene = createScene.call(this);\r\n\r\n    let loadCalled = false;\r\n    if(!gl) { options.onLoad && !loadCalled && (loadCalled = true) && options.onLoad(); return this };\r\n\r\n    let getLabelType = (f) => {\r\n      if(texts.isSDF(f))\r\n        return 1;\r\n      return 0;\r\n    };\r\n\r\n    const fsColorTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform vec4 color;\",\r\n        \"uniform sampler2D texture;\",\r\n        \"varying vec2 tc;\",\r\n        \"void main(void) {\",\r\n        \"   gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"}\"\r\n    ];\r\n\r\n    const fsLabelTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform lowp sampler2D texture;\",\r\n        \"uniform mediump vec4 color;\",\r\n        \"uniform mediump float height_font;\",\r\n        \"uniform float type;\",\r\n        \"uniform float buffer;\",\r\n        \"uniform float boldness;\",\r\n        \"float gamma = 4.0 * 1.4142 * boldness / height_font;\",\r\n        \"varying mediump vec2 tc;\",\r\n        \"void main() {\",\r\n        \"  if(type > 0.5){\",  //SDF\r\n        \"    float tx=texture2D(texture, tc).a;\",\r\n        \"    float a= smoothstep(buffer - gamma, buffer + gamma, tx);\",\r\n        \"    gl_FragColor=vec4(color.rgb, a*color.a);\",\r\n        \"  }else{\", //NORMAL FONT\r\n        \"    gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"  }\",\r\n        \"}\"\r\n    ];\r\n\r\n    const fsVarColorTexture = [\r\n        \"precision mediump float;\",\r\n        \"uniform sampler2D texture;\",\r\n        \"varying vec2 tc;\",\r\n        \"varying vec4 c;\",\r\n        \"void main(void) {\",\r\n        \"   gl_FragColor = c * texture2D(texture, vec2(tc.s, tc.t));\",\r\n        \"}\"\r\n    ];\r\n\r\n    const lineTypes = [\r\n        \"   if(type >= 2.5){\",        //3.0 dotted\r\n        \"      part = fract(part*3.0);\",\r\n        \"      if(part < 0.5) discard;\",\r\n        \"   }else if(type >= 1.5){\",        //2.0 - chain dotted\r\n        \"      if(part < 0.15) discard;\",\r\n        \"      if(part > 0.30 && part < 0.45) discard;\",\r\n        \"   }else if(type >= 0.5){\",        //1.0 - dashed\r\n        \"      if(part < 0.5) discard;\",\r\n        \"   }\"\r\n    ];\r\n    const fsCurve = [\r\n        \"#extension GL_OES_standard_derivatives : enable\",\r\n        \"#ifdef GL_ES\",\r\n        \"precision highp float;\",\r\n        \"#endif\",\r\n        \"uniform float width;\",\r\n        \"uniform vec4 color;\",\r\n        \"uniform float type;\",\r\n        \"uniform float lineStepSize;\",\r\n        \"uniform float lineSize;\",\r\n        \"varying vec2 c;\",\r\n        \"varying vec2 v_lengthSoFar;\",\r\n        \"void main(void) {\",\r\n        \"   float part = abs(fract(length(v_lengthSoFar)*lineStepSize*lineSize));\"\r\n        ].concat(lineTypes).concat([\r\n        \"   vec2 px = dFdx(c);\",\r\n        \"   vec2 py = dFdy(c);\",\r\n        \"   float fx = 2.0 * c.x * px.x - px.y;\",\r\n        \"   float fy = 2.0 * c.y * py.x - py.y;\",\r\n        \"   float sd = (c.x * c.x - c.y) / sqrt(fx * fx + fy * fy);\",\r\n        \"   float alpha = 1.0 - abs(sd) / width;\",\r\n        \"   if (alpha < 0.0) discard;\",\r\n        \"   gl_FragColor = vec4(color.r, color.g, color.b, min(alpha, 1.0));\",\r\n        \"}\"\r\n    ]);\r\n\r\n\r\n    const getShiftFuncs = [\r\n        \"attribute vec2 curveShift;\",\r\n        \"vec4 getShiftCurve(void) {\",\r\n        \"   vec2 shiftN = vec2(curveShift.x, aspect2 * curveShift.y);\",\r\n        \"   float length = length(screen * shiftN);\",\r\n        \"   return vec4(exc * (length == 0.0 ? vec2(0, 0) : shiftN * 0.5 / length), 0, 0);\",\r\n        \"}\",\r\n        \"attribute vec2 circleShift;\",\r\n        \"vec4 getShiftCircle(void) {\",\r\n        \"   return vec4(size*circleShift,0,0);\",\r\n        \"}\"\r\n    ];\r\n\r\n    scene.add(\"lines\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n            \"precision mediump float;\",\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 normal;\",\r\n            \"attribute vec2 lengthSoFar;\",\r\n            \"uniform float exc;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform vec2 screen;\",\r\n            \"uniform float aspect2;\",\r\n            \"uniform float aspect;\",\r\n            \"uniform vec2 width;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 n;\",\r\n            \"varying vec2 v_lengthSoFar;\"\r\n            ].concat(getShiftFuncs).concat([\r\n            \"void main(void) {\",\r\n            \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(width * normal, 0, 0) + transform * vec4(position, 0, 1);\",\r\n\r\n            \"   vec4 p = transform*vec4(lengthSoFar,0,0);\",\r\n            \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n\r\n            \"   n = normal;\",\r\n            \"}\"\r\n        ]), [\r\n            \"precision mediump float;\",\r\n            \"uniform float type;\",\r\n            \"uniform vec4 color;\",\r\n            \"varying vec2 n;\",\r\n            \"varying vec2 v_lengthSoFar;\",\r\n            \"uniform float lineSize;\",\r\n            \"void main(void) {\",\r\n            \"   float part = abs(fract(length(v_lengthSoFar)*lineSize*5.0));\"\r\n\t    ].concat(lineTypes).concat([\r\n            \"   gl_FragColor = vec4(color.r, color.g, color.b, color.a - length(n));\",\r\n            \"}\"\r\n        ]), c => {\r\n            let uniforms = c.shader.uniforms;\r\n            uniforms.exc && gl.uniform1f(uniforms.exc, c.curveExc);\r\n            gl.uniform2f(uniforms.screen, c.width, c.height);\r\n            let size = 2.5 * c.nodeSize;\r\n            uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n            gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n            gl.uniform1f(uniforms.aspect, c.aspect);\r\n            gl.uniform2f(uniforms.width, c.style.width / c.width, c.style.width / c.height);\r\n            gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        })\r\n    );\r\n\r\n    if (extensions.OES_standard_derivatives) {\r\n        scene.add(\"curves\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n                \"precision highp float;\",\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 normal;\",\r\n                \"attribute vec2 curve;\",\r\n                \"attribute vec2 lengthSoFar;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform float exc;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform float aspect;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 v_lengthSoFar;\",\r\n                \"varying vec2 c;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   vec2 n = vec2(normal.x, aspect2 * normal.y);\",\r\n                \"   float length = length(screen * n);\",\r\n                \"   n = length == 0.0 ? vec2(0, 0) : n / length;\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(exc * n, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   c = curve;\",\r\n\r\n                \"   vec4 p = transform*vec4(lengthSoFar,0,0);\",\r\n                \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n\r\n                \"}\"\r\n            ]), fsCurve, c => {\r\n                let uniforms = c.shader.uniforms;\r\n                gl.uniform1f(uniforms.width, c.style.width);\r\n                gl.uniform1f(uniforms.exc, c.curveExc);\r\n                gl.uniform2f(uniforms.screen, c.width, c.height);\r\n                let size = 2.5 * c.nodeSize;\r\n                uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n                gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n                gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n                gl.uniform1f(uniforms.aspect, c.aspect);\r\n                gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n                uniforms.lineStepSize && gl.uniform1f(uniforms.lineStepSize, 5);\r\n                ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n            })\r\n        );\r\n        scene.add(\"circles\", new ccNetViz_primitive(gl, edgeStyle, null, [\r\n                \"precision highp float;\",\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 normal;\",\r\n                \"attribute vec2 curve;\",\r\n                \"attribute vec2 lengthSoFar;\",\r\n                \"uniform float exc;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform float aspect;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 c;\",\r\n                \"varying vec2 v_lengthSoFar;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(size * normal, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   c = curve;\",\r\n\r\n                \"   vec4 p = transform*vec4(size * lengthSoFar,0,0);\",\r\n                \"   v_lengthSoFar = vec2(p.x, p.y/aspect);\",\r\n                \"}\"])\r\n            , fsCurve, c => {\r\n                let uniforms = c.shader.uniforms;\r\n                uniforms.exc && gl.uniform1f(uniforms.exc, c.curveExc);\r\n                gl.uniform1f(uniforms.width, c.style.width);\r\n                gl.uniform1f(uniforms.type, getEdgeType(c.style.type));\r\n                gl.uniform2f(uniforms.screen, c.width, c.height);\r\n                let size = 2.5 * c.nodeSize;\r\n                uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n                gl.uniform1f(uniforms.lineSize, getEdgeStyleSize(c));\r\n                gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n                gl.uniform1f(uniforms.aspect, c.aspect);\r\n                uniforms.lineStepSize && gl.uniform1f(uniforms.lineStepSize, 5/3);\r\n                ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n            })\r\n        );\r\n    }\r\n\r\n    if (edgeStyle.arrow) {\r\n        let shaderparams = {attribute:{offsetMul:1}};\r\n\r\n        let bind = c => {\r\n            let size = getSize(c, c.style, getEdgesCnt(), 0.2);\r\n            if (!size) return true;\r\n\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform1f(uniforms.offset, 0.5 * c.nodeSize);\r\n            gl.uniform2f(uniforms.arrowsize, size, c.style.aspect * size);\r\n            gl.uniform1f(uniforms.exc, c.curveExc);\r\n            uniforms.cexc && gl.uniform1f(uniforms.cexc, 0.5 * view.size * c.curveExc);\r\n            if(uniforms.size){\r\n              size = 2.5 * c.nodeSize;\r\n              uniforms.size && gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            }\r\n            gl.uniform2f(uniforms.screen, c.width, c.height);\r\n            gl.uniform1f(uniforms.aspect2, c.aspect2);\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        };\r\n\r\n        scene.add(\"lineArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                \"attribute vec2 position;\",\r\n                \"attribute vec2 direction;\",\r\n                \"attribute vec2 textureCoord;\",\r\n                \"attribute float offsetMul;\",\r\n                \"uniform float offset;\",\r\n                \"uniform vec2 arrowsize;\",\r\n                \"uniform vec2 size;\",\r\n                \"uniform vec2 screen;\",\r\n                \"uniform float exc;\",\r\n                \"uniform float aspect2;\",\r\n                \"uniform mat4 transform;\",\r\n                \"varying vec2 tc;\",\r\n                ].concat(getShiftFuncs).concat([\r\n                \"void main(void) {\",\r\n                \"   vec2 u = direction / length(screen * direction);\",\r\n                \"   vec2 v = vec2(u.y, -aspect2 * u.x);\",\r\n                \"   v = v / length(screen * v);\",\r\n                \"   gl_Position = getShiftCurve() + getShiftCircle()  + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                \"   tc = textureCoord;\",\r\n                \"}\"\r\n            ]), fsColorTexture, bind, shaderparams)\r\n        );\r\n\r\n        if (extensions.OES_standard_derivatives) {\r\n            scene.add(\"curveArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                    \"attribute vec2 position;\",\r\n                    \"attribute vec2 direction;\",\r\n                    \"attribute vec2 textureCoord;\",\r\n                    \"attribute float offsetMul;\",\r\n                    \"uniform float offset;\",\r\n                    \"uniform vec2 arrowsize;\",\r\n                    \"uniform vec2 size;\",\r\n                    \"uniform float exc;\",\r\n                    \"uniform float cexc;\",\r\n                    \"uniform vec2 screen;\",\r\n                    \"uniform float aspect2;\",\r\n                    \"uniform mat4 transform;\",\r\n                    \"varying vec2 tc;\",\r\n                    ].concat(getShiftFuncs).concat([\r\n                    \"void main(void) {\",\r\n                    \"   vec2 u = normalize(vec2(direction.y, -aspect2 * direction.x));\",\r\n                    \"   u = normalize(direction - cexc * u / length(screen * u));\",\r\n                    \"   u = u / length(screen * u);\",\r\n                    \"   vec2 v = vec2(u.y, -aspect2 * u.x);\",\r\n                    \"   v = v / length(screen * v);\",\r\n                    \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                    \"   tc = textureCoord;\",\r\n                    \"}\"\r\n                ]), fsColorTexture, bind, shaderparams)\r\n            );\r\n            scene.add(\"circleArrows\", new ccNetViz_primitive(gl, edgeStyle, \"arrow\", [\r\n                    \"attribute vec2 position;\",\r\n                    \"attribute vec2 direction;\",\r\n                    \"attribute vec2 textureCoord;\",\r\n                    \"attribute float offsetMul;\",\r\n                    \"uniform float offset;\",\r\n                    \"uniform vec2 arrowsize;\",\r\n                    \"uniform vec2 size;\",\r\n                    \"uniform vec2 screen;\",\r\n                    \"uniform float exc;\",\r\n                    \"uniform float aspect2;\",\r\n                    \"uniform mat4 transform;\",\r\n                    \"varying vec2 tc;\",\r\n                    ].concat(getShiftFuncs).concat([\r\n                    \"void main(void) {\",\r\n                    \"   vec2 u = direction;\",\r\n                    \"   vec2 v = vec2(direction.y, -direction.x);\",\r\n                    \"   gl_Position = getShiftCurve() + getShiftCircle() + vec4((arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u) / screen, 0, 0) + transform * vec4(position, 0, 1);\",\r\n                    \"   tc = textureCoord;\",\r\n                    \"}\"\r\n                ]), fsColorTexture, bind, shaderparams)\r\n            );\r\n        }\r\n    }\r\n\r\n    scene.add(\"nodes\", new ccNetViz_primitive(gl, nodeStyle, null, [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"}\"\r\n        ], fsColorTexture, c => {\r\n            let size = getNodeSize(c);\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, c.style.color);\r\n        })\r\n    );\r\n    scene.add(\"nodesColored\", new ccNetViz_primitive(gl, nodeStyle, null, [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"attribute vec4 color;\",\r\n            \"uniform vec2 size;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"varying vec4 c;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"   c = color;\",\r\n            \"}\"\r\n        ], fsVarColorTexture, c => {\r\n            let size = getNodeSize(c);\r\n            let uniforms = c.shader.uniforms;\r\n            gl.uniform2f(uniforms.size, size / c.width, size / c.height);\r\n        })\r\n    );\r\n    scene.add(\"labels_background\", new ccNetViz_primitive(gl, nodeStyle, \"label\", [\r\n      \"attribute vec2 position;\",\r\n      \"attribute vec2 relative;\",\r\n      \"uniform vec2 scale;\",\r\n      \"uniform mat4 transform;\", \r\n      \"uniform float fontScale;\",\r\n      \"uniform float offset;\",\r\n      \"void main(void) {\",\r\n      \"   gl_Position = vec4(scale * (relative*fontScale + vec2(0, (2.0 * step(position.y, 0.5) - 1.0) * offset)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n      \r\n      \"}\"\r\n    ], [\r\n      \"precision mediump float;\",\r\n      \"uniform vec4 labelColor;\",\r\n      \"void main() {\",\r\n      \"   gl_FragColor = vec4(labelColor.r, labelColor.g, labelColor.b,1);\",\r\n      \"}\"],  c => {\r\n        let uniforms = c.shader.uniforms;\r\n        \r\n        let l = c.style.label;\r\n        let f = l.font;\r\n        let textEngine = texts.getEngine(f);\r\n        textEngine.setFont(f);\r\n        let fontScale = 1.0;\r\n        let sdfSize = textEngine.fontSize;\r\n        let wantedSize = ( textEngine.isSDF ? getLabelSize(context, l || {}) : sdfSize );\r\n        if(wantedSize === 0){ fontScale = 0; };\r\n        if(wantedSize && sdfSize){\r\n          fontScale *= wantedSize / sdfSize;\r\n        }\r\n        gl.uniform1f(uniforms.offset, 0.5 * c.nodeSize);\r\n        gl.uniform2f(uniforms.scale, 1 / c.width, 1 / c.height);\r\n        gl.uniform1f(uniforms.fontScale, fontScale);\r\n        let labelColor = new ccNetViz_color(l.labelColor || backgroundColor);\r\n        ccNetViz_gl.uniformColor(gl, uniforms.labelColor, labelColor);\r\n    } ))\r\n    let vsLabelsShader = [\r\n            \"attribute vec2 position;\",\r\n            \"attribute vec2 relative;\",\r\n            \"attribute vec2 textureCoord;\",\r\n            \"uniform float offset;\",\r\n            \"uniform vec2 scale;\",\r\n            \"uniform float fontScale;\",\r\n            \"uniform mat4 transform;\",\r\n            \"varying vec2 tc;\",\r\n            \"void main(void) {\",\r\n            \"   gl_Position = vec4(scale * (relative*fontScale + vec2(0, (2.0 * step(position.y, 0.5) - 1.0) * offset)), 0, 0) + transform * vec4(position, 0, 1);\",\r\n            \"   tc = textureCoord;\",\r\n            \"}\"\r\n        ];\r\n    let bindLabels = (is_outline) => {\r\n      return c => {\r\n            if (!getNodeSize(c)) return true;\r\n\r\n            let l = c.style.label;\r\n            let f = l.font;\r\n            let uniforms = c.shader.uniforms;\r\n\r\n            gl.uniform1f(uniforms.type, getLabelType(f));\r\n//            gl.uniform1f(uniforms.type, 0);\r\n\r\n            let textEngine = texts.getEngine(f);\r\n            textEngine.setFont(f);\r\n\r\n            let fontScale = 1.0;\r\n            let sdfSize = textEngine.fontSize;\r\n            let wantedSize = ( textEngine.isSDF ? getLabelSize(context, l || {}) : sdfSize );\r\n            if(wantedSize === 0){ fontScale = 0; };\r\n\r\n            let opts = {};\r\n            if(wantedSize && sdfSize){\r\n              fontScale *= wantedSize / sdfSize;\r\n            }\r\n\r\n            if(is_outline && !textEngine.isSDF) //discardAll\r\n              fontScale = 0;\r\n\r\n            gl.uniform1f(uniforms.buffer, is_outline ? 0.25 : 192.0 / 256.0);\r\n            gl.uniform1f(uniforms.boldness, (f ? f.boldness : undefined) || 1.);\r\n            gl.uniform1f(uniforms.fontScale, fontScale);\r\n            gl.uniform1f(uniforms.height_font, sdfSize);\r\n            gl.uniform1f(uniforms.offset, 0.5 * c.nodeSize);\r\n            gl.uniform2f(uniforms.scale, 1 / c.width, 1 / c.height);\r\n            let color;\r\n            if(is_outline && f)\r\n                color = new ccNetViz_color(f.outlineColor || l.labelColor || backgroundColor);\r\n            else\r\n            // colour option in label\r\n            color = c.style.color;\r\n            ccNetViz_gl.uniformColor(gl, uniforms.color, color);\r\n        };\r\n    };\r\n    nodeStyle.label && scene.add(\"labelsOutline\", new ccNetViz_primitive(gl, nodeStyle, \"label\", vsLabelsShader, fsLabelTexture, bindLabels(true)) );\r\n    nodeStyle.label && scene.add(\"labels\", new ccNetViz_primitive(gl, nodeStyle, \"label\", vsLabelsShader, fsLabelTexture, bindLabels(false)) );\r\n\r\n    if (options.onLoad) {\r\n        let styles = options.styles;\r\n        for (let p in styles) {\r\n            let s = styles[p];\r\n\r\n            s.texture && textures.get(gl, s.texture, onLoad);\r\n            s.arrow && s.arrow.texture && textures.get(gl, s.arrow.texture);\r\n        }\r\n    }\r\n\r\n    function createScene() {\r\n        return {\r\n            elements: [],\r\n            add: (name, e) => {\r\n                scene[name] = e;\r\n                scene.elements.push(e);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import ccNetViz_shader from './shader' ;\r\nimport ccNetViz_utils  from './utils' ;\r\nimport {getPartitionStyle} from './primitiveTools';\r\n\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\n\r\n\r\nexport default class primitive{\r\n  constructor(gl, baseStyle, styleProperty, vs, fs, bind, shaderParams) {\r\n    let shader = new ccNetViz_shader(gl, vs.join('\\n'), fs.join('\\n'), shaderParams);\r\n    let buffers = [];\r\n    let sections = [];   \r\n    \r\n    let sectionsByStyle = {};\r\n\r\n    let e = {};\r\n    let iV, iI, iS = 0, iB = 0;\r\n\r\n    let partLength = (filler, part) => {\r\n        if(filler.size){\r\n          let n = 0;\r\n          part.forEach( p => {\r\n            n+=filler.size(e,p);\r\n          });\r\n          return n;\r\n        }else{\r\n          return part.length;\r\n        }\r\n        return;\r\n    };\r\n    \r\n    let init = (filler, n) => {\r\n        iV = iI = 0;\r\n        let max = Math.floor(primitive.maxBufferSize / filler.numVertices);\r\n        let nV = Math.min(max, n - (iB - iS)*max);\r\n        let nI = nV * filler.numIndices;\r\n\r\n        if (!e.indices || e.indices.length !== nI) {\r\n            e.indices = new Uint16Array(nI);\r\n            nV *= filler.numVertices;\r\n            for (let a in shader.attributes) e[a] = new Float32Array(shader.attributes[a].size * nV);\r\n        }\r\n    };\r\n\r\n    let zerofiller =  {\r\n      set: (v, iV, iI, numVertices, numIndices) => {\r\n        let indicesarr = [v.indices, iV, iI];\r\n        for(let i = 0; i < numIndices; i++)\r\n          indicesarr.push(0);\r\n\r\n        let verticesarr = [undefined, iV, iI];\r\n        for(let i = 0; i < numVertices; i++)\r\n          verticesarr.push(0);\r\n\r\n        for(var k in v){\r\n          if(k === 'indices'){\r\n            primitive.indices.apply(this, indicesarr);\r\n          }else{\r\n            verticesarr[0] = v[k];\r\n            primitive.vertices.apply(this, verticesarr);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.set = (gl, styles, adder, data, parts, get) => {\r\n        var isDirty = false;\r\n      \r\n        iS = 0;\r\n        iB = 0;\r\n\r\n        this._iIs = new Uint32Array(data.length);\r\n        this._iVs = new Uint32Array(data.length);\r\n        this._iBs = new Uint8Array(data.length);\r\n        this._sizes = new Uint8Array(data.length);\r\n\r\n\r\n        let store = (section) => {\r\n            let b = buffers[iB];\r\n            if (!b) {\r\n                buffers[iB] = b = {};\r\n                for (let a in e) b[a] = gl.createBuffer();\r\n            }\r\n            for (let a in shader.attributes) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, b[a]);\r\n                gl.bufferData(gl.ARRAY_BUFFER, e[a], gl.STATIC_DRAW);\r\n            }\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b.indices);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, e.indices, gl.STATIC_DRAW);\r\n            b.numIndices = iI;\r\n            b.numVertices = iV;\r\n            section.buffers.push(b);\r\n            iB++;\r\n        };\r\n\r\n        sections = [];\r\n        for (let p in parts) {\r\n            iS = iB;\r\n\r\n            let section = {\r\n                style: getPartitionStyle(styles[p], baseStyle, styleProperty),\r\n                buffers: [],\r\n                styleName: p\r\n            };\r\n\r\n            let filler = get(section.style);\r\n            filler.numVertices = filler.numVertices || 4;\r\n            filler.numIndices = filler.numIndices || 6;\r\n\r\n            let part = parts[p];\r\n\r\n            let pL = partLength(filler, part);\r\n            init(filler, pL);\r\n            let max = primitive.maxBufferSize;\r\n            for (let i = 0; i < part.length; i++) {\r\n                let s = filler.size ? filler.size(e, part[i]) : 1;\r\n                let niV = iV + s * filler.numVertices;\r\n                let niI = iI + s * filler.numIndices;\r\n\r\n                if (niV >= max) {\r\n                    store(section);\r\n                    init(filler, pL);\r\n                    niV = iV;\r\n                    niI = iI;\r\n                }\r\n\r\n\r\n                if(filler.set(e, part[i], iV, iI))\r\n                  isDirty = true;\r\n\r\n\r\n                let idx = part.idx[i];\r\n                this._iIs[idx] = iI;\r\n                this._iVs[idx] = iV;\r\n                this._iBs[idx] = iB;\r\n                this._sizes[idx] = s;\r\n\r\n                iI = niI;\r\n                iV = niV;\r\n            }\r\n            store(section);\r\n\r\n            function add() {\r\n                sections.push(this);\r\n                sectionsByStyle[this.styleName] = this;\r\n            }\r\n            let addSection = add.bind(section);\r\n\r\n            adder ? adder(section, addSection) : addSection();\r\n        }\r\n        \r\n        return isDirty;\r\n    }\r\n\r\n    let fb;\r\n    this.update = function(gl, attribute, data, get)  {\r\n        let i = 0, size = shader.attributes[attribute].size;\r\n        sections.forEach(function(section)  {\r\n            let filler = get(section.style);\r\n            filler.numVertices = filler.numVertices || 4;\r\n\r\n            section.buffers.forEach(function(e)  {\r\n                (!fb || fb.length !== size * e.numVertices) && (fb = new Float32Array(size * e.numVertices));\r\n                for (let iV = 0; iV < e.numVertices; iV += (filler.size ? filler.size(e, data[i]) : 1) * filler.numVertices) filler.set(fb, data[i++], iV);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, e[attribute]);\r\n                gl.bufferData(gl.ARRAY_BUFFER, fb, gl.DYNAMIC_DRAW);\r\n            });\r\n        });\r\n   }\r\n\r\n   this.updateEl = (gl, el, pos, get) => {\r\n        let storeToPos = (b, iV, iI) => {\r\n            for (let a in shader.attributes) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, b[a]);\r\n                gl.bufferSubData(gl.ARRAY_BUFFER, shader.attributes[a].size*iV*e[a].BYTES_PER_ELEMENT, e[a]);\r\n            }\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b.indices);\r\n            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, iI*e.indices.BYTES_PER_ELEMENT, e.indices);\r\n        };\r\n\r\n        let section = sectionsByStyle[el.style];\r\n        \r\n        let filler = get(section.style);\r\n        filler.numVertices = filler.numVertices || 4;\r\n        filler.numIndices = filler.numIndices || 6;\r\n             \r\n        iB=iS=0;\r\n\r\n        let buffer = section.buffers[this._iBs[pos]];\r\n        let s = filler.size ? filler.size(buffer, el) : 1;\r\n        let olds = this._sizes[pos];\r\n        if(s > olds){\r\n          console.error('Cannot set primitive to new value which has greater size ('+s+\" > \"+olds+\") - no enough empty space to fill in GL buffer\");\r\n          return;\r\n        }\r\n\r\n        init(filler, olds);\r\n        filler.set(e, el, 0, 0);\r\n\r\n        for(;s < olds; s++){\r\n          //zero fill empty spaces\r\n          zerofiller.set(e, s*filler.numVertices, s*filler.numIndices, filler.numVertices, filler.numIndices);\r\n        }\r\n\r\n        let iV = this._iVs[pos];\r\n        let iI = this._iIs[pos];\r\n        storeToPos(buffer, iV, iI);\r\n    };\r\n\r\n    this.draw = (context) => {\r\n        context.shader = shader;\r\n        shader.bind();\r\n\r\n        gl.uniformMatrix4fv(shader.uniforms.transform, false, context.transform);\r\n\r\n        sections.forEach(section => {\r\n            if (section.style.texture) {\r\n                section.style.texture.update && section.style.texture.update();\r\n                gl.activeTexture(gl.TEXTURE0);\r\n                gl.bindTexture(gl.TEXTURE_2D, section.style.texture);\r\n                gl.uniform1i(shader.uniforms.texture, 0);\r\n            }\r\n\r\n            context.style = section.style;\r\n            if (bind(context)) return;\r\n\r\n            section.buffers.forEach(e => {\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, e.indices);\r\n\r\n                for (var a in shader.attributes) {\r\n                    var attribute = shader.attributes[a];\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, e[a]);\r\n                    gl.vertexAttribPointer(attribute.index, attribute.size, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                gl.drawElements(gl.TRIANGLES, e.numIndices, gl.UNSIGNED_SHORT, 0);\r\n            });\r\n        });\r\n\r\n        shader.unbind();\r\n    }\r\n  }\r\n  \r\n  static vertices(buffer, iV) {\r\n      for (let i = 2, j = 2 * iV, n = arguments.length; i < n; i++, j++) buffer[j] = arguments[i];\r\n  }\r\n  \r\n  static singles(buffer, iV) {\r\n    for (let i = 2, j = 1 * iV, n = arguments.length; i < n; i++, j++) buffer[j] = arguments[i];\r\n  }\r\n  \r\n  static colors(buffer, iV) {\r\n    for (let i = 2, j = 4 * iV, n = arguments.length; i < n; i++) {\r\n        let c = arguments[i];\r\n        buffer[j++] = c.r;\r\n        buffer[j++] = c.g;\r\n        buffer[j++] = c.b;\r\n        buffer[j++] = c.a;\r\n    }\r\n  }\r\n  \r\n  static indices(buffer, iV, iI){\r\n      for (let i = 3, j = iI, n = arguments.length; i < n; i++, j++) buffer[j] = iV + arguments[i];\r\n  }\r\n\r\n  static quad(buffer, iV, iI) {\r\n      primitive.indices(buffer, iV, iI, 0, 1, 2, 2, 3, 0);\r\n  }\r\n\r\n  static get maxBufferSize(){\r\n    return 65536;\r\n  } \r\n}","import ccNetViz_gl from './gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nvar defaultAttr = {color: 4};\r\n\r\nexport default class Shader {\r\n  constructor(gl, vs, fs, shaderParams) {\r\n    this._gl = gl;\r\n    this._vs = vs;\r\n    this._fs = fs;\r\n    \r\n    let program = this._program = gl.createProgram();\r\n    \r\n    gl.attachShader(program, ccNetViz_gl.createShader(gl, gl.VERTEX_SHADER, vs));\r\n    gl.attachShader(program, ccNetViz_gl.createShader(gl, gl.FRAGMENT_SHADER, fs));\r\n    gl.linkProgram(program);\r\n    \r\n    this.uniforms = {};\r\n    let n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n    for (let i = 0; i < n; i++) {\r\n        let name = gl.getActiveUniform(program, i).name;\r\n        this.uniforms[name] = gl.getUniformLocation(program, name);\r\n    }\r\n    \r\n    let attrParams = (shaderParams || {}).attribute || {};\r\n\r\n    this.attributes = {};\r\n    n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < n; i++) {\r\n        let name = gl.getActiveAttrib(program, i).name;\r\n        this.attributes[name] = { index: i, size: attrParams[name] || Shader.attribute[name] || 2 };\r\n    }\r\n    \r\n  }\r\n  \r\n  static get attribute(){\r\n    return defaultAttr;\r\n  }\r\n  \r\n  bind () {\r\n    this._gl.useProgram(this._program);\r\n\r\n    let n = this._gl.getProgramParameter(this._program, this._gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < n; i++) this._gl.enableVertexAttribArray(i);\r\n  }\r\n\r\n  unbind () {\r\n      let n = this._gl.getProgramParameter(this._program, this._gl.ACTIVE_ATTRIBUTES);\r\n      for (let i = 0; i < n; i++) this._gl.disableVertexAttribArray(i);\r\n  }\r\n  \r\n};","import ccNetViz_quadtree from '../quadTree' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default function(nodes, edges, options = {}) {\r\n    const edgeDistance = 15,\r\n          edgeStrength = 1,\r\n          friction = 0.9,\r\n          charge = -30,\r\n          gravity = 0.4,\r\n          theta2 = .64,\r\n          size = [1,1],\r\n          chargeDistance2 = Infinity;\r\n\r\n    let   alpha,\r\n          distances = [],\r\n          strengths = [],\r\n          charges = [];\r\n\r\n\r\n    function accumulate(quad, alpha, charges) {\r\n        let cx = 0, cy = 0;\r\n        quad.charge = 0;\r\n        if (!quad.leaf) {\r\n            let nodes = quad.nodes;\r\n            let c, n = nodes.length;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                c = nodes[i];\r\n                if (c == null) continue;\r\n                accumulate(c, alpha, charges);\r\n                quad.charge += c.charge;\r\n                cx += c.charge * c.cx;\r\n                cy += c.charge * c.cy;\r\n            }\r\n        }\r\n        if (quad.point) {\r\n            if (!quad.leaf) {\r\n                quad.point.x += Math.random() - 0.5;\r\n                quad.point.y += Math.random() - 0.5;\r\n            }\r\n            let k = alpha * charges[quad.point.index];\r\n            quad.charge += quad.pointCharge = k;\r\n            cx += k * quad.point.x;\r\n            cy += k * quad.point.y;\r\n        }\r\n        quad.cx = cx / quad.charge;\r\n        quad.cy = cy / quad.charge;\r\n    }\r\n\r\n    function repulse(node) {\r\n        return function(quad, x1, _, x2) {\r\n            if (quad.point !== node) {\r\n                let dx = quad.cx - node.x;\r\n                let dy = quad.cy - node.y;\r\n                let dw = x2 - x1;\r\n                let dn = dx * dx + dy * dy;\r\n\r\n                if (dw * dw / theta2 < dn) {\r\n                    if (dn < chargeDistance2) {\r\n                        let k = quad.charge / dn;\r\n                        node.px -= dx * k;\r\n                        node.py -= dy * k;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if (quad.point && dn && dn < chargeDistance2) {\r\n                    let k = quad.pointCharge / dn;\r\n                    node.px -= dx * k;\r\n                    node.py -= dy * k;\r\n                }\r\n            }\r\n            return !quad.charge;\r\n        };\r\n    }\r\n\r\n    function step() {\r\n        if ((alpha *= .99) < .05) {\r\n            alpha = 0;\r\n            return true;\r\n        }\r\n\r\n        let q, o, s, t, l, k, x, y;\r\n        let n = nodes.length;\r\n        let m = edges.length;\r\n\r\n        for (let i = 0; i < m; i++) {\r\n            o = edges[i];\r\n            s = o.source;\r\n            t = o.target;\r\n            x = t.x - s.x;\r\n            y = t.y - s.y;\r\n            if (l = (x * x + y * y)) {\r\n                l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\r\n                x *= l;\r\n                y *= l;\r\n                t.x -= x * (k = s.weight / (t.weight + s.weight));\r\n                t.y -= y * k;\r\n                s.x += x * (k = 1 - k);\r\n                s.y += y * k;\r\n            }\r\n        }\r\n\r\n        if (k = alpha * gravity) {\r\n            x = size[0] / 2;\r\n            y = size[1] / 2;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                o = nodes[i];\r\n                o.x += (x - o.x) * k;\r\n                o.y += (y - o.y) * k;\r\n            }\r\n        }\r\n\r\n        if (charge) {\r\n            accumulate(q = ccNetViz_quadtree(nodes), alpha, charges);\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                let o = nodes[i];\r\n                !o.fixed && q.visit(repulse(o));\r\n            }\r\n        }\r\n\r\n        const rnd = (min,max) => Math.random() * (max-min) + min;\r\n        for (let i = 0; i < n; i++) {\r\n            o = nodes[i];\r\n            if (o.fixed || o.fixed2) {\r\n                o.x = o.px;\r\n                o.y = o.py;\r\n            }\r\n            else {\r\n                o.x -= (o.px - (o.px = o.x)) * friction;\r\n                o.y -= (o.py - (o.py = o.y)) * friction;\r\n\r\n                if(options && options.minX !== undefined){\r\n                    if(o.x < options.minX || o.x > options.maxX){\r\n                        o.x = rnd(options.minX, options.maxX);\r\n                    }\r\n                    if(o.y < options.minY || o.y > options.maxY){\r\n                        o.y = rnd(options.minY, options.maxY);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.apply = function() {\r\n        let n = nodes.length;\r\n        let d = Math.sqrt(n);\r\n        let s = 0.3 / d;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let o = nodes[i];\r\n            o.weight = 0;\r\n            o.x = o.x !== undefined ? o.x : s + (i % d) / d;\r\n            o.y = o.y !== undefined ? o.y : s + Math.floor(i / d) / d;\r\n            o.px = o.x;\r\n            o.py = o.y;\r\n            charges[i] = charge;\r\n        }\r\n\r\n        for (let i = 0; i < edges.length; i++) {\r\n            let o = edges[i];\r\n            o.source.weight++;\r\n            o.target.weight++;\r\n            distances[i] = edgeDistance;\r\n            strengths[i] = edgeStrength;\r\n        }\r\n\r\n        alpha = 0.1;\r\n        while (!step());\r\n\r\n        return true;\r\n    };\r\n};\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default function(points) {\r\n    let d, xs, ys, i, n, x1_, y1_, x2_, y2_;\r\n\r\n    x2_ = y2_ = -(x1_ = y1_ = Infinity);\r\n    xs = [], ys = [];\r\n    n = points.length;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n        d = points[i];\r\n        if (d.x < x1_) x1_ = d.x;\r\n        if (d.y < y1_) y1_ = d.y;\r\n        if (d.x > x2_) x2_ = d.x;\r\n        if (d.y > y2_) y2_ = d.y;\r\n        xs.push(d.x);\r\n        ys.push(d.y);\r\n    }\r\n\r\n    let dx = x2_ - x1_;\r\n    let dy = y2_ - y1_;\r\n    dx > dy ? y2_ = y1_ + dx : x2_ = x1_ + dy;\r\n\r\n    function create() {\r\n        return {\r\n            leaf: true,\r\n            nodes: [],\r\n            point: null,\r\n            x: null,\r\n            y: null\r\n        };\r\n    }\r\n\r\n    function visit(f, node, x1, y1, x2, y2) {\r\n        if (!f(node, x1, y1, x2, y2)) {\r\n            let sx = (x1 + x2) * 0.5;\r\n            let sy = (y1 + y2) * 0.5;\r\n            let children = node.nodes;\r\n\r\n            if (children[0]) visit(f, children[0], x1, y1, sx, sy);\r\n            if (children[1]) visit(f, children[1], sx, y1, x2, sy);\r\n            if (children[2]) visit(f, children[2], x1, sy, sx, y2);\r\n            if (children[3]) visit(f, children[3], sx, sy, x2, y2);\r\n        }\r\n    }\r\n\r\n    function insert(n, d, x, y, x1, y1, x2, y2) {\r\n        if (n.leaf) {\r\n            let nx = n.x;\r\n            let ny = n.y;\r\n\r\n            if (nx !== null) {\r\n                if (nx === x && ny === y) {\r\n                    insertChild(n, d, x, y, x1, y1, x2, y2);\r\n                }\r\n                else {\r\n                    let nPoint = n.point;\r\n                    n.x = n.y = n.point = null;\r\n                    insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\r\n                    insertChild(n, d, x, y, x1, y1, x2, y2);\r\n                }\r\n            } else {\r\n                n.x = x, n.y = y, n.point = d;\r\n            }\r\n        } else {\r\n            insertChild(n, d, x, y, x1, y1, x2, y2);\r\n        }\r\n    }\r\n\r\n    function insertChild(n, d, x, y, x1, y1, x2, y2) {\r\n        let xm = (x1 + x2) * 0.5;\r\n        let ym = (y1 + y2) * 0.5;\r\n        let right = x >= xm;\r\n        let below = y >= ym;\r\n        let i = below << 1 | right;\r\n\r\n        n.leaf = false;\r\n        n = n.nodes[i] || (n.nodes[i] = create());\r\n\r\n        right ? x1 = xm : x2 = xm;\r\n        below ? y1 = ym : y2 = ym;\r\n        insert(n, d, x, y, x1, y1, x2, y2);\r\n    }\r\n\r\n    function findNode(root, x, y, x0, y0, x3, y3) {\r\n        let minDistance2 = Infinity;\r\n        let closestPoint;\r\n\r\n        (function find(node, x1, y1, x2, y2) {\r\n            if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\r\n\r\n            if (point = node.point) {\r\n                let point;\r\n                let dx = x - node.x;\r\n                let dy = y - node.y;\r\n                let distance2 = dx * dx + dy * dy;\r\n\r\n                if (distance2 < minDistance2) {\r\n                    let distance = Math.sqrt(minDistance2 = distance2);\r\n                    x0 = x - distance, y0 = y - distance;\r\n                    x3 = x + distance, y3 = y + distance;\r\n                    closestPoint = point;\r\n                }\r\n            }\r\n\r\n            let children = node.nodes;\r\n            let xm = (x1 + x2) * .5;\r\n            let ym = (y1 + y2) * .5;\r\n            let right = x >= xm;\r\n            let below = y >= ym;\r\n\r\n            for (let i = below << 1 | right, j = i + 4; i < j; ++i) {\r\n                if (node = children[i & 3]) switch (i & 3) {\r\n                    case 0: find(node, x1, y1, xm, ym); break;\r\n                    case 1: find(node, xm, y1, x2, ym); break;\r\n                    case 2: find(node, x1, ym, xm, y2); break;\r\n                    case 3: find(node, xm, ym, x2, y2); break;\r\n                }\r\n            }\r\n        })(root, x0, y0, x3, y3);\r\n\r\n        return closestPoint;\r\n    }\r\n\r\n    let root = create();\r\n    root.visit = f => visit(f, root, x1_, y1_, x2_, y2_);\r\n    root.find = (x, y) => findNode(root, x, y, x1_, y1_, x2_, y2_);\r\n\r\n    for (i = 0; i < n; i++) insert(root, points[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\r\n    --i;\r\n\r\n    xs = ys = points = d = null;\r\n\r\n    return root;\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: David Tichy\r\n */\r\n\r\nexport default class {\r\n  constructor(nodes){\r\n    this._nodes = nodes;\r\n  }\r\n  \r\n  apply () {\r\n    for (let i = 0, n = this._nodes.length; i < n; i++) {\r\n      let o = this._nodes[i];\r\n      o.x = Math.random();\r\n      o.y = Math.random();\r\n    }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {degrees} from './utils';\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  // let user define at least: starting angle and radius and\r\n  // clock/cclock direction\r\n  // size of vertices\r\n  // more: a ratio of compactness for the more/less connected nodes\r\n  // a spiral ratio with a rotation ratio for having more than 2pi\r\n  // distribution of nodes when spiriling\r\n  // use some other ordering criterion than degree? Strength?\r\n  // defined by user and found as attribute of each node?\r\n  // random ordering, minimal crossing of edges?\r\n  constructor(nodes, edges, layout_options = {}) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._angle_step = 2*Math.PI/nodes.length;\r\n    if (layout_options.starting_angle == null)\r\n\tthis._starting_angle = 0;\r\n    else\r\n\tthis._starting_angle = layout_options.starting_angle;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          this._nodes[nd.nodes[i].index].x = 0.05+(1+Math.cos(this._starting_angle+i*this._angle_step))*.45;\r\n          this._nodes[nd.nodes[i].index].y = 0.05+(1+Math.sin(this._starting_angle+i*this._angle_step))*.45;\r\n          this._nodes[nd.nodes[i].index].weight = nd.degrees[i];\r\n      }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {getDepth, getRanges} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  drawTreeCentered(root, visited_leafs_parent=0, layer=1){\r\n      root.centered = true;\r\n      root.depth_visited = false; // so that getDepth does not raise error if another tree layout is called subsequently\r\n      // branch order is for now stable but unpredictable, see layouts.cri\r\n      let visited_leafs = 0;\r\n      for (let i=0; i < root.children.length; i++){\r\n          let child = root.children[i];\r\n          if (child.centered != true){\r\n              visited_leafs += this.drawTreeCentered(child, visited_leafs+visited_leafs_parent, layer+1);\r\n          }\r\n      }\r\n      if (root.children == 0){\r\n          visited_leafs++;\r\n      }\r\n      // moving to parent, position node\r\n      root.y = this.stepy*(visited_leafs_parent+(visited_leafs-1)/2) + this.alphay;\r\n      root.x = (layer-1)*this.stepx + this.alphax;\r\n      return visited_leafs;\r\n  }\r\n\r\n  apply () {\r\n      // only one root node supported for now\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for non-trees (cyclical graphs) should be\r\n      // implemented separately for now\r\n      let nodes = this._nodes;\r\n      // make hierarchy, annotate parent(s) and children in the nodes\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.centered = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the root\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].parents.length == 0){\r\n              var root = nodes[i];\r\n              break;\r\n          }\r\n      }\r\n      const depth = getDepth(root);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      let r = getRanges(depth);\r\n      this.alphax = r.start;\r\n      this.stepx = r.step;\r\n      // posx = alphax + stepx*(depth-1)\r\n\r\n      // find the number of leafs to distribute nodes vertically\r\n      let leafs = 0;\r\n      nodes.forEach(function(node){\r\n          if (node.children.length == 0){\r\n              leafs++;\r\n          }\r\n      });\r\n      r = getRanges(leafs);\r\n      // each leaf y = [0+alpha,1-alpha]\r\n      this.alphay = r.start;\r\n      this.stepy = r.step;\r\n      // posy = alphay + stepy*(leafn-1)\r\n\r\n      this.drawTreeCentered(root);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {getDepth, getRanges} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  drawTreeTop(root, visited_leafs_parent=0, layer=1){\r\n    // each node is in vertically on the top of the stack of its leafs\r\n    root.visited = true;\r\n    root.depth_visited = false; // so that getDepth does not raise error if another tree layout is called subsequently\r\n    root.x = this.alphax+this.stepx*(layer-1);\r\n    root.y = 1-(this.alphay+this.stepy*(visited_leafs_parent));\r\n    // visit children until leafs\r\n    let visited_leafs = 0;\r\n    for (let i=0; i < root.children.length; i++){\r\n       let child = root.children[i];\r\n       if (child.centered != true){\r\n         visited_leafs += this.drawTreeTop(child, visited_leafs+visited_leafs_parent, layer+1);\r\n       }\r\n    }\r\n    if(root.children.length == 0){\r\n        visited_leafs++;\r\n    }\r\n    return visited_leafs;\r\n}\r\n  apply () {\r\n      let nodes = this._nodes;\r\n      // make hierarchy, annotate parent(s) and children in the nodes\r\n      // this layout can be run on any graph actually\r\n      // for which the children might be selected e.g. for their degree\r\n      // draw can be decided on other measures, such as closeness centrality or clustering\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.centered = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the root\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].parents.length == 0){\r\n              var root = nodes[i];\r\n              break;\r\n          }\r\n      }\r\n      const depth = getDepth(root);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      let r = getRanges(depth);\r\n      this.alphax = r.start;\r\n      this.stepx = r.step;\r\n      // posx = alphax + stepx*(depth-1)\r\n\r\n      // find the number of leafs to distribute nodes vertically\r\n      let leafs = 0;\r\n      nodes.forEach(function(node){\r\n          if (node.children.length == 0){\r\n              leafs++;\r\n          }\r\n      });\r\n      // each leaf y = [0+alpha,1-alpha]\r\n      r = getRanges(leafs);\r\n      this.alphay =  r.start;\r\n      this.stepy = r.step;\r\n      // posy = alphay + stepy*(leafn-1)\r\n\r\n      // give nodes their positions\r\n      // plot each branch in depth first,\r\n      // increment y position for each leaf\r\n      // backtracking to go from leaf to parents\r\n      // and decide if parent is visited (always in tree layout)\r\n\r\n      this.drawTreeTop(root);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nexport default class {\r\n  // this layout should handle any digraph\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this.alphay = 0.05; // y margin\r\n    this.alphax = 0.05; // x margin\r\n  }\r\n\r\n  makeLayers(nodes, layer){\r\n      if (nodes.length > 1){\r\n          const stepy = (1 - 2*this.alphay)/(nodes.length-1);\r\n          for (let i=0; i<nodes.length; ++i){\r\n              nodes[i].visited = true;\r\n              nodes[i].layer = layer; // makes x afterwards\r\n              nodes[i].y = this.alphay + i*stepy;\r\n          }\r\n      }\r\n      else {\r\n          nodes[0].visited = true;\r\n          nodes[0].layer = layer; // makes x afterwards\r\n          nodes[0].y = 0.5;\r\n      }\r\n      let next_layer = [];\r\n      for (let i=0; i<nodes.length; i++){\r\n          let neighbors = nodes[i].parents.concat(nodes[i].children);\r\n          for (let j=0; j < neighbors.length; j++){\r\n              if (neighbors[j].visited == false && !next_layer.includes(neighbors[j])){\r\n                  next_layer.push(neighbors[j]);\r\n              }\r\n          }\r\n      }\r\n      if (next_layer.length == 0){\r\n          return layer;\r\n      }\r\n      else {\r\n          return this.makeLayers(next_layer, layer+1);\r\n      }\r\n  }\r\n\r\n  apply () {\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for trees (acyclic graphs) are\r\n      // implemented separately for now\r\n      let nodes = this._nodes;\r\n      nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.visited = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n      // find the roots:\r\n      // nodes defined by the user as roots OR\r\n      // nodes with in-degree == 0 OR\r\n      // nodes with greatest in-degree (or degree if undirected graph)\r\n      let roots = [];\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].isroot == true){ // has to be on the json file of the graph\r\n              roots.push(nodes[i]);\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          for (let i = 0; i < nodes.length; i++){\r\n              if (nodes[i].parents.length == 0){\r\n                  roots.push(nodes[i]);\r\n              }\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          // calculate max out-degree\r\n          let max_outdegree = 0;\r\n          nodes.forEach(function(node){\r\n              if (node.children.length > max_outdegree){\r\n                  max_outdegree = node.children.length;\r\n              }\r\n          });\r\n          // choose vertices with greatest out-degree\r\n          nodes.forEach(function(node){\r\n              if (node.children.length == max_outdegree){\r\n                  roots.push(node);\r\n              }\r\n          });\r\n      }\r\n      // number of layers and max number of nodes in each layer\r\n      // has to be found by making the layout\r\n      // there are two approaches to finding the nodes in each layer:\r\n      // 1) each layer has all the neighbors of the nodes in the previous layer\r\n      // 2) follow links and then place non visited nodes on the layer of neighbors OR\r\n      // this layout implements the first of these approaches.\r\n      const depth = this.makeLayers(roots, 1);\r\n      // each layer of tree x = [0+alpha,1-alpha]\r\n      const stepx = (1-2*this.alphax)/(depth-1);\r\n      // posx = alphax + stepx*(depth-1)\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          this._nodes[i].x = this.alphax + stepx*(this._nodes[i].layer - 1);\r\n      }\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nfunction isOrphan(node){\r\n    let orphan = true;\r\n    for (let i=0; i<node.parents.length; ++i){\r\n        let parent_ = node.parents[i];\r\n        if (parent_ != node)\r\n            orphan = false;\r\n    }\r\n    for (let i=0; i<node.children.length; ++i){\r\n        let child = node.children[i];\r\n        if (child != node)\r\n            orphan = false;\r\n    }\r\n    return orphan;\r\n}\r\n\r\nexport default class {\r\n  // this layout should handle any digraph\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this.alphay = 0.05; // y margin\r\n    this.alphax = 0.05; // x margin\r\n    this.components = {\"current_component\": 0, \"depth\": 1};\r\n    this.unvisited = nodes;\r\n  }\r\n  \r\n  initHierarchy(){\r\n      this._nodes.forEach(function(n,i){\r\n          n.parents = [];\r\n          n.children = [];\r\n          n.visited = false;\r\n      });\r\n      this._edges.forEach(function(e,i){\r\n          e.source.children.push(e.target);\r\n          e.target.parents.push(e.source);\r\n      });\r\n  }\r\n\r\n  separateOrphans(){\r\n      let orphans = [];\r\n      let nodes = [];\r\n      for (let i=0; i< this._nodes.length; ++i){\r\n          let node = this._nodes[i];\r\n          if (isOrphan(node))\r\n              orphans.push(node);\r\n          else\r\n              nodes.push(node);\r\n      }\r\n      return orphans;\r\n  }\r\n\r\n  findRoots(nodes){\r\n      // find the roots:\r\n      // nodes defined by the user as roots OR\r\n      // nodes with in-degree == 0 OR\r\n      // nodes with greatest in-degree (or degree if undirected graph)\r\n      let roots = [];\r\n      for (let i = 0; i < nodes.length; i++){\r\n          if (nodes[i].isroot == true){ // has to be on the json file of the graph\r\n              roots.push(nodes[i]);\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          for (let i = 0; i < nodes.length; i++){\r\n              if (nodes[i].parents.length == 0){\r\n                  roots.push(nodes[i]);\r\n              }\r\n          }\r\n      }\r\n      if (roots.length == 0){\r\n          // calculate max out-degree\r\n          let max_outdegree = 0;\r\n          nodes.forEach(function(node){\r\n              if (node.children.length > max_outdegree){\r\n                  max_outdegree = node.children.length;\r\n              }\r\n          });\r\n          // choose vertices with greatest out-degree\r\n          nodes.forEach(function(node){\r\n              if (node.children.length == max_outdegree){\r\n                  roots.push(node);\r\n              }\r\n          });\r\n      }\r\n      return roots;\r\n  }\r\n\r\n  placeOrphans(nodes, max_layer){\r\n      const stepy = (1 - 2*this.alphay)/(nodes.length-1);\r\n      for (let i=0; i<nodes.length; ++i){\r\n          nodes[i].y = this.alphay + i*stepy;\r\n          nodes[i].x = max_layer+1;\r\n      }\r\n      if (nodes.length > 0)\r\n          return max_layer+1;\r\n      else\r\n          return max_layer;\r\n  }\r\n\r\n  unvisitedNodes(){\r\n      let nodes = [];\r\n      let orphans = this.orphans;\r\n      this.unvisited.forEach(function(node){\r\n          if (node.visited == false && !(node in orphans))\r\n              nodes.push(node);\r\n      });\r\n      if (nodes.length != this.unvisited){\r\n          this.maybe_more = true;\r\n          this.unvisited = nodes;\r\n      } else this.maybe_more = false;\r\n  }\r\n\r\n  placeAdditional(){\r\n      // place non-visited nodes in between layers\r\n      let aux_layers = {};\r\n      let c = this.components[this.components.current_component];\r\n      let layers = c.layers;\r\n      for (let i=0; i<this.unvisited.length; ++i){\r\n          let node = this.unvisited[i];\r\n          let lowest_layer = this.components.depth;\r\n          let child_found = false;\r\n          for(let j=0; j<node.children.length; ++j){\r\n              let child = node.children[j];\r\n              if (child.visited == true){\r\n                  child_found = true;\r\n                  if(child.layer <= lowest_layer){ // child has to be visited to have a layer\r\n                      lowest_layer = child.layer;\r\n                  }\r\n                  break;\r\n              }\r\n          }\r\n          if (child_found){\r\n              node.visited = true;\r\n              // node.index = lowest_layer-sep;\r\n              if ( !((lowest_layer-sep) in layers))\r\n                  layers[lowest_layer-sep] = []\r\n              layers[lowest_layer-sep].push(node)\r\n          }\r\n          else {\r\n              let lowest_layer = max_layer;\r\n              let parent_found = false;\r\n              for(let j=0; j<node.parents.length; ++j){\r\n                  let parent_ = node.parents[j];\r\n                  if (parent_.visited == true){\r\n                      parent_found = true;\r\n                      if(parent_.layer <= lowest_layer){ // child has to be visited to have a layer\r\n                          lowest_layer = parent_.layer;\r\n                      }\r\n                  }\r\n              }\r\n              if (parent_found){\r\n                  node.visited = true;\r\n                  node.x = lowest_layer+sep;\r\n                  if ( !((lowest_layer+sep) in layers) )\r\n                      layers[lowest_layer+sep] = []\r\n                  layers[lowest_layer+sep].push(node)\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  initializeComponent(component){\r\n      this.components[component] = {};\r\n      this.components[component].max_nodes_layer = 0;\r\n      if (component > 0)\r\n          this.components[component].index_offset = this.components[component-1].vertical_nodes;\r\n      else\r\n          this.components[component].index_offset = 0;\r\n      this.components[component].current_layer = 1;\r\n      //this.components[component].layers = {\"nodes\": [], \"layer_value\": 1};\r\n      this.components[component].layers = {};\r\n      this.components[component].vertical_nodes = 0;\r\n  }\r\n\r\n  layerNodes(nodes){\r\n      if (!(this.components.current_component in this.components))\r\n          this.initializeComponent(this.components.current_component);\r\n      let c = this.components[this.components.current_component];\r\n      if (nodes.length > c.vertical_nodes)\r\n          c.vertical_nodes = nodes.length;\r\n      c.layers[c.current_layer] = [];\r\n      for (let i=0; i<nodes.length; ++i){\r\n          nodes[i].visited = true;\r\n          c.layers[c.current_layer].push(nodes[i]);\r\n      }\r\n      let next_layer = [];\r\n      for (let i=0; i<nodes.length; i++){\r\n          let candidates = nodes[i].children;\r\n          for (let j=0; j < candidates.length; j++){\r\n              if (candidates[j].visited == false && !next_layer.includes(candidates[j])){\r\n                  next_layer.push(candidates[j]);\r\n              }\r\n          }\r\n      }\r\n      if (next_layer.length > 0){\r\n          c.current_layer++;\r\n          if (this.components.depth<c.current_layer)\r\n              this.components.depth = c.current_layer;\r\n          this.layerNodes(next_layer);\r\n      }\r\n  }\r\n\r\n  apply () {\r\n      // left-right tree by default, let user choose\r\n      // top-down, bottom-top, right-left in subsequent versions\r\n      // hierarchical layouts for trees (acyclic graphs) are\r\n      // implemented separately for now\r\n\r\n      // number of layers and max number of nodes in each layer\r\n      // has to be found by making the layout\r\n      // there are two approaches to finding the nodes in each layer:\r\n      // 1) each layer has all the neighbors of the nodes in the previous layer\r\n      // 2) follow links and then place non visited nodes on the layer of neighbors OR\r\n      // this layout implements the second of these approaches.\r\n\r\n      this.initHierarchy();\r\n      this.orphans = this.separateOrphans();\r\n      this.unvisitedNodes();\r\n      while (this.unvisited.length > 0){\r\n          let roots = this.findRoots(this.unvisited);\r\n          this.layerNodes(roots);\r\n          this.unvisitedNodes(); // update unvisited nodes\r\n          this.maybe_mode = true;\r\n          while (this.maybe_more){\r\n              this.placeAdditional(); // place additional nodes linked to this component\r\n              this.unvisitedNodes(); // update unvisited nodes\r\n          }\r\n          this.components.current_component++;\r\n      }\r\n      this.components.vertical_nodes = 0;\r\n      for (let i=0; i<this.components.current_component; i++){\r\n          this.components.vertical_nodes += this.components[i].vertical_nodes;\r\n      }\r\n\r\n      // layerNodes should populate the dictionary this.components of components and aux variables:\r\n      // components[x] is a component, x is an integer\r\n      // components[x].vertical_nodes is the maximum number of nodes in a layer for the component\r\n      // components[x].layer[j] is the j-th layer on the component, j can be fractional\r\n      // components[x].index_offset is the number of nodes positioned in above components\r\n      // components.ncomponents is the number of components\r\n      // components.vertical_nodes is the sum of the max nodes in any layer of each component\r\n      // components.depth is the maximum number of layers\r\n\r\n      // each layer of tree xy = [0+alpha,1-alpha]\r\n      const stepx = (1-2*this.alphax)/(this.components.depth);\r\n      const stepy = (1-2*this.alphay)/(this.components.vertical_nodes);\r\n      for (let i=0; i<this.components.current_component; i++){\r\n          let component = this.components[i];\r\n          for (let layer_val in component.layers){\r\n              let layer = component.layers[layer_val];\r\n              if (layer.length == 1){\r\n                  let node = layer[0];\r\n                  node.x = this.alphax + stepx*layer_val;\r\n                  node.y = this.alphay + stepy*(component.index_offset + component.vertical_nodes/2);\r\n              } else {\r\n                  for (let k=0; k<layer.length; ++k){\r\n                      let node = layer[k];\r\n                      node.x = this.alphax + stepx*layer_val;\r\n                      node.y = this.alphay + stepy*(component.index_offset + k);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      this.placeOrphans(this.orphans);\r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {EigenvalueDecomposition} from 'ml-matrix';\r\nimport {create2dArray} from './utils';\r\n\r\nfunction twoSmallest (arr) {\r\n    const min = Math.min.apply(null, arr), // get the max of the array\r\n        mini = arr.indexOf(min);\r\n    arr[mini] = Infinity; // replace max in the array with -infinity\r\n    const second_min = Math.min.apply(null, arr), // get the new max \r\n        second_mini = arr.indexOf(second_min);\r\n    arr[second_mini] = Infinity; // replace max in the array with -infinity\r\n    const third_min = Math.min.apply(null, arr), // get the new max \r\n        third_mini = arr.indexOf(third_min);\r\n    return [second_mini, third_mini];\r\n}\r\n\r\nfunction normalize (x, y) {\r\n    let maxx = Math.max.apply(null, x.map(Math.abs)),\r\n        maxy = Math.max.apply(null, y.map(Math.abs));\r\n    let minx = Math.min.apply(null, x),\r\n        miny = Math.min.apply(null, y);\r\n    for(let i=0; i<x.length; ++i){\r\n        x[i] = 0.1+(x[i]-minx)/((maxx-minx)*1.25);\r\n        y[i] = 0.1+(y[i]-miny)/((maxy-miny)*1.25);\r\n    }\r\n    return [x, y];\r\n}\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  // let user define at least: starting angle and radius and\r\n  // clock/cclock direction\r\n  // size of vertices\r\n  // more: a ratio of compactness for the more/less connected nodes\r\n  // a spiral ratio with a rotation ratio for having more than 2pi\r\n  // distribution of nodes when spiriling\r\n  // use some other ordering criterion than degree? Strength?\r\n  // defined by user and found as attribute of each node?\r\n  // random ordering, minimal crossing of edges?\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n  }\r\n\r\n  apply () {\r\n      let A = create2dArray(this._nodes.length, this._nodes.length);\r\n      // build the adjacency matrix\r\n      for (let i=0; i<this._edges.length; ++i){\r\n          let ii = this._edges[i].source.index;\r\n          let j = this._edges[i].target.index;\r\n          A[ii][j] = -1; // not considering edge weight for now (the example json files don't have weight)\r\n          A[j][ii] = -1; // not considering edge weight for now (the example json files don't have weight)\r\n      }\r\n      // build the diagonal of degrees\r\n      // NOT subtract adjacency from degrees but:\r\n      // substitute diagonal by degrees\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n          A[i][i] = -A[i].reduce((a, b) => a+b, 0);\r\n      }\r\n      let foo = new EigenvalueDecomposition(A);\r\n      const iii = twoSmallest(foo.realEigenvalues);\r\n      const foo_ = foo.eigenvectorMatrix.transpose();\r\n      const x = foo_[iii[0]];\r\n      const y = foo_[iii[1]];\r\n      const xy = normalize(x, y);\r\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\r\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\r\n      // recipe from http://www.sfu.ca/personal/archives/richards/Pages/NAS.AJS-WDR.pdf\r\n      // and implemented in networkx/drawing/layout.py\r\n      this._nodes.forEach(function(node, i){\r\n          node.x = xy[0][i];\r\n          node.y = xy[1][i];\r\n      }); \r\n  }\r\n};\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\n// inspired in Matlab implementation\r\n// and JS transcription in\r\n// https://github.com/alanmeeson/spectral-graph-layout\r\n\r\nimport {create2dArray} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._epsilon = 1e-8; // tolerance\r\n    this._MAX_ITTERATIONS = 100; //We use power iteration, this is analogous to wall time to avoid infinite loops.\r\n    this._num_elements = nodes.length; //number of nodes in graph\r\n    this._dims = 2;\r\n  }\r\n  apply () {\r\n      let A = create2dArray(this._nodes.length, this._nodes.length);\r\n      // build the adjacency matrix\r\n      for (let i=0; i<this._edges.length; ++i){\r\n          let ii = this._edges[i].source.index;\r\n          let j = this._edges[i].target.index;\r\n          A[ii][j] = 1; // not considering edge weight for now (the example json files don't have weight)\r\n      }\r\n      const D = deg(A); //degree of each node in graph (number of connections).\r\n\r\n      const dims = this._dims + 1; //add one to the dims to allow for the first eigen vector\r\n      let u = new Array(dims);//declare the eigen vector matrix\r\n      u[0] = normalize(ones(this._num_elements)); //create & normalize the first eigen vector\r\n      for (let i = 1; i < dims; i++) u[i] = zeros(this._num_elements); //create empty space for the other eigen vectors\r\n\r\n      //Power iteration to determine the remaining eigen vectors.\r\n      for (let k=1; k < dims; k++) { //for each eigen vector after the first, \r\n          //initialize eigen vector with random values\r\n          let uhk = normalize(rand(this._num_elements));\r\n\r\n          let itt_count = 0; //we are allowing a max of 100 iterations, to avoid hanging and infinite loops. (specified above in constants)\r\n          let stop = false; //stopping criterion flag.\r\n          while (!stop) { // do...while using flags to keep it consistent with my matlab implementation\r\n\r\n              //D-orthogonalize against previous eigenvectors\r\n              let uk = uhk.slice();\r\n              for (let l = 0; l < k; l++) {\t\t\t\t\t\t\r\n                  let ul = u[l]; //extract the l-th eigen vector\r\n\r\n                  //Calculate (uk'.D.ul)/(ul'.D.ul)\r\n                  let top_ = 0;\r\n                  let bottom = 0;\r\n                  for (let vmi = 0; vmi < uk.length; vmi++) {\r\n                      top_ += (uk[vmi] * D[vmi] * ul[vmi]);\r\n                      bottom += (ul[vmi] * D[vmi] * ul[vmi]);\r\n                  }\r\n                  const ratio = top_ / bottom;\r\n\r\n                  //uk = uk - ((uk' . D . ul) / (ul' . D ul)) . ul\r\n                  for (let vsi = 0; vsi < uk.length; vsi++) {\r\n                      uk[vsi] = uk[vsi] - (ratio * ul[vsi]);\r\n                  }\r\n              }\r\n\r\n              //multiply with .5(I+D^-1 A)\r\n              for (let i = 0; i < uhk.length; i++) {\r\n                  uhk[i] = 0.5 * (uk[i] + dot(A[i], uk) / D[i]);\r\n              }\r\n\r\n\r\n              uhk = normalize(uhk);\r\n\r\n              itt_count = itt_count + 1;\r\n              stop = (itt_count > 100) | !(dot(uhk, uk) < (1-this._epsilon));\r\n          }\r\n          u[k] = uhk.slice();\t\r\n      }\r\n\r\n      //discard the first eigenvector which should be [ones].\r\n      // var v = new Array(u.length);\r\n      // for (var i=0; i < u.length; i++) {\r\n      //     v[i] = new Array(u[i].length);\r\n      //     for (var j=0; j < u[i].length; j++) v[i][j] = u[i][j];\r\n      // }\r\n      const x = normalize2(u[1]);\r\n      const y = normalize2(u[2]);\r\n      this._nodes.forEach(function(node, i){\r\n          node.x = x[i];\r\n          node.y = y[i];\r\n      }); \r\n  }\r\n};\r\n\r\nfunction deg(graph) {\r\n    //Calculate the degree of each node from the graph matrix.\r\n    let d = zeros(graph.length);\r\n\r\n    //degree of node i is the sum of the weights of all edges connected to it.\r\n    for (let i = 0; i < graph.length; i++) {\r\n        let node_degree = 0;\r\n        for (let j = 0; j < graph[i].length; j++) {\r\n            node_degree += graph[i][j];\r\n        }\r\n        d[i] = node_degree+1;\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\nfunction dot(a,b) {\r\n    //inner product of two vectors\r\n    let d = 0;\r\n    for (let i = 0; i < a.length; i++) {\r\n        d += a[i] * b[i];\r\n    }\r\n    return d;\r\n}\r\n\r\nfunction euclideanDistance(coordinates) {\r\n    //calculate the euclidean distance between two points/vectors.\r\n    // used for normalization.\r\n    let d = 0;\r\n\r\n    for (let i = 0; i < coordinates.length; i++) {\r\n        d += Math.pow(coordinates[i], 2);\r\n    }\r\n    return Math.sqrt(d);\r\n}\r\n\r\nfunction normalize(arr) {\r\n    //normalizes a vector = arr/||arr||\r\n    const d = euclideanDistance(arr);\r\n    let narr = new Array(arr.length);\r\n    for (let i = 0; i < arr.length; i++) {\r\n        narr[i] = arr[i] / d;\r\n    }\r\n\r\n    return narr;\r\n}\r\n\r\nfunction rand(n) {\r\n    //create a vector of length n and fill with random numbers.\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = Math.random();\r\n    return arr;\r\n}\r\n\r\nfunction add(a, b) {\r\n    let c = new Array(a.length);\r\n    for (let i = 0; i < a.length; i++) {\r\n        c[i] = new Array(a[i].length);\r\n        for (let j = 0; j < a[i].length; j++) c[i][j] = a[i][j] + b[i][j];\r\n    }\r\n    return c;\r\n}\r\n\r\nfunction symmetricRandMatrix(n, ulim) {\r\n    let mat = new Array(n);\r\n    for (let i = 0; i < n; i++) {\r\n        mat[i] = new Array(n);\r\n        mat[i][i] = 0;\r\n    }\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = i + 1; j < n; j++) {\r\n            mat[i][j] = ulim * Math.random();\r\n            mat[j][i] = mat[i][j];\r\n        }\r\n    }\r\n    return mat;\r\n}\r\n\r\nfunction zeros(n) {\r\n    //create a vector filled with zeros\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = 0;\r\n    return arr;\r\n}\r\n\r\nfunction ones(n) {\r\n    //create a vector filled with ones\r\n    let arr = new Array(n);\r\n    for (let i = 0; i < n; i++) arr[i] = 1;\r\n    return arr;\r\n}\r\n\r\nfunction normalize2 (x) {\r\n    let maxx = Math.max.apply(null, x.map(Math.abs));\r\n    let minx = Math.min.apply(null, x);\r\n    for(let i=0; i<x.length; ++i){\r\n        x[i] = 0.1+(x[i]-minx)/((maxx - minx)*1.25);\r\n    }\r\n    return x;\r\n}\r\n","/**\r\n *  Copyright (c) 2017, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Renato Fabbri\r\n */\r\n\r\nimport {degrees} from './utils';\r\n\r\nexport default class {\r\n  // get degree of all nodes\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05; // from [0,1] borders\r\n    this._radius = 0.05; // of the empty circle on the center\r\n    this._nlines = 5;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const nodes_segment = this._nodes.length / this._nlines;\r\n      const segment = 0.5 - (this._margin + this._radius);\r\n      const step = segment / nodes_segment;\r\n      const angle = 2*Math.PI/this._nlines;\r\n      let j = 0;\r\n      for(let i=0; i<this._nodes.length; ++i){\r\n          let ii = nd.nodes[i].index;\r\n          this._nodes[ii].x = 0.5+(this._radius + step*(i-j*nodes_segment))*Math.cos(angle*j+Math.PI/2);\r\n          this._nodes[ii].y = 0.5+(this._radius + step*(i-j*nodes_segment))*Math.sin(angle*j+Math.PI/2);\r\n          j = Math.floor(i/nodes_segment);\r\n      }\r\n  }\r\n};\r\n","import {degrees} from './utils';\r\n\r\nexport default class {\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const sq = Math.sqrt(this._nodes.length);\r\n      const reminder = sq - Math.floor(sq);\r\n      if (reminder > 0)\r\n\t  var nnodes = Math.floor(sq)+1;\r\n      else\r\n\t  var nnodes = sq;\r\n      const step = (1 - this._margin*2)/nnodes;\r\n\r\n      const nlines = this._nodes.length/nnodes;\r\n      const reminder2 = nlines - Math.floor(nlines);\r\n      if (reminder2 > 0)\r\n\t  var nlines2 = Math.floor(nlines)+1;\r\n      else\r\n\t  var nlines2 = nlines;\r\n      const stepy = (1-2*this._margin)/(nlines2-2);\r\n      for (let i=0; i<this._nodes.length; ++i){\r\n\t  let j = Math.floor(i/(nnodes+1));\r\n          this._nodes[nd.nodes[i].index].x = this._margin+step*(i-j*(nnodes+1));\r\n          this._nodes[nd.nodes[i].index].y = this._margin+stepy*j;\r\n          this._nodes[nd.nodes[i].index].weight = nd.degrees[i];\r\n      }\r\n  }\r\n};\r\n","import {degrees} from './utils';\r\n\r\nexport default class {\r\n  // the hubs are on the first half of the sinusoid period\r\n  // the intermediary are on the second half\r\n  // and the periphery are on the upper straight line\r\n  // further versions should enable the choice of other\r\n  // fractions of hubs, intermediary and peripheral vertices\r\n  // or the Erdös sectioning.\r\n  // maybe also let the user set the endpoints of the periphery segment\r\n  constructor(nodes, edges) {\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._margin = 0.05;\r\n    this._hubs = 0.1; // 10%\r\n    this._intermediary = 0.2;\r\n  }\r\n  apply () {\r\n      let nd = degrees(this._nodes, this._edges);\r\n      const nhubs_intermediary = Math.floor(this._nodes.length*(this._hubs + this._intermediary));\r\n      const nhubs = Math.floor(this._nodes.length*this._hubs);\r\n      const stepx1 = ((1 - 2*this._margin)/2)/(nhubs - 1);\r\n      const steprad = Math.PI/(nhubs - 1); \r\n      let i = 0;\r\n      while (i < nhubs ){\r\n        this._nodes[nd.nodes[i].index].x = this._margin + stepx1*i;\r\n        this._nodes[nd.nodes[i].index].y = this._margin + 0.4 + 0.4*Math.sin(i*steprad);\r\n\t++i;\r\n      }\r\n      const nintermediary = nhubs_intermediary - nhubs;\r\n      const steprad2 = Math.PI/nintermediary; \r\n      const stepx2 = ((1 - 2*this._margin)/2)/nintermediary;\r\n      i = 0;\r\n      while (i < nintermediary ){\r\n        this._nodes[nd.nodes[i+nhubs].index].x = 0.5 + stepx2*(i+1);\r\n        this._nodes[nd.nodes[i+nhubs].index].y = this._margin + 0.4 + 0.4*Math.sin(Math.PI+(i+1)*steprad2);\r\n\t++i;\r\n      }\r\n      const p0 = [0.85, 0.75];\r\n      const p1 = [0.4, 1-this._margin];\r\n      const nperipheral = this._nodes.length - nhubs_intermediary;\r\n      const stepxx = (p1[0]-p0[0])/(nperipheral - 1);\r\n      const stepy = (p1[1]-p0[1])/(nperipheral - 1);\r\n      i = 0;\r\n      while (i < nperipheral ){\r\n        this._nodes[nd.nodes[i+nhubs_intermediary].index].x = p0[0] + stepxx*i;\r\n        this._nodes[nd.nodes[i+nhubs_intermediary].index].y = p0[1] + stepy*i;\r\n\t++i;\r\n      }\r\n  }\r\n};\r\n","import rbush from './rbush' ;\r\nimport ccNetViz_geomutils from '../geomutils' ;\r\nimport {partitionByStyle, getPartitionStyle} from '../primitiveTools' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska - http://alessaska.cz/\r\n */\r\n\r\n\r\n\r\nconst EPS = Number.EPSILON || 1e-14;\r\n\r\n\r\n\r\n\r\n//solving cube analyticaly for bezier curves\r\nfunction cuberoot(x) {\r\n    const y = Math.pow(Math.abs(x), 1/3);\r\n    return x < 0 ? -y : y;\r\n}\r\n\r\nfunction solveCubic(a, b, c, d) {\r\n    if (Math.abs(a) < 1e-8) { // Quadratic case, ax^2+bx+c=0\r\n        a = b; b = c; c = d;\r\n        if (Math.abs(a) < 1e-8) { // Linear case, ax+b=0\r\n            a = b; b = c;\r\n            if (Math.abs(a) < 1e-8) // Degenerate case\r\n                return [];\r\n            return [-b/a];\r\n        }\r\n\r\n        const D = b*b - 4*a*c;\r\n        if (Math.abs(D) < 1e-8)\r\n            return [-b/(2*a)];\r\n        else if (D > 0)\r\n            return [(-b+Math.sqrt(D))/(2*a), (-b-Math.sqrt(D))/(2*a)];\r\n        return [];\r\n    }\r\n\r\n    // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)\r\n    const p = (3*a*c - b*b)/(3*a*a);\r\n    const q = (2*b*b*b - 9*a*b*c + 27*a*a*d)/(27*a*a*a);\r\n    let roots;\r\n\r\n    if (Math.abs(p) < 1e-8) { // p = 0 -> t^3 = -q -> t = -q^1/3\r\n        roots = [cuberoot(-q)];\r\n    } else if (Math.abs(q) < 1e-8) { // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0\r\n        roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\r\n    } else {\r\n        const D = q*q/4 + p*p*p/27;\r\n        if (Math.abs(D) < 1e-8) {       // D = 0 -> two roots\r\n            roots = [-1.5*q/p, 3*q/p];\r\n        } else if (D > 0) {             // Only one real root\r\n            const u = cuberoot(-q/2 - Math.sqrt(D));\r\n            roots = [u - p/(3*u)];\r\n        } else {                        // D < 0, three roots, but needs to use complex numbers/trigonometric solution\r\n            const u = 2*Math.sqrt(-p/3);\r\n            const t = Math.acos(3*q/p/u)/3;  // D < 0 implies p < 0 and acos argument in [-1..1]\r\n            const k = 2*Math.PI/3;\r\n            roots = [u*Math.cos(t), u*Math.cos(t-k), u*Math.cos(t-2*k)];\r\n        }\r\n    }\r\n\r\n    // Convert back from depressed cubic\r\n    for (let i = 0; i < roots.length; i++)\r\n        roots[i] -= b/(3*a);\r\n\r\n    return roots;\r\n}\r\n\r\n//function distanceToBezier(x,y,ax,ay,bx,by,cx,cy){\r\nfunction distance2ToBezier(x,y,a,d,b,e,c,f){\r\n  //based on compute derivation of: d/dt ((X - (a*(1-t)*(1-t)+2*b*t*(1-t)+c*t*t))^2 + (Y - (d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t))^2)\r\n  \r\n  const A =   4*a*a  - 16*a*b + 8*a*c  + 16*b*b - 16*b*c + 4*c*c  + 4*d*d  - 16*d*e + 8*d*f  + 16*e*e - 16*e*f + 4*f*f;\r\n  const B = - 12*a*a + 36*a*b - 12*a*c - 24*b*b + 12*b*c - 12*d*d + 36*d*e - 12*d*f - 24*e*e + 12*e*f;\r\n  const C =   12*a*a - 24*a*b + 4*a*c  - 4*a*x  + 8*b*b  + 8*b*x  - 4*c*x  + 12*d*d - 24*d*e + 4*d*f  - 4*d*y  + 8*e*e + 8*e*y - 4*f*y\r\n  const D = - 4*a*a  + 4*a*b  + 4*a*x  - 4*b*x  - 4*d*d  + 4*d*e  + 4*d*y  - 4*e*y;\r\n    \r\n  const eqresult = solveCubic(A,B,C,D);\r\n  \r\n  \r\n  //loop through all possible solitions to find out which point is the nearest\r\n  let mindist = Infinity;\r\n  for(let i = 0; i < eqresult.length; i++){\r\n    const t = eqresult[i];\r\n    \r\n    if(t < 0 || t > 1)\r\n      continue;\r\n    \r\n    //point at bezier curve\r\n    const px = a*(1-t)*(1-t)+2*b*t*(1-t)+c*t*t;\r\n    const py = d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t;\r\n    \r\n    const dist = distance2(x,y,px,py);\r\n    if(dist < mindist)\r\n      mindist = dist;\r\n    \r\n  }\r\n  \r\n  return mindist;\r\n}\r\n\r\n/*\r\n * @param v - array of with points [x1,y1,x2,y2 .... ]\r\n * @return array representing bounding box [x1,y1,x2,y2]\r\n */\r\nfunction getBBFromPoints(v){\r\n  let xmin = Infinity;\r\n  let xmax = -xmin;\r\n  let ymin = Infinity;\r\n  let ymax = -ymin;\r\n  \r\n  //x of points - even indexes in array \r\n  for(let i = 0; i < v.length; i+=2){\r\n    const val = v[i];\r\n    if(val < xmin) xmin = val;\r\n    if(val > xmax) xmax = val;\r\n  }\r\n  \r\n  //y of points - odd indexes in array \r\n  for(let i = 1; i < v.length; i+=2){\r\n    const val = v[i];\r\n    if(val < ymin) ymin = val;\r\n    if(val > ymax) ymax = val;\r\n  }\r\n\r\n  return [xmin, ymin, xmax, ymax];\r\n}\r\n\r\n//distance from point to point\r\nfunction distance2(x1,y1,x2,y2){\r\n  const dx = x1 - x2;\r\n  const dy = y1 - y2;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n//distance from point to line\r\nfunction pDistance2(x, y, x1, y1, x2, y2) {\r\n  const A = x - x1;\r\n  const B = y - y1;\r\n  const C = x2 - x1;\r\n  const D = y2 - y1;\r\n\r\n  const dot = A * C + B * D;\r\n  const len_sq = C * C + D * D;\r\n  let param = -1;\r\n  if (len_sq != 0) //in case of 0 length line\r\n      param = dot / len_sq;\r\n\r\n  let xx, yy;\r\n\r\n  if (param < 0) {\r\n    xx = x1;\r\n    yy = y1;\r\n  }\r\n  else if (param > 1) {\r\n    xx = x2;\r\n    yy = y2;\r\n  }\r\n  else {\r\n    xx = x1 + param * C;\r\n    yy = y1 + param * D;\r\n  }\r\n\r\n  return distance2(x,y,xx,yy);\r\n}\r\n\r\nfunction lineIntersectsLine(l1p1x, l1p1y, l1p2x, l1p2y, l2p1x, l2p1y, l2p2x, l2p2y)\r\n{\r\n    let q = (l1p1y - l2p1y) * (l2p2x - l2p1x) - (l1p1x - l2p1x) * (l2p2y - l2p1y);\r\n    let d = (l1p2x - l1p1x) * (l2p2y - l2p1y) - (l1p2y - l1p1y) * (l2p2x - l2p1x);\r\n\r\n    if( d == 0 )\r\n    {\r\n        return false;\r\n    }\r\n\r\n    let r = q / d;\r\n\r\n    q = (l1p1y - l2p1y) * (l1p2x - l1p1x) - (l1p1x - l2p1x) * (l1p2y - l1p1y);\r\n    let s = q / d;\r\n\r\n    if( r < 0 || r > 1 || s < 0 || s > 1 )\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction pointInRect(px,py, x1, y1, x2, y2){\r\n  return px >= x1 - EPS && px <= x2 + EPS && py >= y1 - EPS && py <= y2 + EPS\r\n}\r\n\r\nfunction rectIntersectsRect(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r2y){\r\n  return p1x <= r2x &&\r\n          p1y <= r2y &&\r\n          p2x >= r1x &&\r\n          p2y >= r1y;\r\n}\r\n\r\nfunction lineIntersectsRect(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r2y)\r\n{\r\n    if(pointInRect(p1x, p1y, r1x, r1y, r2x, r2y) || pointInRect(p2x, p2y, r1x, r1y, r2x, r2y))\r\n      return true;\r\n    \r\n    return lineIntersectsLine(p1x, p1y, p2x, p2y, r1x, r1y, r2x, r1y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r2x, r1y, r2x, r2y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r2x, r2y, r1x, r2y) ||\r\n        lineIntersectsLine(p1x, p1y, p2x, p2y, r1x, r2y, r1x, r1y);\r\n}\r\n\r\nfunction eq(a,b){\r\n  return a >= b-EPS && a <= b+EPS;\r\n}\r\n\r\nfunction neq(a,b){\r\n  return !eq(a,b);\r\n}\r\n\r\n\r\nfunction checkBezierTkoef(a,d,b,e,c,f,t,q,s,r,v){\r\n  if(t < 0 || t > 1)\r\n    return false;\r\n  \r\n  if(neq(v-s,0)){\r\n    const x = (d*(1-t)*(1-t)+2*e*t*(1-t)+f*t*t)/(v-s);\r\n    if(x < 0 || x > 1)\r\n      return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction bezierIntersectsLine(a,d,b,e,c,f, q,s,r,v){\r\n    //based on wolfram alpha: >> solve ((d*(1-x)*(1-x)+2*e*x*(1-x)+f*x*x) = s + ((-a*(x-1)*(x-1) + x*(2*b*(x-1)-c*x)+q)/(q-r))*(v - s)) for x <<\r\n\r\n    let t;\r\n    \r\n    let tden = -a*s+a*v+2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r;\r\n    if(neq(tden, 0)){\r\n      if(neq(q-r, 0)){\r\n        let sq1 = 2*a*s-2*a*v-2*b*s+2*b*v-2*d*r+2*e*q-2*e*r;\r\n        let sq = sq1*sq1 - 4*(-a*s+a*v+d*q-d*r-q*v+r*s)*(-a*s+a*v+2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r);\r\n        if(sq >= 0){\r\n          const t1 = a*s-a*v-b*s+b*v-d*q+d*r+e*q-e*r;\r\n  \r\n          t = (t1-0.5*Math.sqrt(sq))/tden;\r\n          if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n            return true;\r\n  \r\n          t = (t1+0.5*Math.sqrt(sq))/tden;\r\n          if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n            return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    tden = -b*s+b*v+c*s-c*v+e*q-e*r-f*q+f*r;\r\n    if(eq(d, 2*e-f) && eq(a,2*b-c) && neq(tden, 0) && neq(q*s-q*v-r*s+r*v,0)){\r\n      t = -2*b*s+2*b*v+c*s-c*v+2*e*q-2*e*r-f*q+f*r-q*v+r*s;\r\n      t = t/(2*tden);\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    if(eq(s,v) && eq(d,2*e-f) && neq(e-f,0) && neq(q-r,0)){\r\n      t = (2*e-f-v)/(2*(e-f));\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    let aeq = (2*b*s-2*b*v-c*s+c*v+d*q-d*r-2*e*q+2*e*r+f*q-f*r)/(s-v);\r\n    let val = b*d*s-b*d*v-2*b*e*s+2*b*e*v+b*f*s-b*f*v-c*d*s+c*d*v+2*c*e*s-2*c*e*v-c*f*s+c*f*v-d*e*q+d*e*r+d*f*q-d*f*r+2*e*e*q-2*e*e*r-3*e*f*q+3*e*f*r+f*f*q-f*f*r;\r\n    if(eq(a, aeq) && neq(val,0) && neq(q-r, 0)){\r\n      t = (2*b*s-2*b*v-c*s+c*v-2*e*q+2*e*r+f*q-f*r+q*v-r*s)/(2*(b*s-b*v-c*s+c*v-e*q+e*r+f*q-f*r));\r\n      if(checkBezierTkoef(a,d,b,e,c,f, q,s,r,v,t))\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction bezierIntersectsRect(a,d,b,e,c,f, r1x, r1y, r2x, r2y)\r\n{\r\n    if(pointInRect(a, d, r1x, r1y, r2x, r2y) || pointInRect(c, f, r1x, r1y, r2x, r2y))\r\n      return true;\r\n    \r\n    const centerx = (r1x+r2x)/2;\r\n    const centery = (r1y+r2y)/2;\r\n    \r\n    const diffx = r1x-r2x;\r\n    const diffy = r1y-r2y;\r\n    \r\n    //performance optimalization based on distance\r\n    let diff2xy = diffx*diffx + diffy*diffy;\r\n    let dist2 = distance2ToBezier(centerx, centery, a,d,b,e,c,f);\r\n    if(dist2*4 > diff2xy)\r\n      return false;\r\n    if(dist2*4 <= Math.min(diffx*diffx, diffy*diffy))\r\n      return true;\r\n\r\n    return bezierIntersectsLine(a,d,b,e,c,f, r1y, r2x, r1y, r1y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r2x, r1y, r2x, r2y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r2x, r2y, r1x, r2y) ||\r\n        bezierIntersectsLine(a,d,b,e,c,f, r1x, r2y, r1x, r1y);\r\n}\r\n\r\nexport {\r\n        EPS, \r\n        bezierIntersectsRect, \r\n        bezierIntersectsLine, \r\n        lineIntersectsRect, \r\n        rectIntersectsRect, \r\n        pointInRect, \r\n        distance2ToBezier, \r\n        distance2, \r\n        pDistance2, \r\n        getBBFromPoints,\r\n        eq,\r\n        neq\r\n      };\r\n","import ccNetViz_utils from '../utils' ;\r\nimport ccNetViz_gl from '../gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\n// this file creates webGL type textures of images example custom.html\r\n\r\nexport default class {\r\n  constructor(events, onLoad){\r\n    this._load = [events.debounce(onLoad, 5)];\r\n    this._textures = {}; //already converted to textures\r\n    this._pending = {}; //pending images \r\n    this._n = 0;  //counts pending images to be converted to textures\r\n  }\r\n\r\n  get(gl, img, action, options) { \r\n      var p = this._pending[img];\r\n      var t = this._textures[img];\r\n\r\n      \r\n      // TODO : add explanation about if-else statements below\r\n      if (p) {\r\n          p.push(action);\r\n      }\r\n      else if (t) {\r\n          action && action();\r\n      }\r\n\r\n      // if image is neither in this._pending array nor nor in already converted this._textures array\r\n      //add the image to the pending, then convert it to texture on line ccNetViz_gl.createTexture(gl, img,function)\r\n      // and remove it from pending + add it to textures\r\n      \r\n      else {\r\n          p = this._pending[img] = [action];\r\n          this._n++;\r\n          this._textures[img] = t = ccNetViz_gl.createTexture(gl, img, () => {\r\n              p.forEach(a => a && a());\r\n              delete this._pending[img];\r\n              \r\n              --this._n || this._load.forEach(l => l());\r\n          }, options);\r\n      }\r\n      return t;\r\n  }\r\n\r\n  onLoad (action) {\r\n    if(this.allLoaded())\r\n      action();\r\n    else\r\n      this._load.push(action);\r\n  }\r\n  \r\n  allLoaded(){\r\n    return ccNetViz_utils.emptyObject(this._pending);\r\n  }\r\n\r\n}","import ccNetViz_utils from '../utils' ;\r\nimport ccNetViz_gl from '../gl' ;\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(events, onLoad){\r\n    this._load = [events.debounce(onLoad || (() => {}), 5)];\r\n    this._files = {};\r\n    this._pending = {};\r\n    this._n = 0;\r\n  }\r\n  \r\n  _transformFile(data, dataType) {\r\n    if(dataType === 'json')\r\n      return JSON.parse(data);\r\n    return data;    \r\n  }\r\n  \r\n  get(url) {\r\n    return this._files[url];\r\n  }\r\n\r\n  /*\r\n   * @param type {\r\n   *   url: 'url of file',\r\n   *   success: callback\r\n   *   dataType \"text\" || \"json\"\r\n   * }\r\n   */\r\n  load(url, action, dataType) {\r\n    let p = this._pending[url];\r\n    let f = this._files[url];\r\n\r\n    if (p) {\r\n        p.push(action);\r\n    }\r\n    else if (f) {\r\n        action && action();\r\n    }\r\n    else {\r\n      p = this._pending[url] = [action];\r\n      this._n++;\r\n\r\n      ccNetViz_utils.ajax(url, (data) => {\r\n        this._files[url] = this._transformFile(data,dataType);\r\n        p.forEach(a => a && a(this._files[url]));\r\n        delete this._pending[url];\r\n        --this._n || this._load.forEach(l => l());\r\n      }, dataType=='arraybuffer'?dataType:undefined);\r\n    }\r\n    return f;\r\n  }\r\n  \r\n  onLoad (action) {\r\n    if(this.allLoaded())\r\n      action();\r\n    else\r\n      this._load.push(action);\r\n  }\r\n  \r\n  allLoaded(){\r\n    return ccNetViz_utils.emptyObject(this._pending);\r\n  }\r\n  \r\n}\r\n","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nimport ccNetViz_defaultTexts  from './default';\r\nimport ccNetViz_sdfTexts      from './sdf/sdf';\r\nimport ccNetViz_utils         from '../utils';\r\n\r\nexport default class {\r\n  constructor(gl, files, textures){\r\n    this._gl = gl;\r\n\r\n    this._modules = {\r\n      'default': new ccNetViz_defaultTexts(gl, files, textures),\r\n      'sdf': new ccNetViz_sdfTexts(gl, files, textures),\r\n    };\r\n  }\r\n\r\n  clear() {\r\n    for(let k in this._modules){\r\n      this._modules[k].clear();\r\n    }\r\n  }\r\n  \r\n  isSDF(font){\r\n    if(ccNetViz_utils.isObject(font)){\r\n      if(font.type === 'sdf'){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  getEngine(font) {\r\n    if(this.isSDF(font)){\r\n      return this._modules.sdf;\r\n    }\r\n    return this._modules.default;\r\n  }\r\n\r\n  bind () {\r\n    for(let k in this._modules){\r\n      this._modules[k].bind();\r\n    }\r\n  }\r\n  \r\n  remove () {\r\n    for(let k in this._modules){\r\n      this._modules[k].remove && this._modules[k].remove();\r\n    }\r\n  }\r\n\r\n};","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(gl, files, textures){\r\n    this._gl = gl;\r\n    this._size = 1024;\r\n\r\n    \r\n    this._canvas = document.createElement(\"canvas\");\r\n    this._canvas.width = this._canvas.height = this._size;\r\n    this._canvas.style.width = this._canvas.style.height = this._size + 'px';\r\n    this._canvas.style.display = \"none\";\r\n    this._el = document.body.appendChild(this._canvas);\r\n\r\n    this._context = this._canvas.getContext('2d');\r\n    this._context.fillStyle = \"white\";\r\n    this._context.textAlign = \"left\";\r\n    this._context.textBaseline = \"top\";\r\n\r\n    this._rendered = this._texts = this._x = this._y = this._height = undefined;\r\n\r\n    this.texture = this._gl.createTexture();\r\n    \r\n  }\r\n\r\n  clear() {\r\n    this._rendered = {};\r\n    this._context.clearRect(0, 0, this._size, this._size);\r\n    this._height = this._x = this._y = 0;\r\n  }\r\n\r\n  setFont (font) {\r\n    var fontstr = font ? font.size+\"px \"+font.type : undefined;\r\n    \r\n    this._rendered [fontstr] = this._texts = this._rendered [fontstr] || {};\r\n    this._context.font = fontstr;\r\n    this._x = 0;\r\n    this._y += this._height;\r\n    this._height = font ? font.size + 1 : NaN;\r\n  }\r\n  \r\n  get fontSize(){\r\n    return this._height - 1;\r\n  }\r\n  \r\n  getTexture (style, onLoad){\r\n    onLoad();\r\n    return this.texture;\r\n  }\r\n\r\n  _getText (text) {\r\n    let result = this._texts[text];\r\n    if (!result) {\r\n        let width = this._context.measureText(text).width;\r\n        if (this._x + width > this._size) {\r\n            this._x = 0;\r\n            this._y += this._height;\r\n        }\r\n        this._context.fillText(text, this._x, this._y);\r\n        this._texts[text] = result = {\r\n            width: width,\r\n            height: this._height,\r\n            left: this._x / this._size,\r\n            right: (this._x + width) / this._size,\r\n            top: this._y / this._size,\r\n            bottom: (this._y + this._height) / this._size\r\n        };\r\n        this._x += width;\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  get (text, x, y) {\r\n    let c = this._getText(text);\r\n    \r\n    let dx = x <= 0.5 ? 0 : -c.width ;\r\n    let dy = y <= 0.5 ? 0 : -c.height;\r\n    \r\n    return [{\r\n        width:  c.width,\r\n        height: c.height,\r\n        left:   c.left,\r\n        right:  c.right,\r\n        top:    c.top,\r\n        bottom: c.bottom,\r\n        dx: dx,\r\n        dy: dy\r\n      }];\r\n  }\r\n  \r\n  steps (text) {\r\n    return 1;\r\n  }\r\n\r\n  bind () {\r\n    this._gl.bindTexture(this._gl.TEXTURE_2D, this.texture);\r\n    this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);\r\n    this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._canvas);\r\n    this._gl.bindTexture(this._gl.TEXTURE_2D, null);\r\n  }\r\n  \r\n  remove () {\r\n    this._context && this._el.parentNode.removeChild(this._el);\r\n  }\r\n\r\n};","import GlyphAtlas from './atlas';\r\nimport SpriteGenerator from './spriteGenerator';\r\n\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: Aleš Saska\r\n */\r\n\r\n\r\n// A simplified representation of the glyph containing only the properties needed for shaping.\r\nclass SimpleGlyph {\r\n  constructor(glyph, rect, buffer,style) {\r\n    const padding = 1;\r\n    this.advance = glyph.advance;\r\n    this.left = glyph.left - buffer - padding;\r\n    this.top = glyph.top + buffer + padding;\r\n    this.rect = rect;\r\n  }\r\n}\r\n\r\n\r\n// Multiplication factor by which the size will grow\r\nconst SIZE_GROWTH_RATE = 4;\r\n\r\n// Size in which we try to contian the glyphs\r\nconst DEFAULT_SIZE = 512;\r\n\r\n// must be \"DEFAULT_SIZE * SIZE_GROWTH_RATE ^ n\" for some integer n\r\n// Maybe the maximum size allowed of the atlas\r\nconst MAX_SIZE = 2048;\r\n\r\n\r\n// Class for the text engine\r\n\r\n// invoked only when main configuration object, the \"font\" is mentioned and\r\n// the proper link to the font file is present\r\nexport default class {\r\n\r\n  // new text engine object takes 3 arguments\r\n  // 1. gl = Webgl context\r\n  // 2. files = File object programmed in src/dataSources/files.js\r\n  // 3. texture = Texture object programmed in src/dataSources/textures.js\r\n\r\n  constructor(gl, files, textures) {\r\n    // Defines the dimensions of the texture\r\n    this.width = DEFAULT_SIZE;\r\n    this.height = DEFAULT_SIZE;\r\n\r\n    // Does nothing. Required in default.js text engine\r\n    this.clear();\r\n\r\n    // _files contains the file object of the glyph obtained via protobuf\r\n    this._files = files;\r\n\r\n    // Webgl Rendering context\r\n    this._gl = gl;\r\n\r\n    // Atlas object programmed in src/texts/sdf/atlas.js\r\n    this.atlas = new GlyphAtlas(this._gl, () => { this._cachedGlyphs = {}; });\r\n\r\n    // For every char_id, contains position, properties and buffer data\r\n    this._glyphs = {};\r\n\r\n    // For every char_id, contains position and properties\r\n    this._rects = {};\r\n\r\n    // glyphs that are cached from previous draw call of label for next one\r\n    this._cachedGlyphs = {};\r\n\r\n    \r\n  }\r\n\r\n\r\n  // returns if we are using SDF TextEngine or not\r\n  get isSDF() {\r\n    return true;\r\n  }\r\n\r\n  // this is a dummy method to make 'interface' of sdf.js and default.js same\r\n  clear() {\r\n  }\r\n\r\n\r\n  /**\r\n   * style = object: {\r\n   *   pbf: <url to the font file on the server>\r\n   *   type: 'sdf' {Type of the font file & sdf => distance transformed spriteSheet}\r\n   * }\r\n   */\r\n  setFont(style) {\r\n    // curFont => current_font\r\n    // style.pbf examplar value = http://helikarlab.github.io/ccNetViz/fonts/FineHand/0-65535.pbf\r\n    this.fontStyle = style;\r\n    this.curFont = JSON.stringify(style);\r\n   \r\n  }\r\n\r\n  // FontSize is fixed and hardcoded i.e. 24\r\n  get fontSize() {\r\n    return 24;\r\n  }\r\n\r\n  //\r\n  getTexture(fontStyle, onLoad) {\r\n    // init with first most-used ASCII chars\r\n    for (let i = 0; i < 128; i++) {\r\n      // Cache the most used characters prior to the knowledge if they would be used in lables or not\r\n      // TODO: Ideally get methods should return something which in-turn should pe passed to other variables\r\n      this._getChar(String.fromCharCode(i), fontStyle);\r\n    }\r\n    onLoad && onLoad.apply(this, arguments);\r\n\r\n    // by calling this._getChar, we have updated the texture in this.atlas object\r\n    // following we are returning the updated object\r\n    // TODO: this code is not intuitive, we can write better\r\n    return this.atlas.texture;\r\n  }\r\n  _getCharArray(charArray, char, height, dx, dy, markDirty) {\r\n    const rect = char.rect || {};\r\n    // rect.x rect.w rect.h rect.y are all atlas widths heigths x y positions etc \r\n    charArray.push({\r\n      width: rect.w,\r\n      height: rect.h,\r\n      left: rect.x / this.atlas.width, //position in atlas\r\n      right: (rect.x + rect.w) / this.atlas.width, //position in atlas\r\n      bottom: (rect.y + rect.h) / this.atlas.height, \r\n      top: rect.y / this.atlas.height,\r\n      dx: dx,\r\n      dy: dy + char.top + (height - rect.h),\r\n      advance: char.advance\r\n      });\r\n\r\n    \r\n    return charArray;\r\n  }\r\n  // function to align text left, right or center\r\n  alignText(alignment, text, x, y, width, height, markDirty, widthArray, wordWidth, fontStyle  ) {\r\n\r\n    // x and y are the clipspace co-ordinates between 0 and 1\r\n   // dx and dy shifts the position of label w.r.t possibly node\r\n   // (TODO: dx and dy are calculated w.r.t what is not clear , please clear it if you find out)\r\n    \r\n   if(!( alignment == 'right' || alignment == 'left' || alignment == 'center')) {\r\n    alignment = 'left';\r\n    }\r\n    const textArray = text.split(\" \");\r\n    let dx=0;\r\n\r\n    // dy positioned so that if y< 0.5 i.e. for lower half of canvas it's length should increase dynamically \r\n    // so that it characters don't go outside of canvas, also for y>0.5 , it's constant at a particular height\r\n    // so that it for y===1 it doesn't go beyond the canvas\r\n\r\n    let dy = y <= 0.5 ? height/3*(textArray.length-1) : -height/3;\r\n    // \"ret\" must be the return object. \"ret\" is always the return object\r\n    let ret = [];\r\n\r\n    switch (alignment) {\r\n      case 'left' :\r\n        dx = x <= 0.5 ? 0: -width;\r\n        \r\n        for (var i=0;i<text.length;i++) {\r\n\r\n          // changing line here when it encounters any whitespace character\r\n\r\n          if ((text[i] === ' ') && (i != 0 || i != text.length-1) ) {\r\n            dx = x <= 0.5 ? 0 : -width ;\r\n            dy = dy-Math.floor(height/3);\r\n          } else {\r\n            const char = this._getChar(text[i], fontStyle, markDirty);\r\n            const rect = char.rect || {};\r\n            let horiBearingX = 3;\r\n            dx += horiBearingX;\r\n            ret = this._getCharArray(ret, char,  height, dx, dy, markDirty)\r\n            dx += char.advance; // advancce is the width of the character\r\n     \r\n          } \r\n        } \r\n        break;\r\n\r\n    case 'right' :\r\n\r\n      for (var i=0;i<textArray.length;i++) {  \r\n        dx = x <= 0.5 ? 0: -width;\r\n        \r\n        // logic here is wordWidth is the max length of word in the wordArray, so if we subtract\r\n        // width of the word we are currently iterating on and then set dx as given below, we \r\n        // will get the exact position from where to start \r\n\r\n        dx+=(wordWidth-widthArray[i]);\r\n        text = textArray[i];\r\n        for (var j=0;j<text.length;j++) {\r\n          const char = this._getChar(text[j], fontStyle, markDirty);\r\n          let horiBearingX = 3;\r\n          dx += horiBearingX;\r\n          // get array of characters\r\n          ret = this._getCharArray(ret, char,  height, dx, dy, markDirty)\r\n          dx += char.advance;\r\n        }\r\n        dy = dy-Math.floor(height/3);\r\n      }\r\n      break;\r\n\r\n    case 'center' :\r\n\r\n      for (var i=0;i<textArray.length;i++) {      \r\n        dx = x <= 0.5 ? 0: -width;\r\n        dx+=(wordWidth-widthArray[i])/2;\r\n        text = textArray[i];\r\n        for (var j=0;j<text.length;j++) {\r\n          const char = this._getChar(text[j], fontStyle, markDirty);\r\n          let horiBearingX = 3;\r\n          dx += horiBearingX;\r\n          ret = this._getCharArray(ret, char,  height, dx, dy, markDirty)\r\n          \r\n          dx += char.advance;\r\n        } \r\n        dy = dy-Math.floor(height/3);\r\n      }\r\n      break;\r\n      }\r\n  return ret;\r\n  }\r\n  /**\r\n   * Updates the 'texture' member variable of this.atlas object\r\n   *\r\n   * markDirty = ??? callback to be called if the size of the texture is resized\r\n   */\r\n  _getChar(character, fontStyle, markDirty) {\r\n    // curFont is same as style.pbf defined above\r\n    // TODO: We are doing this too many times in this code. Find a better mech.\r\n    const font = this.curFont;\r\n    const spriteGenerator = new SpriteGenerator(fontStyle);\r\n   // charCodeAt returns an integer between 0 and 65535 representing the UTF-16 code unit\r\n   // refer https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\r\n\r\n    const glyphID = character.charCodeAt(0);\r\n\r\n    // Padding around the glyph\r\n    const buffer = 0;\r\n\r\n    const cache = (this._cachedGlyphs[font] || (this._cachedGlyphs[font] = {}));\r\n    const glyph = (cache[glyphID] && cache[glyphID].glyph) || spriteGenerator.draw(character);\r\n    \r\n    // Testing code for new developer, if stuck, uncomment the lines below \r\n    // The code below renders a testing canvas with first alphabet it encounters , value of t is in sdf.html\r\n    // if you want to show more alphabets , just increase \"t\" in sdf.html and \r\n    // change ctx.putImageData(imgData, 10, 20); to something variable\r\n\r\n    // if(document.getElementById(\"test-canvas\") && typeof t !== \"undefined\" && t>0) {\r\n    //   const imgData = spriteGenerator._makeRGBAImageData(glyph.bitmap, glyph.width, glyph.height);\r\n    //   const testCanvas = document.getElementById(\"test-canvas\");\r\n    //   const ctx = testCanvas.getContext(\"2d\");\r\n    //   ctx.putImageData(imgData, 10, 20);\r\n    //   --t;\r\n    // }\r\n    \r\n    // After uncommenting the lines above , comment the \"if\" code below, this might help in debugging \r\n\r\n    if((document.getElementById(\"test-canvas\") && typeof t === \"undefined\") || (document.getElementById(\"test-canvas\") && t)) {\r\n\r\n      const testCanvas = document.getElementById(\"test-canvas\");\r\n      testCanvas.width = 0;\r\n      testCanvas.height = 0;\r\n    }\r\n\r\n    const fontSize = spriteGenerator.fontSize;\r\n    \r\n    if (!this._rects[font]) this._rects[font] = {};\r\n    let rect = this._rects[font][character] = this.atlas.addGlyph(\r\n      glyphID, // character id\r\n      this.curFont, // contains url of the font file on server\r\n      glyph, // glyph object\r\n      buffer, // padding\r\n      fontSize, // fontSize\r\n      markDirty, // callback function to be called if texture resizes\r\n    );\r\n\r\n    return (\r\n      cache[glyphID] ||\r\n      (cache[glyphID] = new SimpleGlyph(\r\n        glyph,\r\n        rect,\r\n        buffer)\r\n      )\r\n    );\r\n  }\r\n\r\n  get(text, x, y,markDirty) {\r\n    const fontStyle = this.fontStyle;\r\n    let alignment = fontStyle.alignment;\r\n    let wordWidth = 0;\r\n    let width = 0;\r\n    let height = 0;\r\n    let widthArray = [];\r\n    const horiBearingX = 3;\r\n    const horiBearingY = 2;\r\n    //replaces the multiple space characters in the text with a single space\r\n    text = text.replace(/\\s+/g, ' ');\r\n    for (let i = 0; i < text.length; i++) {\r\n      \r\n      \r\n      const char = this._getChar(text[i], fontStyle, markDirty);\r\n      const rect = char.rect || {};\r\n      \r\n     // Initially in the \"get\" function , height is undefined so , height = 0 , now rect.h and char.top\r\n     //decide the height and then max of them is taken each time to have a max height that fits each char\r\n\r\n     height = Math.max(height, rect.h - char.top);\r\n      wordWidth+=text[i] === ' '? 0 : char.advance + horiBearingX;\r\n      // highest word length would be selected as the width\r\n      if ((text[i] === ' ' || i == text.length-1 )) {\r\n        width = wordWidth > width ? wordWidth : width\r\n        widthArray.push(wordWidth)\r\n        wordWidth = 0\r\n      }\r\n     \r\n    }\r\n    \r\n    let ret = this.alignText(alignment, text, x, y, width, height, markDirty, widthArray, width, fontStyle)\r\n   return ret\r\n  }\r\n\r\n  steps(text) {\r\n    return text.length;\r\n  }\r\n\r\n  bind() {\r\n    this.atlas.updateTexture(this._gl);\r\n  }\r\n};\r\n","'use strict';\r\n\r\nimport ShelfPack from 'shelf-pack';\r\n\r\n// size of the spritesheet generated in pixels\r\nconst DEFAULT_SIZE = 1024;\r\n\r\n// multiplication factor by which spritesheet can grow, if shelfpack is full\r\nconst SIZE_GROWTH_RATE = 4;\r\n\r\n// max size to contain all the characters in the spritesheet\r\n// must be \"DEFAULT_SIZE * SIZE_GROWTH_RATE ^ n\" for some integer n\r\nconst MAX_SIZE = 2048;\r\n\r\nexport default class GlyphAtlas {\r\n    constructor(gl, resetCache) {\r\n\r\n        // setting width to default\r\n        this.width = DEFAULT_SIZE;\r\n\r\n        // setting height to default\r\n        this.height = DEFAULT_SIZE;\r\n\r\n        // resets cached glyphs in sdf.js before making resize() call\r\n        this._resetCache = resetCache;\r\n\r\n        // creating an empty spritesheet to pack glyphs\r\n        this.bin = new ShelfPack(this.width, this.height);\r\n\r\n        /**\r\n         * stores information coordinate about character\r\n         *\r\n         * (Object):\r\n         *  \"fontstring#charid\": {\r\n         *      id, x, y, h, w, maxh, maxw, ref_count\r\n         *  }\r\n         */\r\n        this.index = {};\r\n\r\n        /**\r\n         * stores list of character ids available in atlas.js\r\n         *\r\n         * (Object):\r\n         *  \"fontstring#charid\": [\"charid\"]\r\n         */\r\n        this.ids = {};\r\n\r\n        // webgl rendering context\r\n        this.gl = gl;\r\n\r\n        // initialized to empty Uint8Array buffer to store texture data\r\n        this.data = new Uint8Array(this.width * this.height);\r\n    }\r\n\r\n\r\n    // refreshes texture of characters when updateTexture() is called\r\n    _createTexture() {\r\n        //\r\n        this.dirty = false;\r\n\r\n        // standard creation of webgl texture\r\n        let gl = this.gl;\r\n        let texture = gl.createTexture();\r\n        // binds texture buffer to the target (gl.TEXTURE_2D = a 2 dimensional texture)\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n        /**\r\n         * pixelStorei() (Func): specifies the pixel storage modes\r\n         * UNPACK_FLIP_Y_WEBGL (Parameter): Flips the source data along its vertical axis if true.\r\n         */\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n        // standard interpolation Filters\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        // specifies a two-dimensional image for texture buffer stored in variable named \"texture\"\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D, // target: A two-dimensional texture\r\n            0, // level of detail: 0 = base image level; n = nth mipmap reduction level\r\n            gl.ALPHA, // internalFormat: only reads the alpha component\r\n            this.width, // width\r\n            this.height, // height\r\n            0, // border\r\n            gl.ALPHA, // format\r\n            gl.UNSIGNED_BYTE, // type\r\n            this.data // ImageData object\r\n        );\r\n\r\n\r\n        // Unbinding the buffer channel\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n        // returning so formed texture\r\n        return texture;\r\n    }\r\n\r\n    // utility function that returns list of glyphs added\r\n    getGlyphs() {\r\n        const glyphs = {};\r\n        let split,\r\n            name,\r\n            id;\r\n\r\n        for (const key in this.ids) {\r\n            split = key.split('#');\r\n            name = split[0];\r\n            id = split[1];\r\n\r\n            if (!glyphs[name]) glyphs[name] = [];\r\n            glyphs[name].push(id);\r\n        }\r\n        return glyphs;\r\n    }\r\n\r\n    // utility function that returns list of rects added\r\n    getRects() {\r\n        const rects = {};\r\n        let split,\r\n            name,\r\n            id;\r\n\r\n        for (const key in this.ids) {\r\n            split = key.split('#');\r\n            name = split[0];\r\n            id = split[1];\r\n\r\n            if (!rects[name]) rects[name] = {};\r\n            rects[name][id] = this.index[key];\r\n        }\r\n        return rects;\r\n    }\r\n\r\n    // main function of the module called from sdf.js\r\n    addGlyph(\r\n        id, // character id\r\n        name, // name of the font - \"fontstrong#range.pbf\"\r\n        glyph, // glyph object from sdf.js\r\n        buffer, // padding around glyph\r\n        fontSize,\r\n        markDirty //\r\n    ) {\r\n        if (!glyph) return null;\r\n\r\n        // compiles 'name' and glyph.id into a single string with a seperator '#'\r\n        const key = `${name}#${glyph.id}`;\r\n\r\n        // if key is present in index and not present in ids then add it in ids\r\n        if (this.index[key]) {\r\n            if (this.ids[key].indexOf(id) < 0) {\r\n                this.ids[key].push(id);\r\n            }\r\n            return this.index[key];\r\n        }\r\n\r\n        const bufferedWidth = glyph.width + buffer * 2;\r\n        const bufferedHeight = glyph.height + buffer * 2;\r\n\r\n        // Add a 1px border around every image.\r\n        // 'padding' variable is basically border\r\n        // buffer variable is basically padding\r\n        const padding = Math.floor( Math.pow( Math.ceil(fontSize/7), 2));\r\n        // const padding = 12;\r\n        let packWidth = bufferedWidth + 2 * padding;\r\n        let packHeight = bufferedHeight + 2 * padding;\r\n\r\n        // Increase to next number divisible by 4, but at least 1.\r\n        // This is so we can scale down the texture coordinates and pack them into fewer bytes\r\n        packWidth += (4 - packWidth % 4);\r\n        packHeight += (4 - packHeight % 4);\r\n\r\n        let rect = this.bin.packOne(packWidth, packHeight);\r\n\r\n        // if the current size is not sufficient to contain all the characters in the texture\r\n        // then, expand (resize) it\r\n        if (!rect) {\r\n            this.resize();\r\n            rect = this.bin.packOne(packWidth, packHeight);\r\n            // if markDirty callback was passed then execute it\r\n            markDirty && markDirty();\r\n        }\r\n\r\n        // if still not found then there is some problem, simply return null to indicate problem\r\n        if (!rect) {\r\n            return null;\r\n        }\r\n\r\n\r\n        this.index[key] = rect;\r\n        this.ids[key] = [id];\r\n\r\n        // if bitmap corresponding to the glyph object exists then, add the glyph\r\n        if (glyph.bitmap) {\r\n            const target = this.data;\r\n            const source = glyph.bitmap;\r\n            for (let y = 0; y < bufferedHeight; y++) {\r\n                const y1 = this.width * (rect.y + y + padding) + rect.x + padding;\r\n                const y2 = bufferedWidth * y;\r\n                for (let x = 0; x < bufferedWidth; x++) {\r\n                    target[y1 + x] = source[y2 + x];\r\n                }\r\n            }\r\n        }\r\n        this.dirty = true;\r\n        return rect;\r\n    }\r\n\r\n    // expands the size of the texture if all the characters were not contained in default size\r\n    resize() {\r\n        const prevWidth = this.width;\r\n        const prevHeight = this.height;\r\n\r\n        if (prevWidth >= MAX_SIZE || prevHeight >= MAX_SIZE) return;\r\n\r\n        if (this._texture) {\r\n            if (this.gl) {\r\n                this.gl.deleteTexture(this._texture);\r\n            }\r\n            this._texture = null;\r\n        }\r\n\r\n        this.width *= SIZE_GROWTH_RATE;\r\n        this.height *= SIZE_GROWTH_RATE;\r\n        this.bin.resize(this.width, this.height);\r\n\r\n        const buf = new ArrayBuffer(this.width * this.height);\r\n        for (let i = 0; i < prevHeight; i++) {\r\n            const src = new Uint8Array(this.data.buffer, prevHeight * i, prevWidth);\r\n            const dst = new Uint8Array(buf, prevHeight * i * SIZE_GROWTH_RATE, prevWidth);\r\n            dst.set(src);\r\n        }\r\n        this.data = new Uint8Array(buf);\r\n        this._resetCache();\r\n    }\r\n\r\n    bind(gl) {\r\n    }\r\n\r\n    // getter of texture from GlyphAtlas object\r\n    get texture() {\r\n        return this._texture;\r\n    }\r\n\r\n    updateTexture() {\r\n        let gl = this.gl;\r\n        if (!this._texture) {\r\n            this._texture = this._createTexture();\r\n        }\r\n\r\n        // if dirty functionality is true then:\r\n        if (this.dirty) {\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n            // specifies a sub - rectangle of the current texture\r\n            gl.texSubImage2D(\r\n                gl.TEXTURE_2D,\r\n                0,\r\n                0,\r\n                0,\r\n                this.width,\r\n                this.height,\r\n                gl.ALPHA,\r\n                gl.UNSIGNED_BYTE,\r\n                this.data\r\n            );\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n            this.dirty = false;\r\n        }\r\n        return this._texture;\r\n    }\r\n};\r\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ShelfPack = factory());\n}(this, function () {\n\n/**\n * Create a new ShelfPack bin allocator.\n *\n * Uses the Shelf Best Height Fit algorithm from\n * http://clb.demon.fi/files/RectangleBinPack.pdf\n *\n * @class  ShelfPack\n * @param  {number}  [w=64]  Initial width of the sprite\n * @param  {number}  [h=64]  Initial width of the sprite\n * @param  {Object}  [options]\n * @param  {boolean} [options.autoResize=false]  If `true`, the sprite will automatically grow\n * @example\n * var sprite = new ShelfPack(64, 64, { autoResize: false });\n */\nfunction ShelfPack(w, h, options) {\n    options = options || {};\n    this.w = w || 64;\n    this.h = h || 64;\n    this.autoResize = !!options.autoResize;\n    this.shelves = [];\n    this.freebins = [];\n    this.stats = {};\n    this.bins = {};\n    this.maxId = 0;\n}\n\n\n/**\n * Batch pack multiple bins into the sprite.\n *\n * @param   {Object[]} bins       Array of requested bins - each object should have `width`, `height` (or `w`, `h`) properties\n * @param   {number}   bins[].w   Requested bin width\n * @param   {number}   bins[].h   Requested bin height\n * @param   {Object}   [options]\n * @param   {boolean}  [options.inPlace=false] If `true`, the supplied bin objects will be updated inplace with `x` and `y` properties\n * @returns {Bin[]}    Array of allocated Bins - each Bin is an object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var bins = [\n *     { id: 1, w: 12, h: 12 },\n *     { id: 2, w: 12, h: 16 },\n *     { id: 3, w: 12, h: 24 }\n * ];\n * var results = sprite.pack(bins, { inPlace: false });\n */\nShelfPack.prototype.pack = function(bins, options) {\n    bins = [].concat(bins);\n    options = options || {};\n\n    var results = [],\n        w, h, id, allocation;\n\n    for (var i = 0; i < bins.length; i++) {\n        w  = bins[i].w || bins[i].width;\n        h  = bins[i].h || bins[i].height;\n        id = bins[i].id;\n\n        if (w && h) {\n            allocation = this.packOne(w, h, id);\n            if (!allocation) {\n                continue;\n            }\n            if (options.inPlace) {\n                bins[i].x  = allocation.x;\n                bins[i].y  = allocation.y;\n                bins[i].id = allocation.id;\n            }\n            results.push(allocation);\n        }\n    }\n\n    // Shrink the width/height of the sprite to the bare minimum.\n    // Since shelf-pack doubles first width, then height when running out of shelf space\n    // this can result in fairly large unused space both in width and height if that happens\n    // towards the end of bin packing.\n    if (this.shelves.length > 0) {\n        var w2 = 0;\n        var h2 = 0;\n\n        for (var j = 0; j < this.shelves.length; j++) {\n            var shelf = this.shelves[j];\n            h2 += shelf.h;\n            w2 = Math.max(shelf.w - shelf.free, w2);\n        }\n\n        this.resize(w2, h2);\n    }\n\n    return results;\n};\n\n\n/**\n * Pack a single bin into the sprite.\n *\n * Each bin will have a unique identitifer.\n * If no identifier is supplied in the `id` parameter, one will be created.\n * Note: The supplied `id` is used as an object index, so numeric values are fastest!\n *\n * Bins are automatically refcounted (i.e. a newly packed Bin will have a refcount of 1).\n * When a bin is no longer needed, use the `ShelfPack.unref` function to mark it\n *   as unused.  When a Bin's refcount decrements to 0, the Bin will be marked\n *   as free and its space may be reused by the packing code.\n *\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  [id]   Unique identifier for this bin, (if unsupplied, assume it's a new bin and create an id)\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties, or `null` if allocation failed\n * @example\n * var results = sprite.packOne(12, 16, 'a');\n */\nShelfPack.prototype.packOne = function(w, h, id) {\n    var best = { freebin: -1, shelf: -1, waste: Infinity },\n        y = 0,\n        bin, shelf, waste, i;\n\n    // if id was supplied, attempt a lookup..\n    if (typeof id === 'string' || typeof id === 'number') {\n        bin = this.getBin(id);\n        if (bin) {              // we packed this bin already\n            this.ref(bin);\n            return bin;\n        }\n        if (typeof id === 'number') {\n            this.maxId = Math.max(id, this.maxId);\n        }\n    } else {\n        id = ++this.maxId;\n    }\n\n    // First try to reuse a free bin..\n    for (i = 0; i < this.freebins.length; i++) {\n        bin = this.freebins[i];\n\n        // exactly the right height and width, use it..\n        if (h === bin.maxh && w === bin.maxw) {\n            return this.allocFreebin(i, w, h, id);\n        }\n        // not enough height or width, skip it..\n        if (h > bin.maxh || w > bin.maxw) {\n            continue;\n        }\n        // extra height or width, minimize wasted area..\n        if (h <= bin.maxh && w <= bin.maxw) {\n            waste = (bin.maxw * bin.maxh) - (w * h);\n            if (waste < best.waste) {\n                best.waste = waste;\n                best.freebin = i;\n            }\n        }\n    }\n\n    // Next find the best shelf..\n    for (i = 0; i < this.shelves.length; i++) {\n        shelf = this.shelves[i];\n        y += shelf.h;\n\n        // not enough width on this shelf, skip it..\n        if (w > shelf.free) {\n            continue;\n        }\n        // exactly the right height, pack it..\n        if (h === shelf.h) {\n            return this.allocShelf(i, w, h, id);\n        }\n        // not enough height, skip it..\n        if (h > shelf.h) {\n            continue;\n        }\n        // extra height, minimize wasted area..\n        if (h < shelf.h) {\n            waste = (shelf.h - h) * w;\n            if (waste < best.waste) {\n                best.freebin = -1;\n                best.waste = waste;\n                best.shelf = i;\n            }\n        }\n    }\n\n    if (best.freebin !== -1) {\n        return this.allocFreebin(best.freebin, w, h, id);\n    }\n\n    if (best.shelf !== -1) {\n        return this.allocShelf(best.shelf, w, h, id);\n    }\n\n    // No free bins or shelves.. add shelf..\n    if (h <= (this.h - y) && w <= this.w) {\n        shelf = new Shelf(y, this.w, h);\n        return this.allocShelf(this.shelves.push(shelf) - 1, w, h, id);\n    }\n\n    // No room for more shelves..\n    // If `autoResize` option is set, grow the sprite as follows:\n    //  * double whichever sprite dimension is smaller (`w1` or `h1`)\n    //  * if sprite dimensions are equal, grow width before height\n    //  * accomodate very large bin requests (big `w` or `h`)\n    if (this.autoResize) {\n        var h1, h2, w1, w2;\n\n        h1 = h2 = this.h;\n        w1 = w2 = this.w;\n\n        if (w1 <= h1 || w > w1) {   // grow width..\n            w2 = Math.max(w, w1) * 2;\n        }\n        if (h1 < w1 || h > h1) {    // grow height..\n            h2 = Math.max(h, h1) * 2;\n        }\n\n        this.resize(w2, h2);\n        return this.packOne(w, h, id);  // retry\n    }\n\n    return null;\n};\n\n\n/**\n * Called by packOne() to allocate a bin by reusing an existing freebin\n *\n * @private\n * @param    {number}         index  Index into the `this.freebins` array\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  id     Unique identifier for this bin\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var bin = sprite.allocFreebin(0, 12, 16, 'a');\n */\nShelfPack.prototype.allocFreebin = function (index, w, h, id) {\n    var bin = this.freebins.splice(index, 1)[0];\n    bin.id = id;\n    bin.w = w;\n    bin.h = h;\n    bin.refcount = 0;\n    this.bins[id] = bin;\n    this.ref(bin);\n    return bin;\n};\n\n\n/**\n * Called by `packOne() to allocate bin on an existing shelf\n *\n * @private\n * @param    {number}         index  Index into the `this.shelves` array\n * @param    {number}         w      Width of the bin to allocate\n * @param    {number}         h      Height of the bin to allocate\n * @param    {number|string}  id     Unique identifier for this bin\n * @returns  {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties\n * @example\n * var results = sprite.allocShelf(0, 12, 16, 'a');\n */\nShelfPack.prototype.allocShelf = function(index, w, h, id) {\n    var shelf = this.shelves[index];\n    var bin = shelf.alloc(w, h, id);\n    this.bins[id] = bin;\n    this.ref(bin);\n    return bin;\n};\n\n\n/**\n * Return a packed bin given its id, or undefined if the id is not found\n *\n * @param    {number|string}  id  Unique identifier for this bin,\n * @returns  {Bin}            The requested bin, or undefined if not yet packed\n * @example\n * var b = sprite.getBin('a');\n */\nShelfPack.prototype.getBin = function(id) {\n    return this.bins[id];\n};\n\n\n/**\n * Increment the ref count of a bin and update statistics.\n *\n * @param    {Bin}     bin  Bin instance\n * @returns  {number}  New refcount of the bin\n * @example\n * var bin = sprite.getBin('a');\n * sprite.ref(bin);\n */\nShelfPack.prototype.ref = function(bin) {\n    if (++bin.refcount === 1) {   // a new Bin.. record height in stats historgram..\n        var h = bin.h;\n        this.stats[h] = (this.stats[h] | 0) + 1;\n    }\n\n    return bin.refcount;\n};\n\n\n/**\n * Decrement the ref count of a bin and update statistics.\n * The bin will be automatically marked as free space once the refcount reaches 0.\n *\n * @param    {Bin}     bin  Bin instance\n * @returns  {number}  New refcount of the bin\n * @example\n * var bin = sprite.getBin('a');\n * sprite.unref(bin);\n */\nShelfPack.prototype.unref = function(bin) {\n    if (bin.refcount === 0) {\n        return 0;\n    }\n\n    if (--bin.refcount === 0) {\n        this.stats[bin.h]--;\n        delete this.bins[bin.id];\n        this.freebins.push(bin);\n    }\n\n    return bin.refcount;\n};\n\n\n/**\n * Clear the sprite.  Resets everything and resets statistics.\n *\n * @example\n * sprite.clear();\n */\nShelfPack.prototype.clear = function() {\n    this.shelves = [];\n    this.freebins = [];\n    this.stats = {};\n    this.bins = {};\n    this.maxId = 0;\n};\n\n\n/**\n * Resize the sprite.\n *\n * @param   {number}  w  Requested new sprite width\n * @param   {number}  h  Requested new sprite height\n * @returns {boolean} `true` if resize succeeded, `false` if failed\n * @example\n * sprite.resize(256, 256);\n */\nShelfPack.prototype.resize = function(w, h) {\n    this.w = w;\n    this.h = h;\n    for (var i = 0; i < this.shelves.length; i++) {\n        this.shelves[i].resize(w);\n    }\n    return true;\n};\n\n\n/**\n * Create a new Shelf.\n *\n * @private\n * @class  Shelf\n * @param  {number}  y   Top coordinate of the new shelf\n * @param  {number}  w   Width of the new shelf\n * @param  {number}  h   Height of the new shelf\n * @example\n * var shelf = new Shelf(64, 512, 24);\n */\nfunction Shelf(y, w, h) {\n    this.x = 0;\n    this.y = y;\n    this.w = this.free = w;\n    this.h = h;\n}\n\n\n/**\n * Allocate a single bin into the shelf.\n *\n * @private\n * @param   {number}         w   Width of the bin to allocate\n * @param   {number}         h   Height of the bin to allocate\n * @param   {number|string}  id  Unique id of the bin to allocate\n * @returns {Bin}            Bin object with `id`, `x`, `y`, `w`, `h` properties, or `null` if allocation failed\n * @example\n * shelf.alloc(12, 16, 'a');\n */\nShelf.prototype.alloc = function(w, h, id) {\n    if (w > this.free || h > this.h) {\n        return null;\n    }\n    var x = this.x;\n    this.x += w;\n    this.free -= w;\n    return new Bin(id, x, this.y, w, h);\n};\n\n\n/**\n * Resize the shelf.\n *\n * @private\n * @param   {number}  w  Requested new width of the shelf\n * @returns {boolean}    true\n * @example\n * shelf.resize(512);\n */\nShelf.prototype.resize = function(w) {\n    this.free += (w - this.w);\n    this.w = w;\n    return true;\n};\n\n\n/**\n * Create a new Bin object.\n *\n * @class  Bin\n * @param  {number|string}  id  Unique id of the bin\n * @param  {number}         x   Left coordinate of the bin\n * @param  {number}         y   Top coordinate of the bin\n * @param  {number}         w   Width of the bin\n * @param  {number}         h   Height of the bin\n * @example\n * var bin = new Bin('a', 0, 0, 12, 16);\n */\nfunction Bin(id, x, y, w, h) {\n    this.id = id;\n    this.x  = x;\n    this.y  = y;\n    this.w  = w;\n    this.h  = h;\n    this.maxw = w;\n    this.maxh = h;\n    this.refcount = 0;\n}\n\nreturn ShelfPack;\n\n}));","import Trimmer from './glyphTrimmer';\r\n\r\nvar INF = 1e20;\r\n\r\nexport default class SpriteGenerator {\r\n\r\n    constructor(fontStyle) {\r\n        // Member variables for configurations for font-style and box of the font\r\n        const textSize = fontStyle.size || 23;\r\n        this.fontSize = Math.round(textSize / 4) * 4;\r\n        // Whitespace buffer around a glyph in pixels \r\n        //TODO : Add more information about this.buffer\r\n        this.buffer = this.fontSize / 8;\r\n        // How many pixels around the glyph shape to use for encoding distance. Bigger radius can have more halo effect.\r\n        // Refer http://www.supergeotek.com/SP_ENG_HTML/label.htm for halo effect\r\n        this.radius = this.fontSize / 3;\r\n        this.cutoff = 0.25;\r\n        this.strokeText = fontStyle.strokeText || false;\r\n        this.fontFamily = fontStyle.family || 'sans-serif';\r\n        // this.fontFamily = 'sans-serif';\r\n        // this.fontFamily = 'vedana';\r\n        // this.fontFamily = 'arial';\r\n        this.fontWeight = fontStyle.weight || 'normal';\r\n        // this.fontWeight = 'normal';\r\n        // this.fontWeight = 'bold';\r\n        // Size of one box of character\r\n        let size = this.size = this.fontSize + this.buffer * 2;\r\n\r\n        // Member varaibles for single canvas element on which single character is to be drawn\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = this.canvas.height = size;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.ctx.font = this.fontWeight + ' ' + this.fontSize + 'px ' + this.fontFamily;\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillStyle = 'black';\r\n        \r\n        // Work-around: https://bugzilla.mozilla.org/show_bug.cgi?id=737852\r\n        this.middle = Math.round((size / 2) * (navigator.userAgent.indexOf('Gecko/') >= 0 ? 1.2 : 1));\r\n\r\n\r\n        // Member variables for temp arrays required for the distance transform\r\n        this.gridOuter = new Float64Array(size * size);\r\n        this.gridInner = new Float64Array(size * size);\r\n        this.f = new Float64Array(size);\r\n        this.z = new Float64Array(size + 1);\r\n        this.v = new Uint16Array(size);\r\n\r\n        // Glyph Trimmer\r\n        this.trimmer = new Trimmer(0);\r\n        this.count = 1;\r\n    }\r\n\r\n    // Convert alpha-only to RGBA so we can use convenient\r\n    // `putImageData` for building the composite bitmap\r\n\r\n    _makeRGBAImageData(alphaChannel, width, height) {\r\n        let imageData = this.ctx.createImageData(width, height);\r\n        let data = imageData.data;\r\n        for (let i = 0; i < alphaChannel.length; i++) {\r\n            data[4 * i + 0] = alphaChannel[i];\r\n            data[4 * i + 1] = alphaChannel[i];\r\n            data[4 * i + 2] = alphaChannel[i];\r\n            data[4 * i + 3] = 255;\r\n        }\r\n        return imageData;\r\n    }\r\n\r\n    // Returns the alpha channel for a single character\r\n    draw(char) {\r\n        // Clear the area and draw the glyph\r\n        this.ctx.clearRect(0, 0, this.size, this.size);\r\n        this.strokeText ? this.ctx.strokeText(char, this.buffer, this.middle) : this.ctx.fillText(char, this.buffer, this.middle)\r\n        let imgData = this.ctx.getImageData(0, 0, this.size, this.size);\r\n        let alphaChannel = new Uint8ClampedArray(this.size * this.size);\r\n\r\n        for (let i = 0; i < this.size * this.size; i++) {\r\n            let a = imgData.data[i * 4 + 3] / 255; // alpha value\r\n            this.gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2);\r\n            this.gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);\r\n        }\r\n\r\n        this._edt(this.gridOuter, this.size, this.size, this.f, this.v, this.z);\r\n        this._edt(this.gridInner, this.size, this.size, this.f, this.v, this.z);\r\n\r\n        for (let i = 0; i < this.size * this.size; i++) {\r\n            var d = Math.sqrt(this.gridOuter[i]) - Math.sqrt(this.gridInner[i]);\r\n            alphaChannel[i] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));\r\n        }\r\n\r\n        const glyph = {\r\n            id: char.charCodeAt(0),\r\n            bitmap: alphaChannel,\r\n            left: 0,\r\n            top: 0,\r\n            width: this.size,\r\n            height: this.size,\r\n            advance: 4, // width\r\n        };\r\n        \r\n        if(glyph.id !== 32) {\r\n            this.trimmer.process(glyph);\r\n        }\r\n\r\n        // TODO: Delete this debugging code\r\n        if (glyph.id == 65 && this.count) {\r\n            const glyphData = glyph.bitmap;\r\n            const numCols = glyph.width;\r\n            let t = [];\r\n            // iterate through every row\r\n            for (let i = 0; i < glyphData.length; i += numCols) {\r\n                // slice out the array\r\n                t.push(Array.from(glyphData.slice(i, i + numCols)));\r\n            }\r\n            this.count--;\r\n        }\r\n        return glyph;\r\n    }\r\n\r\n    // 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\r\n    \r\n    _edt(data, width, height, f, v, z) {\r\n    for (var x = 0; x < width; x++) this._edt1d(data, x, width, height, f, v, z);\r\n    for (var y = 0; y < height; y++) this._edt1d(data, y * width, 1, width, f, v, z);\r\n    }\r\n\r\n    // 1D squared distance transform\r\n    \r\n    _edt1d(grid, offset, stride, length, f, v, z) {\r\n    var q, k, s, r;\r\n    v[0] = 0;\r\n    z[0] = -INF;\r\n    z[1] = INF;\r\n\r\n    for (q = 0; q < length; q++) f[q] = grid[offset + q * stride];\r\n\r\n    for (q = 1, k = 0, s = 0; q < length; q++) {\r\n        do {\r\n            r = v[k];\r\n            s = (f[q] - f[r] + q * q - r * r) / (q - r) / 2;\r\n        } while (s <= z[k--]);\r\n\r\n        k += 2;\r\n        v[k] = q;\r\n        z[k] = s;\r\n        z[k + 1] = INF;\r\n    }\r\n\r\n    for (q = 0, k = 0; q < length; q++) {\r\n        while (z[k + 1] < q) k++;\r\n        r = v[k];\r\n        grid[offset + q * stride] = f[r] + (q - r) * (q - r);\r\n        }\r\n    }\r\n} \r\n","/* Algorithm to trim the glyph and add padding to it */\r\n// Finding absolute left bound (lb) and right bound (rb) of the glyph\r\n// Slicing the extra columns\r\n// Adding buffer space on the sides\r\n\r\nexport default class {\r\n    constructor(buffer) {\r\n        if (buffer == undefined) this.buffer = 0;\r\n        else this.buffer = buffer;\r\n    }\r\n    \r\n    // find lb and rb of single row\r\n    _findRowBounds(a) { // a == array\r\n        let lb = 0, // left bound of individual row\r\n            rb = 0; // right bound of individual row\r\n        \r\n        const threshold = 170;\r\n            \r\n        for (let i = 0; i < a.length; i++) {\r\n            if (a[i] > threshold) {\r\n                lb = i;\r\n                break;\r\n            }\r\n        }\r\n        if (!lb) lb = a.length;\r\n\r\n        for (let i = a.length; i > -1; i--) {\r\n            if (a[i] > threshold) {\r\n                rb = i;\r\n                break;\r\n            }\r\n        }\r\n        if (!rb) rb = -1;\r\n\r\n        return [lb, rb];\r\n    }\r\n\r\n    _findGlyphBounds(glyph) {\r\n        const glyphData = glyph.bitmap;\r\n        const numCols = glyph.width;\r\n        let currentRow = [];\r\n\r\n        let lbs = [], // row left bounds\r\n            rbs = []; // row right bounds    \r\n        let lb = -1,\r\n            rb = glyphData.length;\r\n        \r\n        // iterate through every row\r\n        for (let i = 0; i < glyphData.length; i += numCols) {\r\n            // slice out the array\r\n            currentRow = glyphData.slice(i, i + numCols)\r\n            var res = this._findRowBounds(currentRow);\r\n            lbs.push(res[0]);\r\n            rbs.push(res[1]);\r\n        }\r\n\r\n        // choose the min(lbs) and max(rbs) as absolute lb and rb\r\n        lb = Math.min(...lbs);\r\n        rb = Math.max(...rbs);\r\n        // if (lb >= numCols || rb < 0) throw \"Glyph is empty\";\r\n        return [lb, rb];\r\n    }\r\n\r\n    process(glyph) {\r\n        const glyphData = glyph.bitmap;\r\n        const numCols = glyph.width;\r\n\r\n        const bounds = this._findGlyphBounds(glyph);\r\n        const lb = bounds[0];\r\n        const rb = bounds[1];\r\n\r\n        const buffer = this.buffer;\r\n        // const buffer = 20;\r\n        // const buffer = 1;\r\n        // const buffer = 0;\r\n\r\n        var newData = [];\r\n        // var newWidth = (rb - lb + 1) + buffer * 2 + 2;\r\n        var newWidth = (rb - lb + 1) + buffer * 2;\r\n        // var newWidth = (rb - lb + 1);\r\n\r\n        // iterate through every row\r\n        let currentRow = [];\r\n        for (let i = 0; i < glyphData.length; i += numCols) {\r\n            currentRow = glyphData.slice(i, i + numCols)\r\n            const bufferCol = Array.apply(null, Array(buffer)).map(Number.prototype.valueOf, 0);\r\n            newData.push(\r\n                // 255,\r\n                ...bufferCol, //returns array of zeros\r\n                ...currentRow.slice(lb, rb + 1),\r\n                ...bufferCol, //returns array of zeros\r\n                // 255,\r\n            );\r\n        }\r\n\r\n        // JS passes objects by reference. Therefore,\r\n        glyph.bitmap = new Uint8ClampedArray(newData);\r\n        glyph.width = newWidth;\r\n        glyph.advance = newWidth;\r\n    }    \r\n    \r\n} // ends class","/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Authors: David Tichy, Aleš Saska\r\n */\r\n\r\nexport default class {\r\n  constructor(){\r\n    this._enable = true;\r\n  }\r\n\r\n  debounce(func, wait, immediate) {\r\n      let timeout, args, context, timestamp, result;\r\n\r\n      let later = () => {\r\n          let last = Date.now - timestamp;\r\n\r\n          if (last < wait && last > 0) {\r\n              timeout = setTimeout(later, wait - last);\r\n          } else {\r\n              timeout = null;\r\n              if (!immediate) {\r\n                  if(this._enable){\r\n                    result = func.apply(context, args);\r\n                  }\r\n                  if (!timeout) context = args = null;\r\n              }\r\n          }\r\n      };\r\n\r\n      return () => {\r\n          context = this;\r\n          args = arguments;\r\n          timestamp = Date.now;\r\n          let callNow = immediate && !timeout;\r\n          if (!timeout) timeout = setTimeout(later, wait);\r\n          if (callNow) {\r\n              if(this._enable){\r\n                result = func.apply(context, args);\r\n              }\r\n              context = args = null;\r\n          }\r\n\r\n          return result;\r\n      };\r\n  }\r\n  \r\n  disable(){\r\n    this._enable = false;\r\n  }\r\n};","import geomutils from './geomutils';\r\n/**\r\n *  Copyright (c) 2016, Helikar Lab.\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the GPLv3 License.\r\n *  Author: Aleš Saska\r\n */\r\n\r\n\r\nfunction pushUnique(arr, e){\r\n  if(arr.indexOf(e) >= 0)\r\n    return;\r\n  arr.push(e);\r\n}\r\n\r\nexport default class {\r\n  constructor(layers, insertTempLayer, draw, nodes, edges, checkUniqId){\r\n    this._layers = layers;\r\n    this._insertTempLayer = insertTempLayer;\r\n\r\n    this._draw = draw;\r\n    this._nodes = nodes;\r\n    this._edges = edges;\r\n    this._checkUniqId = checkUniqId;\r\n    \r\n    this._toAddEdges = [];\r\n    this._toAddNodes = [];\r\n    this._toRemoveEdges = [];\r\n    this._toRemoveNodes = [];\r\n\r\n    //create support structures\r\n    this._nPos = {};\r\n    this._ePos = {};\r\n    this._eDirs = {};\r\n\r\n    nodes.forEach((n, i) => {\r\n      this._nPos[n.uniqid] = i;\r\n      this._eDirs[n.uniqid] = {};\r\n    });\r\n    \r\n    edges.forEach((e, i) => {\r\n      let s = geomutils.edgeSource(e);\r\n      let t = geomutils.edgeTarget(e);\r\n\r\n      let si = s.uniqid || s.__uniqid;\r\n      let ti = t.uniqid || t.__uniqid;\r\n      (this._eDirs[si] || (this._eDirs[si] = {}))[ti] = e;\r\n      this._ePos[e.uniqid] = i;\r\n    });\r\n    \r\n    this._actualTempNodes = [];\r\n    this._actualTempEdges = [];\r\n  }\r\n  _doRemoveNodes(nodes){\r\n    nodes.forEach((n) => {\r\n      if(n.uniqid === undefined)\r\n        return;\r\n      \r\n      if(this._nPos[n.uniqid] !== undefined){\r\n        //in the normal graph\r\n        let pos = this._nPos[n.uniqid];\r\n        this._layers.main.removeNodeAtPos(pos);\r\n        delete this._nPos[n.uniqid];\r\n      }else{\r\n        //try to remove from temp graph\r\n        \r\n        for(let i = 0; i < this._actualTempNodes.length; i++){\r\n          if(this._actualTempNodes[i] === n){\r\n            this._actualTempNodes.splice(i,1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      n.__uniqid = n.uniqid;\r\n      delete n.uniqid;\r\n    });\r\n  }\r\n  _doRemoveEdges(edges){\r\n    edges.forEach((e) => {\r\n      if(e.uniqid === undefined)\r\n        return;\r\n      \r\n      let s = geomutils.edgeSource(e);\r\n      let t = geomutils.edgeTarget(e);\r\n\r\n      delete (this._eDirs[s.uniqid || s.__uniqid] || {})[t.uniqid || t.__uniqid];\r\n      \r\n      if(this._ePos[e.uniqid] !== undefined){\r\n        //in the normal graph\r\n        let pos = this._ePos[e.uniqid];\r\n        this._layers.main.removeEdgeAtPos(pos);\r\n        delete this._ePos[e.uniqid];\r\n      }else{\r\n        //try to remove from temp graph\r\n        \r\n        for(let i = 0; i < this._actualTempEdges.length; i++){\r\n          if(this._actualTempEdges[i] === e){\r\n            this._actualTempEdges.splice(i,1);\r\n            break;\r\n          }\r\n        }\r\n\r\n      }\r\n      \r\n      e.__uniqid = e.uniqid;\r\n      delete e.uniqid;\r\n    });\r\n  }\r\n  _doAddEdges(){\r\n    this._toAddEdges.forEach((e) => {\r\n      //already added in main graph\r\n      if(\r\n        this._ePos[e.uniqid] !== undefined\r\n      ){\r\n        this._doRemoveEdges([e]);\r\n      }\r\n      \r\n      if(e.uniqid !== undefined){\r\n        console.error(e);\r\n        console.error(\"This edge has been already added, if you want to add same edge twice, create new object with same properties\");\r\n        return;\r\n      }\r\n      this._checkUniqId(e);\r\n      \r\n      //add this node into temporary chart\r\n      \r\n      //TODO: Not so efficient >> causes quadratic complexity of adding edges into temporary graph\r\n      pushUnique(this._actualTempEdges, e);\r\n    });\r\n  }\r\n  _doAddNodes(nodes){\r\n    this._toAddNodes.forEach((n) => {\r\n      if(this._nPos[n.uniqid] !== undefined){\r\n        this._doRemoveNodes([n]);\r\n      }\r\n      \r\n      //already added\r\n      if(n.uniqid !== undefined){\r\n        console.error(n);\r\n        console.error(\"This node has been already added, if you want to add same node twice, create new object with same properties\");\r\n        return;\r\n      }\r\n      this._checkUniqId(n);\r\n      \r\n      this._eDirs[n.uniqid] = {};\r\n\r\n      //TODO: Not so efficient >> causes quadratic complexity of adding nodes into temporary graph\r\n      pushUnique(this._actualTempNodes, n);\r\n    });\r\n  }\r\n  addEdge(e){\r\n    let s = geomutils.edgeSource(e);\r\n    let t = geomutils.edgeTarget(e);\r\n    \r\n    let tid = t.uniqid || t.__uniqid;\r\n    let sid = s.uniqid || s.__uniqid;\r\n    \r\n    if((this._eDirs[sid] || {})[tid]){\r\n      //this edge was already added >> remove it\r\n      this._doRemoveEdges([e]);\r\n    }\r\n    \r\n    if((this._eDirs[tid] || {})[sid]){\r\n      //must remove line and add two curves\r\n      \r\n      this._toAddEdges.push(this._eDirs[tid][sid]);\r\n      this._doRemoveEdges([this._eDirs[tid][sid]]);\r\n\r\n      this._toAddEdges.push(this._eDirs[sid][tid] = e);\r\n      \r\n      return this;\r\n    }\r\n\r\n    this._toAddEdges.push(e);\r\n    return this;\r\n  }\r\n  addNode(n){\r\n    this._toAddNodes.push(n);    \r\n    return this;\r\n  }\r\n  removeNode(n){\r\n    this._toRemoveNodes.push(n);    \r\n    return this;\r\n  }\r\n  removeEdge(e){\r\n    this._toRemoveEdges.push(e);\r\n    return this;\r\n  }\r\n  applyChanges(){\r\n    \r\n    //nothing to do\r\n    if(this._toRemoveEdges.length === 0 && this._toRemoveNodes.length === 0 && this._toAddEdges.length === 0 && this._toAddNodes.length === 0)\r\n      return this;\r\n    \r\n    this._actualTempNodes = this._layers.temp ? this._layers.temp.nodes : [];\r\n    this._actualTempEdges = this._layers.temp ? this._layers.temp.edges : [];\r\n    \r\n    this._doRemoveEdges(this._toRemoveEdges);\r\n    this._doRemoveNodes(this._toRemoveNodes);\r\n    this._doAddNodes();\r\n    this._doAddEdges();\r\n    \r\n    this._toAddEdges = [];\r\n    this._toAddNodes = [];\r\n    this._toRemoveEdges = [];\r\n    this._toRemoveNodes = [];\r\n    \r\n    this._insertTempLayer();\r\n    this._layers.temp.set(this._actualTempNodes, this._actualTempEdges);\r\n\r\n    this._draw();\r\n    \r\n    return this;\r\n  }\r\n};","/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function max(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var max = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] > max) max = input[i];\n    }\n    return max;\n}\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nexport default function rescale(input, options = {}) {\n    if (!Array.isArray(input)) {\n        throw new TypeError('input must be an array');\n    } else if (input.length === 0) {\n        throw new TypeError('input must not be empty');\n    }\n\n    let output;\n    if (options.output !== undefined) {\n        if (!Array.isArray(options.output)) {\n            throw new TypeError('output option must be an array if specified');\n        }\n        output = options.output;\n    } else {\n        output = new Array(input.length);\n    }\n\n    const currentMin = min(input);\n    const currentMax = max(input);\n\n    if (currentMin === currentMax) {\n        throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n    }\n\n    const {\n        min: minValue = options.autoMinMax ? currentMin : 0,\n        max: maxValue = options.autoMinMax ? currentMax : 1\n    } = options;\n\n    if (minValue >= maxValue) {\n        throw new RangeError('min option must be smaller than max option');\n    }\n\n    const factor = (maxValue - minValue) / (currentMax - currentMin);\n    for (var i = 0; i < input.length; i++) {\n        output[i] = (input[i] - currentMin) * factor + minValue;\n    }\n\n    return output;\n}\n","/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function min(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var min = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] < min) min = input[i];\n    }\n    return min;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\n/**\n * @class LuDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n * @param {Matrix} matrix\n */\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    var lu = matrix.clone();\n    var rows = lu.rows;\n    var columns = lu.columns;\n    var pivotVector = new Array(rows);\n    var pivotSign = 1;\n    var i, j, k, p, s, t, v;\n    var LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isSingular() {\n    var data = this.LU;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      if (data[j][j] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Matrix} value\n   * @return {Matrix}\n   */\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var lu = this.LU;\n    var rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    var count = value.columns;\n    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    var columns = lu.columns;\n    var i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X[k][j] /= lu[k][k];\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get determinant() {\n    var data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    var determinant = this.pivotSign;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      determinant *= data[j][j];\n    }\n    return determinant;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get lowerTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i > j) {\n          X[i][j] = data[i][j];\n        } else if (i === j) {\n          X[i][j] = 1;\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get upperTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i <= j) {\n          X[i][j] = data[i][j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get pivotPermutationVector() {\n    return this.pivotVector.slice();\n  }\n}\n","export function hypotenuse(a, b) {\n  var r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nexport function getFilled2DArray(rows, columns, value) {\n  var array = new Array(rows);\n  for (var i = 0; i < rows; i++) {\n    array[i] = new Array(columns);\n    for (var j = 0; j < columns; j++) {\n      array[i][j] = value;\n    }\n  }\n  return array;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class SingularValueDecomposition\n * @see https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n * @param {Matrix} value\n * @param {object} [options]\n * @param {boolean} [options.computeLeftSingularVectors=true]\n * @param {boolean} [options.computeRightSingularVectors=true]\n * @param {boolean} [options.autoTranspose=false]\n */\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var m = value.rows;\n    var n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n\n    var wantu = Boolean(computeLeftSingularVectors);\n    var wantv = Boolean(computeRightSingularVectors);\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose'\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        var aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    var nu = Math.min(m, n);\n    var ni = Math.min(m + 1, n);\n    var s = new Array(ni);\n    var U = getFilled2DArray(m, nu, 0);\n    var V = getFilled2DArray(n, n, 0);\n\n    var e = new Array(n);\n    var work = new Array(m);\n\n    var si = new Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n    var mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a[i][k]);\n        }\n        if (s[k] !== 0) {\n          if (a[k][k] < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a[i][k] /= s[k];\n          }\n          a[k][k] += 1;\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a[i][k] * a[i][j];\n          }\n          t = -t / a[k][k];\n          for (let i = k; i < m; i++) {\n            a[i][j] += t * a[i][k];\n          }\n        }\n        e[j] = a[k][j];\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U[i][k] = a[i][k];\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a[i][j];\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a[i][j] += t * work[i];\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V[i][k] = e[i];\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U[i][j] = 0;\n        }\n        U[j][j] = 1;\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U[i][k] * U[i][j];\n            }\n            t = -t / U[k][k];\n            for (let i = k; i < m; i++) {\n              U[i][j] += t * U[i][k];\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U[i][k] = -U[i][k];\n          }\n          U[k][k] = 1 + U[k][k];\n          for (let i = 0; i < k - 1; i++) {\n            U[i][k] = 0;\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U[i][k] = 0;\n          }\n          U[k][k] = 1;\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V[i][k] * V[i][j];\n            }\n            t = -t / V[k + 1][k];\n            for (let i = k + 1; i < n; i++) {\n              V[i][j] += t * V[i][k];\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V[i][k] = 0;\n        }\n        V[k][k] = 1;\n      }\n    }\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][p - 1];\n                V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                V[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][k - 1];\n                U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k])\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][j + 1];\n                V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                V[i][j] = t;\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][j + 1];\n                U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V[i][k] = -V[i][k];\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V[i][k + 1];\n                V[i][k + 1] = V[i][k];\n                V[i][k] = t;\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U[i][k + 1];\n                U[i][k + 1] = U[i][k];\n                U[i][k] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      var tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  /**\n   * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).\n   * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :\n   * var svd = SingularValueDecomposition(A);\n   * var x = svd.solve(b);\n   * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)\n   * @return {Matrix} - The vector x\n   */\n  solve(value) {\n    var Y = value;\n    var e = this.threshold;\n    var scols = this.s.length;\n    var Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls[i][i] = 0;\n      } else {\n        Ls[i][i] = 1 / this.s[i];\n      }\n    }\n\n    var U = this.U;\n    var V = this.rightSingularVectors;\n\n    var VL = V.mmul(Ls);\n    var vrows = V.rows;\n    var urows = U.length;\n    var VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL[i][k] * U[j][k];\n        }\n        VLU[i][j] = sum;\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  /**\n   *\n   * @param {Array<number>} value\n   * @return {Matrix}\n   */\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  /**\n   * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :\n   * var svd = SingularValueDecomposition(A);\n   * var inverseA = svd.inverse();\n   * @return {Matrix} - The approximation of the inverse of the matrix\n   */\n  inverse() {\n    var V = this.V;\n    var e = this.threshold;\n    var vrows = V.length;\n    var vcols = V[0].length;\n    var X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X[i][j] = V[i][j] / this.s[j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n\n    var U = this.U;\n\n    var urows = U.length;\n    var ucols = U[0].length;\n    var Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X[i][k] * U[j][k];\n        }\n        Y[i][j] = sum;\n      }\n    }\n\n    return Y;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get norm2() {\n    return this.s[0];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get rank() {\n    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    var r = 0;\n    var s = this.s;\n    for (var i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get diagonal() {\n    return this.s;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get leftSingularVectors() {\n    if (!Matrix.isMatrix(this.U)) {\n      this.U = new Matrix(this.U);\n    }\n    return this.U;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get rightSingularVectors() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import Matrix from './matrix';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  var max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  var max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns'\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  var rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  var columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function getRange(from, to) {\n  var arr = new Array(to - from + 1);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = from + i;\n  }\n  return arr;\n}\n\nexport function sumByRow(matrix) {\n  var sum = Matrix.zeros(matrix.rows, 1);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  var sum = Matrix.zeros(1, matrix.columns);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  var v = 0;\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class BaseView extends AbstractMatrix() {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex\n    );\n  }\n}\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    var indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex]\n    );\n  }\n}\n","import { checkRowIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    rowIndices = checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n","import { checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    columnIndices = checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport LuDecomposition from './dc/lu';\nimport SvDecomposition from './dc/svd';\nimport {\n  checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector,\n  checkRange, checkIndices,\n  sumByRow, sumByColumn, sumAll\n} from './util';\nimport MatrixTransposeView from './views/transpose';\nimport MatrixRowView from './views/row';\nimport MatrixSubView from './views/sub';\nimport MatrixSelectionView from './views/selection';\nimport MatrixRowSelectionView from './views/rowSelection';\nimport MatrixColumnSelectionView from './views/columnSelection';\nimport MatrixColumnView from './views/column';\nimport MatrixFlipRowView from './views/flipRow';\nimport MatrixFlipColumnView from './views/flipColumn';\n\nexport default function AbstractMatrix(superCtor) {\n  if (superCtor === undefined) superCtor = Object;\n\n  /**\n   * Real matrix\n   * @class Matrix\n   * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n   * 2D array containing the data or Matrix instance to clone\n   * @param {number} [nColumns] - Number of columns of the new matrix\n   */\n  class Matrix extends superCtor {\n    static get [Symbol.species]() {\n      return this;\n    }\n\n    /**\n     * Constructs a Matrix with the chosen dimensions from a 1D array\n     * @param {number} newRows - Number of rows\n     * @param {number} newColumns - Number of columns\n     * @param {Array} newData - A 1D array containing data for the matrix\n     * @return {Matrix} - The new matrix\n     */\n    static from1DArray(newRows, newColumns, newData) {\n      var length = newRows * newColumns;\n      if (length !== newData.length) {\n        throw new RangeError('Data length does not match given dimensions');\n      }\n      var newMatrix = new this(newRows, newColumns);\n      for (var row = 0; row < newRows; row++) {\n        for (var column = 0; column < newColumns; column++) {\n          newMatrix.set(row, column, newData[row * newColumns + column]);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static rowVector(newData) {\n      var vector = new this(1, newData.length);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(0, i, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static columnVector(newData) {\n      var vector = new this(newData.length, 1);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(i, 0, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static empty(rows, columns) {\n      return new this(rows, columns);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static zeros(rows, columns) {\n      return this.empty(rows, columns).fill(0);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static ones(rows, columns) {\n      return this.empty(rows, columns).fill(1);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static rand(rows, columns, rng) {\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.set(i, j, rng());\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static randInt(rows, columns, maxValue, rng) {\n      if (maxValue === undefined) maxValue = 1000;\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = Math.floor(rng() * maxValue);\n          matrix.set(i, j, value);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n    static eye(rows, columns, value) {\n      if (columns === undefined) columns = rows;\n      if (value === undefined) value = 1;\n      var min = Math.min(rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, value);\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n    static diag(data, rows, columns) {\n      var l = data.length;\n      if (rows === undefined) rows = l;\n      if (columns === undefined) columns = rows;\n      var min = Math.min(l, rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, data[i]);\n      }\n      return matrix;\n    }\n\n    /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static min(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static max(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n    static checkMatrix(value) {\n      return Matrix.isMatrix(value) ? value : new this(value);\n    }\n\n    /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n    static isMatrix(value) {\n      return (value != null) && (value.klass === 'Matrix');\n    }\n\n    /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n    get size() {\n      return this.rows * this.columns;\n    }\n\n    /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n    apply(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n      }\n      var ii = this.rows;\n      var jj = this.columns;\n      for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n          callback.call(this, i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n    to1DArray() {\n      var array = new Array(this.size);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          array[i * this.columns + j] = this.get(i, j);\n        }\n      }\n      return array;\n    }\n\n    /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n    to2DArray() {\n      var copy = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        copy[i] = new Array(this.columns);\n        for (var j = 0; j < this.columns; j++) {\n          copy[i][j] = this.get(i, j);\n        }\n      }\n      return copy;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row\n         */\n    isRowVector() {\n      return this.rows === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one column\n         */\n    isColumnVector() {\n      return this.columns === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n    isVector() {\n      return (this.rows === 1) || (this.columns === 1);\n    }\n\n    /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n    isSquare() {\n      return this.rows === this.columns;\n    }\n\n    /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n    isSymmetric() {\n      if (this.isSquare()) {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j <= i; j++) {\n            if (this.get(i, j) !== this.get(j, i)) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n      throw new Error('set method is unimplemented');\n    }\n\n    /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n      throw new Error('get method is unimplemented');\n    }\n\n    /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n    repeat(rowRep, colRep) {\n      rowRep = rowRep || 1;\n      colRep = colRep || 1;\n      var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n      for (var i = 0; i < rowRep; i++) {\n        for (var j = 0; j < colRep; j++) {\n          matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n    fill(value) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, value);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n    neg() {\n      return this.mulS(-1);\n    }\n\n    /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n    getRow(index) {\n      checkRowIndex(this, index);\n      var row = new Array(this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        row[i] = this.get(index, i);\n      }\n      return row;\n    }\n\n    /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n    getRowVector(index) {\n      return this.constructor.rowVector(this.getRow(index));\n    }\n\n    /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setRow(index, array) {\n      checkRowIndex(this, index);\n      array = checkRowVector(this, array);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n    swapRows(row1, row2) {\n      checkRowIndex(this, row1);\n      checkRowIndex(this, row2);\n      for (var i = 0; i < this.columns; i++) {\n        var temp = this.get(row1, i);\n        this.set(row1, i, this.get(row2, i));\n        this.set(row2, i, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n    getColumn(index) {\n      checkColumnIndex(this, index);\n      var column = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        column[i] = this.get(i, index);\n      }\n      return column;\n    }\n\n    /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n    getColumnVector(index) {\n      return this.constructor.columnVector(this.getColumn(index));\n    }\n\n    /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setColumn(index, array) {\n      checkColumnIndex(this, index);\n      array = checkColumnVector(this, array);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n    swapColumns(column1, column2) {\n      checkColumnIndex(this, column1);\n      checkColumnIndex(this, column2);\n      for (var i = 0; i < this.rows; i++) {\n        var temp = this.get(i, column1);\n        this.set(i, column1, this.get(i, column2));\n        this.set(i, column2, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulRow(index, value) {\n      checkRowIndex(this, index);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, this.get(index, i) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulColumn(index, value) {\n      checkColumnIndex(this, index);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, this.get(i, index) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n    max() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n    maxIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n    min() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n    minIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    maxRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    maxRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    minRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    minRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    maxColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    maxColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    minColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    minColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n    diag() {\n      var min = Math.min(this.rows, this.columns);\n      var diag = new Array(min);\n      for (var i = 0; i < min; i++) {\n        diag[i] = this.get(i, i);\n      }\n      return diag;\n    }\n\n    /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n    sum(by) {\n      switch (by) {\n        case 'row':\n          return sumByRow(this);\n        case 'column':\n          return sumByColumn(this);\n        default:\n          return sumAll(this);\n      }\n    }\n\n    /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n    mean() {\n      return this.sum() / this.size;\n    }\n\n    /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n    prod() {\n      var prod = 1;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          prod *= this.get(i, j);\n        }\n      }\n      return prod;\n    }\n\n    /**\n         * Returns the norm of a matrix.\n         * @param {string} type - \"frobenius\" (default) or \"max\" return resp. the Frobenius norm and the max norm.\n         * @return {number}\n         */\n    norm(type = 'frobenius') {\n      var result = 0;\n      if (type === 'max') {\n        return this.max();\n      } else if (type === 'frobenius') {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j < this.columns; j++) {\n            result = result + this.get(i, j) * this.get(i, j);\n          }\n        }\n        return Math.sqrt(result);\n      } else {\n        throw new RangeError(`unknown norm type: ${type}`);\n      }\n    }\n\n    /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n    cumulativeSum() {\n      var sum = 0;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          sum += this.get(i, j);\n          this.set(i, j, sum);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n    dot(vector2) {\n      if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n      var vector1 = this.to1DArray();\n      if (vector1.length !== vector2.length) {\n        throw new RangeError('vectors do not have the same size');\n      }\n      var dot = 0;\n      for (var i = 0; i < vector1.length; i++) {\n        dot += vector1[i] * vector2[i];\n      }\n      return dot;\n    }\n\n    /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    mmul(other) {\n      other = this.constructor.checkMatrix(other);\n      if (this.columns !== other.rows) {\n        // eslint-disable-next-line no-console\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n      }\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.columns;\n\n      var result = new this.constructor[Symbol.species](m, p);\n\n      var Bcolj = new Array(n);\n      for (var j = 0; j < p; j++) {\n        for (var k = 0; k < n; k++) {\n          Bcolj[k] = other.get(k, j);\n        }\n\n        for (var i = 0; i < m; i++) {\n          var s = 0;\n          for (k = 0; k < n; k++) {\n            s += this.get(i, k) * Bcolj[k];\n          }\n\n          result.set(i, j, s);\n        }\n      }\n      return result;\n    }\n\n    strassen2x2(other) {\n      var result = new this.constructor[Symbol.species](2, 2);\n      const a11 = this.get(0, 0);\n      const b11 = other.get(0, 0);\n      const a12 = this.get(0, 1);\n      const b12 = other.get(0, 1);\n      const a21 = this.get(1, 0);\n      const b21 = other.get(1, 0);\n      const a22 = this.get(1, 1);\n      const b22 = other.get(1, 1);\n\n      // Compute intermediate values.\n      const m1 = (a11 + a22) * (b11 + b22);\n      const m2 = (a21 + a22) * b11;\n      const m3 = a11 * (b12 - b22);\n      const m4 = a22 * (b21 - b11);\n      const m5 = (a11 + a12) * b22;\n      const m6 = (a21 - a11) * (b11 + b12);\n      const m7 = (a12 - a22) * (b21 + b22);\n\n      // Combine intermediate values into the output.\n      const c00 = m1 + m4 - m5 + m7;\n      const c01 = m3 + m5;\n      const c10 = m2 + m4;\n      const c11 = m1 - m2 + m3 + m6;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      return result;\n    }\n\n    strassen3x3(other) {\n      var result = new this.constructor[Symbol.species](3, 3);\n\n      const a00 = this.get(0, 0);\n      const a01 = this.get(0, 1);\n      const a02 = this.get(0, 2);\n      const a10 = this.get(1, 0);\n      const a11 = this.get(1, 1);\n      const a12 = this.get(1, 2);\n      const a20 = this.get(2, 0);\n      const a21 = this.get(2, 1);\n      const a22 = this.get(2, 2);\n\n      const b00 = other.get(0, 0);\n      const b01 = other.get(0, 1);\n      const b02 = other.get(0, 2);\n      const b10 = other.get(1, 0);\n      const b11 = other.get(1, 1);\n      const b12 = other.get(1, 2);\n      const b20 = other.get(2, 0);\n      const b21 = other.get(2, 1);\n      const b22 = other.get(2, 2);\n\n      const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n      const m2 = (a00 - a10) * (-b01 + b11);\n      const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n      const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n      const m5 = (a10 + a11) * (-b00 + b01);\n      const m6 = a00 * b00;\n      const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n      const m8 = (-a00 + a20) * (b02 - b12);\n      const m9 = (a20 + a21) * (-b00 + b02);\n      const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n      const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n      const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n      const m13 = (a02 - a22) * (b11 - b21);\n      const m14 = a02 * b20;\n      const m15 = (a21 + a22) * (-b20 + b21);\n      const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n      const m17 = (a02 - a12) * (b12 - b22);\n      const m18 = (a11 + a12) * (-b20 + b22);\n      const m19 = a01 * b10;\n      const m20 = a12 * b21;\n      const m21 = a10 * b02;\n      const m22 = a20 * b01;\n      const m23 = a22 * b22;\n\n      const c00 = m6 + m14 + m19;\n      const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n      const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n      const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n      const c11 = m2 + m4 + m5 + m6 + m20;\n      const c12 = m14 + m16 + m17 + m18 + m21;\n      const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n      const c21 = m12 + m13 + m14 + m15 + m22;\n      const c22 = m6 + m7 + m8 + m9 + m23;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(0, 2, c02);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      result.set(1, 2, c12);\n      result.set(2, 0, c20);\n      result.set(2, 1, c21);\n      result.set(2, 2, c22);\n      return result;\n    }\n\n    /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n    mmulStrassen(y) {\n      var x = this.clone();\n      var r1 = x.rows;\n      var c1 = x.columns;\n      var r2 = y.rows;\n      var c2 = y.columns;\n      if (c1 !== r2) {\n        // eslint-disable-next-line no-console\n        console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n      }\n\n      // Put a matrix into the top left of a matrix of zeros.\n      // `rows` and `cols` are the dimensions of the output matrix.\n      function embed(mat, rows, cols) {\n        var r = mat.rows;\n        var c = mat.columns;\n        if ((r === rows) && (c === cols)) {\n          return mat;\n        } else {\n          var resultat = Matrix.zeros(rows, cols);\n          resultat = resultat.setSubMatrix(mat, 0, 0);\n          return resultat;\n        }\n      }\n\n\n      // Make sure both matrices are the same size.\n      // This is exclusively for simplicity:\n      // this algorithm can be implemented with matrices of different sizes.\n\n      var r = Math.max(r1, r2);\n      var c = Math.max(c1, c2);\n      x = embed(x, r, c);\n      y = embed(y, r, c);\n\n      // Our recursive multiplication function.\n      function blockMult(a, b, rows, cols) {\n        // For small matrices, resort to naive multiplication.\n        if (rows <= 512 || cols <= 512) {\n          return a.mmul(b); // a is equivalent to this\n        }\n\n        // Apply dynamic padding.\n        if ((rows % 2 === 1) && (cols % 2 === 1)) {\n          a = embed(a, rows + 1, cols + 1);\n          b = embed(b, rows + 1, cols + 1);\n        } else if (rows % 2 === 1) {\n          a = embed(a, rows + 1, cols);\n          b = embed(b, rows + 1, cols);\n        } else if (cols % 2 === 1) {\n          a = embed(a, rows, cols + 1);\n          b = embed(b, rows, cols + 1);\n        }\n\n        var halfRows = parseInt(a.rows / 2, 10);\n        var halfCols = parseInt(a.columns / 2, 10);\n        // Subdivide input matrices.\n        var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n        var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n        var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n        var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n        var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n        var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n        var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n        // Compute intermediate values.\n        var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n        var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n        var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n        var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n        var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n        var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n        var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n        // Combine intermediate values into the output.\n        var c11 = Matrix.add(m1, m4);\n        c11.sub(m5);\n        c11.add(m7);\n        var c12 = Matrix.add(m3, m5);\n        var c21 = Matrix.add(m2, m4);\n        var c22 = Matrix.sub(m1, m2);\n        c22.add(m3);\n        c22.add(m6);\n\n        // Crop output to the desired size (undo dynamic padding).\n        var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n        resultat = resultat.setSubMatrix(c11, 0, 0);\n        resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n        resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n        resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n        return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n      }\n      return blockMult(x, y, r, c);\n    }\n\n    /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n    scaleRows(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.rows; i++) {\n        var scaled = rescale(this.getRow(i), { min, max });\n        newMatrix.setRow(i, scaled);\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n    scaleColumns(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        var scaled = rescale(this.getColumn(i), {\n          min: min,\n          max: max\n        });\n        newMatrix.setColumn(i, scaled);\n      }\n      return newMatrix;\n    }\n\n\n    /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    kroneckerProduct(other) {\n      other = this.constructor.checkMatrix(other);\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.rows;\n      var q = other.columns;\n\n      var result = new this.constructor[Symbol.species](m * p, n * q);\n      for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n          for (var k = 0; k < p; k++) {\n            for (var l = 0; l < q; l++) {\n              result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n            }\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n    transpose() {\n      var result = new this.constructor[Symbol.species](this.columns, this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result.set(j, i, this.get(i, j));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortRows(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.rows; i++) {\n        this.setRow(i, this.getRow(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortColumns(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.columns; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n    subMatrix(startRow, endRow, startColumn, endColumn) {\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n      for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n    subMatrixRow(indices, startColumn, endColumn) {\n      if (startColumn === undefined) startColumn = 0;\n      if (endColumn === undefined) endColumn = this.columns - 1;\n      if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          if (indices[i] < 0 || indices[i] >= this.rows) {\n            throw new RangeError(`Row index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n    subMatrixColumn(indices, startRow, endRow) {\n      if (startRow === undefined) startRow = 0;\n      if (endRow === undefined) endRow = this.rows - 1;\n      if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n          if (indices[i] < 0 || indices[i] >= this.columns) {\n            throw new RangeError(`Column index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n    setSubMatrix(matrix, startRow, startColumn) {\n      matrix = this.constructor.checkMatrix(matrix);\n      var endRow = startRow + matrix.rows - 1;\n      var endColumn = startColumn + matrix.columns - 1;\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n          this[startRow + i][startColumn + j] = matrix.get(i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n    selection(rowIndices, columnIndices) {\n      var indices = checkIndices(this, rowIndices, columnIndices);\n      var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n      for (var i = 0; i < indices.row.length; i++) {\n        var rowIndex = indices.row[i];\n        for (var j = 0; j < indices.column.length; j++) {\n          var columnIndex = indices.column[j];\n          newMatrix[i][j] = this.get(rowIndex, columnIndex);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n    trace() {\n      var min = Math.min(this.rows, this.columns);\n      var trace = 0;\n      for (var i = 0; i < min; i++) {\n        trace += this.get(i, i);\n      }\n      return trace;\n    }\n\n    /*\n         Matrix views\n         */\n\n    /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n    transposeView() {\n      return new MatrixTransposeView(this);\n    }\n\n    /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n    rowView(row) {\n      checkRowIndex(this, row);\n      return new MatrixRowView(this, row);\n    }\n\n    /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n    columnView(column) {\n      checkColumnIndex(this, column);\n      return new MatrixColumnView(this, column);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n    flipRowView() {\n      return new MatrixFlipRowView(this);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n    flipColumnView() {\n      return new MatrixFlipColumnView(this);\n    }\n\n    /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n    subMatrixView(startRow, endRow, startColumn, endColumn) {\n      return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n    }\n\n    /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n    selectionView(rowIndices, columnIndices) {\n      return new MatrixSelectionView(this, rowIndices, columnIndices);\n    }\n\n    /**\n         * Returns a view of the row indices\n         * @example\n         * // resulting vector is [[1,2,3], [1,2,3]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])\n         * @param {Array<number>} rowIndices\n         * @return {MatrixRowSelectionView}\n         */\n    rowSelectionView(rowIndices) {\n      return new MatrixRowSelectionView(this, rowIndices);\n    }\n\n    /**\n         * Returns a view of the column indices\n         * @example\n         * // resulting vector is [[2, 2], [5, 5]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])\n         * @param {Array<number>} columnIndices\n         * @return {MatrixColumnSelectionView}\n         */\n    columnSelectionView(columnIndices) {\n      return new MatrixColumnSelectionView(this, columnIndices);\n    }\n\n\n    /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n    det() {\n      if (this.isSquare()) {\n        var a, b, c, d;\n        if (this.columns === 2) {\n          // 2 x 2 matrix\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(1, 0);\n          d = this.get(1, 1);\n\n          return a * d - (b * c);\n        } else if (this.columns === 3) {\n          // 3 x 3 matrix\n          var subMatrix0, subMatrix1, subMatrix2;\n          subMatrix0 = this.selectionView([1, 2], [1, 2]);\n          subMatrix1 = this.selectionView([1, 2], [0, 2]);\n          subMatrix2 = this.selectionView([1, 2], [0, 1]);\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(0, 2);\n\n          return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n        } else {\n          // general purpose determinant using the LU decomposition\n          return new LuDecomposition(this).determinant;\n        }\n      } else {\n        throw Error('Determinant can only be calculated for a square matrix.');\n      }\n    }\n\n    /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n    pseudoInverse(threshold) {\n      if (threshold === undefined) threshold = Number.EPSILON;\n      var svdSolution = new SvDecomposition(this, { autoTranspose: true });\n\n      var U = svdSolution.leftSingularVectors;\n      var V = svdSolution.rightSingularVectors;\n      var s = svdSolution.diagonal;\n\n      for (var i = 0; i < s.length; i++) {\n        if (Math.abs(s[i]) > threshold) {\n          s[i] = 1.0 / s[i];\n        } else {\n          s[i] = 0.0;\n        }\n      }\n\n      // convert list to diagonal\n      s = this.constructor[Symbol.species].diag(s);\n      return V.mmul(s.mmul(U.transposeView()));\n    }\n\n    /**\n         * Creates an exact and independent copy of the matrix\n         * @return {Matrix}\n         */\n    clone() {\n      var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n      for (var row = 0; row < this.rows; row++) {\n        for (var column = 0; column < this.columns; column++) {\n          newMatrix.set(row, column, this.get(row, column));\n        }\n      }\n      return newMatrix;\n    }\n  }\n\n  Matrix.prototype.klass = 'Matrix';\n\n  function compareNumbers(a, b) {\n    return a - b;\n  }\n\n  /*\n     Synonyms\n     */\n\n  Matrix.random = Matrix.rand;\n  Matrix.diagonal = Matrix.diag;\n  Matrix.prototype.diagonal = Matrix.prototype.diag;\n  Matrix.identity = Matrix.eye;\n  Matrix.prototype.negate = Matrix.prototype.neg;\n  Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n  Matrix.prototype.determinant = Matrix.prototype.det;\n\n  /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n  var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n  var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n  var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n  var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n  var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var staticMethodWithOneArg = staticMethodWithArgs;\n\n  var operators = [\n    // Arithmetic operators\n    ['+', 'add'],\n    ['-', 'sub', 'subtract'],\n    ['*', 'mul', 'multiply'],\n    ['/', 'div', 'divide'],\n    ['%', 'mod', 'modulus'],\n    // Bitwise operators\n    ['&', 'and'],\n    ['|', 'or'],\n    ['^', 'xor'],\n    ['<<', 'leftShift'],\n    ['>>', 'signPropagatingRightShift'],\n    ['>>>', 'rightShift', 'zeroFillRightShift']\n  ];\n\n  var i;\n  var eval2 = eval; // eslint-disable-line no-eval\n  for (var operator of operators) {\n    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, { name: operator[1], op: operator[0] }));\n    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, { name: `${operator[1]}S`, op: operator[0] }));\n    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, { name: `${operator[1]}M`, op: operator[0] }));\n    var staticOp = eval2(fillTemplateFunction(staticOperator, { name: operator[1] }));\n    for (i = 1; i < operator.length; i++) {\n      Matrix.prototype[operator[i]] = inplaceOp;\n      Matrix.prototype[`${operator[i]}S`] = inplaceOpS;\n      Matrix.prototype[`${operator[i]}M`] = inplaceOpM;\n      Matrix[operator[i]] = staticOp;\n    }\n  }\n\n  var methods = [['~', 'not']];\n\n  [\n    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n  ].forEach(function (mathMethod) {\n    methods.push([`Math.${mathMethod}`, mathMethod]);\n  });\n\n  for (var method of methods) {\n    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, { name: method[1], method: method[0] }));\n    var staticMeth = eval2(fillTemplateFunction(staticMethod, { name: method[1] }));\n    for (i = 1; i < method.length; i++) {\n      Matrix.prototype[method[i]] = inplaceMeth;\n      Matrix[method[i]] = staticMeth;\n    }\n  }\n\n  var methodsWithArgs = [['Math.pow', 1, 'pow']];\n\n  for (var methodWithArg of methodsWithArgs) {\n    var args = 'arg0';\n    for (i = 1; i < methodWithArg[1]; i++) {\n      args += `, arg${i}`;\n    }\n    if (methodWithArg[1] !== 1) {\n      var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {\n        name: methodWithArg[2],\n        method: methodWithArg[0],\n        args: args\n      }));\n      var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, { name: methodWithArg[2], args: args }));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n        Matrix[methodWithArg[i]] = staticMethWithArgs;\n      }\n    } else {\n      var tmplVar = {\n        name: methodWithArg[2],\n        args: args,\n        method: methodWithArg[0]\n      };\n      var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n      var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n      var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n      var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n        Matrix.prototype[`${methodWithArg[i]}M`] = inplaceMethodM;\n        Matrix.prototype[`${methodWithArg[i]}S`] = inplaceMethodS;\n        Matrix[methodWithArg[i]] = staticMethod2;\n      }\n    }\n  }\n\n  function fillTemplateFunction(template, values) {\n    for (var value in values) {\n      template = template.replace(new RegExp(`%${value}%`, 'g'), values[value]);\n    }\n    return template;\n  }\n\n  return Matrix;\n}\n","import AbstractMatrix from './abstractMatrix';\nimport {\n  checkColumnIndex,\n  checkColumnVector,\n  checkRowIndex,\n  checkRowVector\n} from './util';\n\nexport default class Matrix extends AbstractMatrix(Array) {\n  constructor(nRows, nColumns) {\n    var i;\n    if (arguments.length === 1 && typeof nRows === 'number') {\n      return new Array(nRows);\n    }\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      super(nRows);\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (i = 0; i < nRows; i++) {\n          this[i] = new Array(nColumns);\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const matrix = nRows;\n      nRows = matrix.length;\n      nColumns = matrix[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element'\n        );\n      }\n      super(nRows);\n      for (i = 0; i < nRows; i++) {\n        if (matrix[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this[i] = [].concat(matrix[i]);\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array'\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n  }\n\n  /**\n   * Removes a row from the given index\n   * @param {number} index - Row index\n   * @return {Matrix} this\n   */\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a row at the given index\n   * @param {number} [index = this.rows] - Row index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = checkRowVector(this, array, true);\n    this.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  /**\n   * Removes a column from the given index\n   * @param {number} index - Column index\n   * @return {Matrix} this\n   */\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a column at the given index\n   * @param {number} [index = this.columns] - Column index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix() {\n  /**\n   * @class WrapperMatrix1D\n   * @param {Array<number>} data\n   * @param {object} [options]\n   * @param {object} [options.rows = 1]\n   */\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix() {\n  /**\n   * @class WrapperMatrix2D\n   * @param {Array<Array<number>>} data\n   */\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\n/**\n * @param {Array<Array<number>>|Array<number>} array\n * @param {object} [options]\n * @param {object} [options.rows = 1]\n * @return {WrapperMatrix1D|WrapperMatrix2D}\n */\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse } from './util';\n\n/**\n * @class QrDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n * @param {Matrix} value\n */\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var qr = value.clone();\n    var m = value.rows;\n    var n = value.columns;\n    var rdiag = new Array(n);\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  /**\n   * Solve a problem of least square (Ax=b) by using the QR decomposition. Useful when A is rectangular, but not working when A is singular.\n   * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :\n   * var qr = QrDecomposition(A);\n   * var x = qr.solve(b);\n   * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)\n   * @return {Matrix} - The vector x\n   */\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var qr = this.QR;\n    var m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    var count = value.columns;\n    var X = value.clone();\n    var n = qr.columns;\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr[i][k] * X[i][j];\n        }\n        s = -s / qr[k][k];\n        for (i = k; i < m; i++) {\n          X[i][j] += s * qr[i][k];\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X[k][j] /= this.Rdiag[k];\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * qr[i][k];\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isFullRank() {\n    var columns = this.QR.columns;\n    for (var i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get upperTriangularMatrix() {\n    var qr = this.QR;\n    var n = qr.columns;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X[i][j] = qr[i][j];\n        } else if (i === j) {\n          X[i][j] = this.Rdiag[i];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get orthogonalMatrix() {\n    var qr = this.QR;\n    var rows = qr.rows;\n    var columns = qr.columns;\n    var X = new Matrix(rows, columns);\n    var i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X[i][k] = 0;\n      }\n      X[k][k] = 1;\n      for (j = k; j < columns; j++) {\n        if (qr[k][k] !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr[i][k] * X[i][j];\n          }\n\n          s = -s / qr[k][k];\n\n          for (i = k; i < rows; i++) {\n            X[i][j] += s * qr[i][k];\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\n\nimport { Matrix, WrapperMatrix2D } from './index';\n\n/**\n * Computes the inverse of a Matrix\n * @param {Matrix} matrix\n * @param {boolean} [useSVD=false]\n * @return {Matrix}\n */\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\n/**\n *\n * @param {Matrix} leftHandSide\n * @param {Matrix} rightHandSide\n * @param {boolean} [useSVD = false]\n * @return {Matrix}\n */\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import max from 'ml-array-max';\n\nimport Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\n// function used by rowsDependencies\nfunction xrange(n, exception) {\n  var range = [];\n  for (var i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\n// function used by rowsDependencies\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    var returnArray = matrix.addRow(index, [0]);\n    for (var i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\n/**\n * Creates a matrix which represents the dependencies between rows.\n * If a row is a linear combination of others rows, the result will be a row with the coefficients of this combination.\n * For example : for A = [[2, 0, 0, 1], [0, 1, 6, 0], [0, 3, 0, 1], [0, 0, 1, 0], [0, 1, 2, 0]], the result will be [[0, 0, 0, 0, 0], [0, 0, 0, 4, 1], [0, 0, 0, 0, 0], [0, 0.25, 0, 0, -0.25], [0, 1, 0, -4, 0]]\n * @param {Matrix} matrix\n * @param {Object} [options] includes thresholdValue and thresholdError.\n * @param {number} [options.thresholdValue = 10e-10] If an absolute value is inferior to this threshold, it will equals zero.\n * @param {number} [options.thresholdError = 10e-10] If the error is inferior to that threshold, the linear combination found is accepted and the row is dependent from other rows.\n * @return {Matrix} the matrix which represents the dependencies between rows.\n */\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n\n  var n = matrix.rows;\n  var results = new Matrix(n, n);\n\n  for (var i = 0; i < n; i++) {\n    var b = Matrix.columnVector(matrix.getRow(i));\n    var Abis = matrix.subMatrixRow(xrange(n, i)).transposeView();\n    var svd = new SingularValueDecomposition(Abis);\n    var x = svd.solve(b);\n    var error = max(\n      Matrix.sub(b, Abis.mmul(x))\n        .abs()\n        .to1DArray()\n    );\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError)\n    );\n  }\n  return results;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class EigenvalueDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n * @param {Matrix} matrix\n * @param {object} [options]\n * @param {boolean} [options.assumeSymmetric=false]\n */\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns;\n    var V = getFilled2DArray(n, n, 0);\n    var d = new Array(n);\n    var e = new Array(n);\n    var value = matrix;\n    var i, j;\n\n    var isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V[i][j] = value.get(i, j);\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      var H = getFilled2DArray(n, n, 0);\n      var ort = new Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H[i][j] = value.get(i, j);\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get realEigenvalues() {\n    return this.d;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get imaginaryEigenvalues() {\n    return this.e;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get eigenvectorMatrix() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    var n = this.n;\n    var e = this.e;\n    var d = this.d;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X[i][j] = 0;\n      }\n      X[i][i] = d[i];\n      if (e[i] > 0) {\n        X[i][i + 1] = e[i];\n      } else if (e[i] < 0) {\n        X[i][i - 1] = e[i];\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  var f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n        V[j][i] = 0;\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V[j][i] = f;\n        g = e[j] + V[j][j] * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V[k][j] * d[k];\n          e[k] += V[k][j] * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V[k][j] -= f * e[k] + g * d[k];\n        }\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V[n - 1][i] = V[i][i];\n    V[i][i] = 1;\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V[k][i + 1] / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V[k][i + 1] * V[k][j];\n        }\n        for (k = 0; k <= i; k++) {\n          V[k][j] -= g * d[k];\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V[k][i + 1] = 0;\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n    V[n - 1][j] = 0;\n  }\n\n  V[n - 1][n - 1] = 1;\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  var g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  var f = 0;\n  var tst1 = 0;\n  var eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V[k][i + 1];\n            V[k][i + 1] = s * V[k][i] + c * h;\n            V[k][i] = c * V[k][i] - s * h;\n          }\n        }\n\n        p = -s * s2 * c3 * el1 * e[l] / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V[j][i];\n        V[j][i] = V[j][k];\n        V[j][k] = p;\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  var low = 0;\n  var high = n - 1;\n  var f, g, h, i, j, m;\n  var scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H[i][m - 1]);\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H[i][m - 1] / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H[i][j];\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H[i][j] -= f * ort[i];\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H[i][j];\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H[i][j] -= f * ort[j];\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H[m][m - 1] = scale * g;\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V[i][j] = i === j ? 1 : 0;\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H[m][m - 1] !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H[i][m - 1];\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V[i][j];\n        }\n\n        g = g / ort[m] / H[m][m - 1];\n        for (i = m; i <= high; i++) {\n          V[i][j] += g * ort[i];\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  var n = nn - 1;\n  var low = 0;\n  var high = nn - 1;\n  var eps = Number.EPSILON;\n  var exshift = 0;\n  var norm = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var z = 0;\n  var iter = 0;\n  var i, j, k, l, m, t, w, x, y;\n  var ra, sa, vr, vi;\n  var notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H[i][i];\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H[i][j]);\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H[l][l - 1]) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H[n][n] = H[n][n] + exshift;\n      d[n] = H[n][n];\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H[n][n - 1] * H[n - 1][n];\n      p = (H[n - 1][n - 1] - H[n][n]) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H[n][n] = H[n][n] + exshift;\n      H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n      x = H[n][n];\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H[n][n - 1];\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H[n - 1][j];\n          H[n - 1][j] = q * z + p * H[n][j];\n          H[n][j] = q * H[n][j] - p * z;\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H[i][n - 1];\n          H[i][n - 1] = q * z + p * H[i][n];\n          H[i][n] = q * H[i][n] - p * z;\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V[i][n - 1];\n          V[i][n - 1] = q * z + p * V[i][n];\n          V[i][n] = q * V[i][n] - p * z;\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H[n][n];\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H[n - 1][n - 1];\n        w = H[n][n - 1] * H[n - 1][n];\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H[i][i] -= x;\n        }\n        s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H[i][i] -= s;\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H[m][m];\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n        q = H[m + 1][m + 1] - z - r - s;\n        r = H[m + 2][m + 1];\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H[m - 1][m - 1]) +\n                Math.abs(z) +\n                Math.abs(H[m + 1][m + 1])))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H[i][i - 2] = 0;\n        if (i > m + 2) {\n          H[i][i - 3] = 0;\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H[k][k - 1];\n          q = H[k + 1][k - 1];\n          r = notlast ? H[k + 2][k - 1] : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H[k][k - 1] = -s * x;\n          } else if (l !== m) {\n            H[k][k - 1] = -H[k][k - 1];\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H[k][j] + q * H[k + 1][j];\n            if (notlast) {\n              p = p + r * H[k + 2][j];\n              H[k + 2][j] = H[k + 2][j] - p * z;\n            }\n\n            H[k][j] = H[k][j] - p * x;\n            H[k + 1][j] = H[k + 1][j] - p * y;\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H[i][k] + y * H[i][k + 1];\n            if (notlast) {\n              p = p + z * H[i][k + 2];\n              H[i][k + 2] = H[i][k + 2] - p * r;\n            }\n\n            H[i][k] = H[i][k] - p;\n            H[i][k + 1] = H[i][k + 1] - p * q;\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V[i][k] + y * V[i][k + 1];\n            if (notlast) {\n              p = p + z * V[i][k + 2];\n              V[i][k + 2] = V[i][k + 2] - p * r;\n            }\n\n            V[i][k] = V[i][k] - p;\n            V[i][k + 1] = V[i][k + 1] - p * q;\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H[n][n] = 1;\n      for (i = n - 1; i >= 0; i--) {\n        w = H[i][i] - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H[i][j] * H[j][n];\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H[i][n] = w !== 0 ? -r / w : -r / (eps * norm);\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H[i][n] = t;\n            H[i + 1][n] =\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z;\n          }\n\n          t = Math.abs(H[i][n]);\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n        H[n - 1][n - 1] = q / H[n][n - 1];\n        H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n      } else {\n        cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n        H[n - 1][n - 1] = cdivres[0];\n        H[n - 1][n] = cdivres[1];\n      }\n\n      H[n][n - 1] = 0;\n      H[n][n] = 1;\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H[i][j] * H[j][n - 1];\n          sa = sa + H[i][j] * H[j][n];\n        }\n\n        w = H[i][i] - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi\n            );\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n              H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n            } else {\n              cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n              H[i + 1][n - 1] = cdivres[0];\n              H[i + 1][n] = cdivres[1];\n            }\n          }\n\n          t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n - 1] = H[j][n - 1] / t;\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V[i][j] = H[i][j];\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V[i][k] * H[k][j];\n      }\n      V[i][j] = z;\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  var r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\n/**\n * @class CholeskyDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n * @param {Matrix} value\n */\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value;\n    var dimension = a.rows;\n    var l = new Matrix(dimension, dimension);\n    var positiveDefinite = true;\n    var i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      var Lrowj = l[j];\n      var d = 0;\n      for (k = 0; k < j; k++) {\n        var Lrowk = l[k];\n        var s = 0;\n        for (i = 0; i < k; i++) {\n          s += Lrowk[i] * Lrowj[i];\n        }\n        Lrowj[k] = s = (a.get(j, k) - s) / l[k][k];\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l[j][j] = Math.sqrt(Math.max(d, 0));\n      for (k = j + 1; k < dimension; k++) {\n        l[j][k] = 0;\n      }\n    }\n\n    if (!positiveDefinite) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n  }\n\n  /**\n   *\n   * @param {Matrix} value\n   * @return {Matrix}\n   */\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var l = this.L;\n    var dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n\n    var count = value.columns;\n    var B = value.clone();\n    var i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B[k][j] -= B[i][j] * l[k][i];\n        }\n        B[k][j] /= l[k][k];\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B[k][j] -= B[i][j] * l[i][k];\n        }\n        B[k][j] /= l[k][k];\n      }\n    }\n\n    return B;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n"],"sourceRoot":""}